// Euphoria - Copyright (c) Gustav

#ifndef EUPHORIA_INPUT_KEY_H_
#define EUPHORIA_INPUT_KEY_H_

#include <string>

namespace euphoria::core
{
    /** The mouse button
 */
    enum class MouseButton
    {
        INVALID,
        UNBOUND,
        LEFT,
        MIDDLE,
        RIGHT,
        X1,
        X2
    };

    /** Generate a string representation of the given button
        @param k the key
        @returns the string representation
    */
    std::string
    ToString(MouseButton k);

    /** Generate a key from a string.
        @param keyname the name of the button
        @returns the Button or None
    */
    MouseButton
    ToMouseButton(const std::string& keyname);

    /** A key code
     */
    enum class Key
    {
        INVALID,
        UNBOUND,
        RETURN,
        ESCAPE,
        BACKSPACE,
        TAB,
        SPACE,
        EXCLAIM,
        QUOTEDBL,
        HASH,
        PERCENT,
        DOLLAR,
        AMPERSAND,
        QUOTE,
        LEFT_PAREN,
        RIGHT_PAREN,
        ASTERIX,
        PLUS,
        COMMA,
        MINUS,
        PERIOD,
        SLASH,
        NUM_0,
        NUM_1,
        NUM_2,
        NUM_3,
        NUM_4,
        NUM_5,
        NUM_6,
        NUM_7,
        NUM_8,
        NUM_9,
        COLON,
        SEMICOLON,
        LESS,
        EQUALS,
        GREATER,
        QUESTION,
        AT,
        LEFT_BRACKET,
        BACKSLASH,
        RIGHT_BRACKET,
        CARET,
        UNDERSCORE,
        BACKQUOTE,
        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,
        CAPSLOCK,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        F11,
        F12,
        PRINTSCREEN,
        SCROLLLOCK,
        PAUSE,
        INSERT,
        HOME,
        PAGEUP,
        DELETE,
        END,
        PAGEDOWN,
        RIGHT,
        LEFT,
        DOWN,
        UP,
        NUMLOCK_CLEAR,
        KEYPAD_DIVIDE,
        KEYPAD_MULTIPLY,
        KEYPAD_MINUS,
        KEYPAD_PLUS,
        KEYPAD_ENTER,
        KEYPAD_1,
        KEYPAD_2,
        KEYPAD_3,
        KEYPAD_4,
        KEYPAD_5,
        KEYPAD_6,
        KEYPAD_7,
        KEYPAD_8,
        KEYPAD_9,
        KEYPAD_0,
        KEYPAD_PERIOD,
        APPLICATION,
        POWER,
        KEYPAD_EQUALS,
        F13,
        F14,
        F15,
        F16,
        F17,
        F18,
        F19,
        F20,
        F21,
        F22,
        F23,
        F24,
        EXECUTE,
        HELP,
        MENU,
        SELECT,
        STOP,
        AGAIN,
        UNDO,
        CUT,
        COPY,
        PASTE,
        FIND,
        MUTE,
        VOLUME_UP,
        VOLUME_DOWN,
        KEYPAD_COMMA,
        KEYPAD_EQUALS_AS_400,
        ALT_ERASE,
        SYSREQ,
        CANCEL,
        CLEAR,
        PRIOR,
        SECOND_RETURN,
        SEPARATOR,
        OUT,
        OPER,
        CLEAR_AGAIN,
        CRSEL,
        EXSEL,
        KEYPAD_00,
        KEYPAD_000,
        THOUSANDSEPARATOR,
        DECIMALSEPARATOR,
        CURRENCY_UNIT,
        CURRENCY_SUBUNIT,
        KEYPAD_LEFTPAREN,
        KEYPAD_RIGHTPAREN,
        KEYPAD_LEFTBRACE,
        KEYPAD_RIGHTBRACE,
        KEYPAD_TAB,
        KEYPAD_BACKSPACE,
        KEYPAD_A,
        KEYPAD_B,
        KEYPAD_C,
        KEYPAD_D,
        KEYPAD_E,
        KEYPAD_F,
        KEYPAD_XOR,
        KEYPAD_POWER,
        KEYPAD_PERCENT,
        KEYPAD_LESS,
        KEYPAD_GREATER,
        KEYPAD_AMPERSAND,
        KEYPAD_DOUBLE_AMPERSAND,
        KEYPAD_VERTICAL_BAR,
        KEYPAD_DOUBLE_VERTICLE_BAR,
        KEYPAD_COLON,
        KEYPAD_HASH,
        KEYPAD_SPACE,
        KEYPAD_AT,
        KEYPAD_EXCLAM,
        KEYPAD_MEM_STORE,
        KEYPAD_MEM_RECALL,
        KEYPAD_MEM_CLEAR,
        KEYPAD_MEM_ADD,
        KEYPAD_MEM_SUBTRACT,
        KEYPAD_MEM_MULTIPLY,
        KEYPAD_MEM_DIVIDE,
        KEYPAD_PLUS_MINUS,
        KEYPAD_CLEAR,
        KEYPAD_CLEAR_ENTRY,
        KEYPAD_BINARY,
        KEYPAD_OCTAL,
        KEYPAD_DECIMAL,
        KEYPAD_HEXADECIMAL,
        CTRL_LEFT,
        SHIFT_LEFT,
        ALT_LEFT,
        GUI_LEFT,
        CTRL_RIGHT,
        SHIFT_RIGHT,
        ALT_RIGHT,
        GUI_RIGHT,
        MODE,
        AUDIO_NEXT,
        AUDIO_PREV,
        AUDIO_STOP,
        AUDIO_PLAY,
        AUDIO_MUTE,
        MEDIASELECT,
        WWW,
        MAIL,
        CALCULATOR,
        COMPUTER,
        AC_SEARCH,
        AC_HOME,
        AC_BACK,
        AC_FORWARD,
        AC_STOP,
        AC_REFRESH,
        AC_BOOKMARKS,
        BRIGHTNESS_DOWN,
        BRIGHTNESS_UP,
        DISPLAYSWITCH,
        KEYBOARD_ILLUM_TOGGLE,
        KEYBOARD_ILLUM_DOWN,
        KEYBOARD_ILLUM_UP,
        EJECT,
        SLEEP
    };

    /** Generate a string representation of the given key
        @param k the key
        @returns the string representation
    */
    std::string
    ToString(Key k);

    /** Generate a key from a string.
        @param keyname the name of the key
        @returns the key or None
    */
    Key
    ToKey(const std::string& keyname);

}  // namespace euphoria::core

#endif  // EUPHORIA_INPUT_KEY_H_

package gui;

enum InterpolationType {
    linear,
    
    // also called ease in
    // start slow, end quick
    smooth_start2, smooth_start3, smooth_start4,

    // also called ease out
    // start fast, end slow
    smooth_stop2, smooth_stop3, smooth_stop4,

    // also called ease in and out
    // start slow, end slow
    smooth_step2, smooth_step3, smooth_step4
}

struct Button {
  string skin = "default";
  string text;
  string command;
}

struct Lrtb
{
  float left;
  float right;
  float top;
  float bottom;
}

struct Panel;

struct Widget {
  // common data
  string name;

  int32 column;
  int32 row;
  float preferred_width;
  float preferred_height;
  Lrtb margin;
  Lrtb padding;


  // implementations, only one is valid
  Button? button;
  Panel? panel;
}

struct TableLayout {
  bool expanded_cols[];
  bool expanded_rows[];
  float padding;
}

struct SingleRowLayout {
  float padding;
}

struct Layout {
  // only one is valid
  TableLayout? table;
  SingleRowLayout? single_row;
}

struct LayoutContainer {
  Layout layout;
  Widget widgets[];
}

struct Panel {
  LayoutContainer container;
}

struct Rgb {
  float r = 1.0f;
  float g = 1.0f;
  float b = 1.0f;
}

struct ButtonState {
  // string image;
  float scale = 1.0f;
  Rgb image_color;
  Rgb text_color;
  float dx;
  float dy;

  InterpolationType interpolate_position = linear;
  float interpolate_position_time = 0.1f;

  InterpolationType interpolate_color = linear;
  float interpolate_color_time = 0.1f;

  InterpolationType interpolate_size = linear;
  float interpolate_size_time = 0.1f;
}

struct Skin {
  string name = "default";
  string font;
  float text_size = 12.0f;

  string button_image;
  ButtonState button_idle;
  ButtonState button_hot;
  ButtonState button_active_hot;
}

struct File {
  // common data
  string cursor_image;
  string hover_image;

  Skin skins[];
  LayoutContainer root;
}

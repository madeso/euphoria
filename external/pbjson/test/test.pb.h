// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class Header;
class Arg;
class Request;

// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:Header)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* passwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Arg : public ::google::protobuf::Message {
 public:
  Arg();
  virtual ~Arg();

  Arg(const Arg& from);

  inline Arg& operator=(const Arg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Arg& default_instance();

  void Swap(Arg* other);

  // implements Message ----------------------------------------------

  Arg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Arg& from);
  void MergeFrom(const Arg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f1 = 1;
  inline bool has_f1() const;
  inline void clear_f1();
  static const int kF1FieldNumber = 1;
  inline const ::std::string& f1() const;
  inline void set_f1(const ::std::string& value);
  inline void set_f1(const char* value);
  inline void set_f1(const char* value, size_t size);
  inline ::std::string* mutable_f1();
  inline ::std::string* release_f1();
  inline void set_allocated_f1(::std::string* f1);

  // optional string f2 = 2;
  inline bool has_f2() const;
  inline void clear_f2();
  static const int kF2FieldNumber = 2;
  inline const ::std::string& f2() const;
  inline void set_f2(const ::std::string& value);
  inline void set_f2(const char* value);
  inline void set_f2(const char* value, size_t size);
  inline ::std::string* mutable_f2();
  inline ::std::string* release_f2();
  inline void set_allocated_f2(::std::string* f2);

  // @@protoc_insertion_point(class_scope:Arg)
 private:
  inline void set_has_f1();
  inline void clear_has_f1();
  inline void set_has_f2();
  inline void clear_has_f2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* f1_;
  ::std::string* f2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Arg* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::Header& header() const;
  inline ::Header* mutable_header();
  inline ::Header* release_header();
  inline void set_allocated_header(::Header* header);

  // required int32 arg1 = 2;
  inline bool has_arg1() const;
  inline void clear_arg1();
  static const int kArg1FieldNumber = 2;
  inline ::google::protobuf::int32 arg1() const;
  inline void set_arg1(::google::protobuf::int32 value);

  // repeated int64 arg2 = 3;
  inline int arg2_size() const;
  inline void clear_arg2();
  static const int kArg2FieldNumber = 3;
  inline ::google::protobuf::int64 arg2(int index) const;
  inline void set_arg2(int index, ::google::protobuf::int64 value);
  inline void add_arg2(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      arg2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_arg2();

  // optional double arg3 = 4;
  inline bool has_arg3() const;
  inline void clear_arg3();
  static const int kArg3FieldNumber = 4;
  inline double arg3() const;
  inline void set_arg3(double value);

  // repeated .Arg args = 5;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 5;
  inline const ::Arg& args(int index) const;
  inline ::Arg* mutable_args(int index);
  inline ::Arg* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::Arg >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::Arg >*
      mutable_args();

  // @@protoc_insertion_point(class_scope:Request)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_arg1();
  inline void clear_has_arg1();
  inline void set_has_arg3();
  inline void clear_has_arg3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Header* header_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > arg2_;
  double arg3_;
  ::google::protobuf::RepeatedPtrField< ::Arg > args_;
  ::google::protobuf::int32 arg1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// ===================================================================


// ===================================================================

// Header

// required string user = 1;
inline bool Header::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& Header::user() const {
  return *user_;
}
inline void Header::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Header::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Header::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* Header::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Header::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passwd = 2;
inline bool Header::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& Header::passwd() const {
  return *passwd_;
}
inline void Header::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void Header::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void Header::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* Header::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Header::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Arg

// optional string f1 = 1;
inline bool Arg::has_f1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Arg::set_has_f1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Arg::clear_has_f1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Arg::clear_f1() {
  if (f1_ != &::google::protobuf::internal::kEmptyString) {
    f1_->clear();
  }
  clear_has_f1();
}
inline const ::std::string& Arg::f1() const {
  return *f1_;
}
inline void Arg::set_f1(const ::std::string& value) {
  set_has_f1();
  if (f1_ == &::google::protobuf::internal::kEmptyString) {
    f1_ = new ::std::string;
  }
  f1_->assign(value);
}
inline void Arg::set_f1(const char* value) {
  set_has_f1();
  if (f1_ == &::google::protobuf::internal::kEmptyString) {
    f1_ = new ::std::string;
  }
  f1_->assign(value);
}
inline void Arg::set_f1(const char* value, size_t size) {
  set_has_f1();
  if (f1_ == &::google::protobuf::internal::kEmptyString) {
    f1_ = new ::std::string;
  }
  f1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Arg::mutable_f1() {
  set_has_f1();
  if (f1_ == &::google::protobuf::internal::kEmptyString) {
    f1_ = new ::std::string;
  }
  return f1_;
}
inline ::std::string* Arg::release_f1() {
  clear_has_f1();
  if (f1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = f1_;
    f1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Arg::set_allocated_f1(::std::string* f1) {
  if (f1_ != &::google::protobuf::internal::kEmptyString) {
    delete f1_;
  }
  if (f1) {
    set_has_f1();
    f1_ = f1;
  } else {
    clear_has_f1();
    f1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string f2 = 2;
inline bool Arg::has_f2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Arg::set_has_f2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Arg::clear_has_f2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Arg::clear_f2() {
  if (f2_ != &::google::protobuf::internal::kEmptyString) {
    f2_->clear();
  }
  clear_has_f2();
}
inline const ::std::string& Arg::f2() const {
  return *f2_;
}
inline void Arg::set_f2(const ::std::string& value) {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  f2_->assign(value);
}
inline void Arg::set_f2(const char* value) {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  f2_->assign(value);
}
inline void Arg::set_f2(const char* value, size_t size) {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  f2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Arg::mutable_f2() {
  set_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    f2_ = new ::std::string;
  }
  return f2_;
}
inline ::std::string* Arg::release_f2() {
  clear_has_f2();
  if (f2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = f2_;
    f2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Arg::set_allocated_f2(::std::string* f2) {
  if (f2_ != &::google::protobuf::internal::kEmptyString) {
    delete f2_;
  }
  if (f2) {
    set_has_f2();
    f2_ = f2;
  } else {
    clear_has_f2();
    f2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Request

// required .Header header = 1;
inline bool Request::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_header() {
  if (header_ != NULL) header_->::Header::Clear();
  clear_has_header();
}
inline const ::Header& Request::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Header* Request::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::Header;
  return header_;
}
inline ::Header* Request::release_header() {
  clear_has_header();
  ::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Request::set_allocated_header(::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// required int32 arg1 = 2;
inline bool Request::has_arg1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_arg1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_arg1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_arg1() {
  arg1_ = 0;
  clear_has_arg1();
}
inline ::google::protobuf::int32 Request::arg1() const {
  return arg1_;
}
inline void Request::set_arg1(::google::protobuf::int32 value) {
  set_has_arg1();
  arg1_ = value;
}

// repeated int64 arg2 = 3;
inline int Request::arg2_size() const {
  return arg2_.size();
}
inline void Request::clear_arg2() {
  arg2_.Clear();
}
inline ::google::protobuf::int64 Request::arg2(int index) const {
  return arg2_.Get(index);
}
inline void Request::set_arg2(int index, ::google::protobuf::int64 value) {
  arg2_.Set(index, value);
}
inline void Request::add_arg2(::google::protobuf::int64 value) {
  arg2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Request::arg2() const {
  return arg2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Request::mutable_arg2() {
  return &arg2_;
}

// optional double arg3 = 4;
inline bool Request::has_arg3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_arg3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_arg3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_arg3() {
  arg3_ = 0;
  clear_has_arg3();
}
inline double Request::arg3() const {
  return arg3_;
}
inline void Request::set_arg3(double value) {
  set_has_arg3();
  arg3_ = value;
}

// repeated .Arg args = 5;
inline int Request::args_size() const {
  return args_.size();
}
inline void Request::clear_args() {
  args_.Clear();
}
inline const ::Arg& Request::args(int index) const {
  return args_.Get(index);
}
inline ::Arg* Request::mutable_args(int index) {
  return args_.Mutable(index);
}
inline ::Arg* Request::add_args() {
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Arg >&
Request::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::Arg >*
Request::mutable_args() {
  return &args_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structeu_1_1Plane" kind="struct" language="C++" prot="public">
    <compoundname>eu::Plane</compoundname>
    <includes refid="plane_8h" local="no">plane.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structeu_1_1Plane_1a96b4eb28d0a93fd43c8c407da2f15a1a" prot="public" static="no" mutable="no">
        <type><ref refid="structeu_1_1unit3f" kindref="compound">unit3f</ref></type>
        <definition>unit3f eu::Plane::normal</definition>
        <argsstring></argsstring>
        <name>normal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/plane.h" line="9" column="16" bodyfile="libs/base/src/base/plane.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeu_1_1Plane_1a04bb53a664a0219c739a2817fac9d633" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float eu::Plane::distance</definition>
        <argsstring></argsstring>
        <name>distance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/plane.h" line="10" column="15" bodyfile="libs/base/src/base/plane.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeu_1_1Plane_1ab6d3927c097abecc71abcd5e8c00dd0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eu::Plane::Plane</definition>
        <argsstring>(const unit3f &amp;n, float d)</argsstring>
        <name>Plane</name>
        <param>
          <type>const <ref refid="structeu_1_1unit3f" kindref="compound">unit3f</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/plane.h" line="12" column="9" bodyfile="libs/base/src/base/plane.cc" bodystart="5" bodyend="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeu_1_1Plane_1abf06fbc339f1009e3823f17974b7cc8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Plane" kindref="compound">Plane</ref></type>
        <definition>Plane eu::Plane::from_normal_and_point</definition>
        <argsstring>(const unit3f &amp;normal, const vec3f &amp;point)</argsstring>
        <name>from_normal_and_point</name>
        <param>
          <type>const <ref refid="structeu_1_1unit3f" kindref="compound">unit3f</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/plane.h" line="15" column="9" bodyfile="libs/base/src/base/plane.cc" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="structeu_1_1Plane_1a4ca4d0043feff498fcc01640652d8864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Plane" kindref="compound">Plane</ref></type>
        <definition>Plane eu::Plane::from_points</definition>
        <argsstring>(const vec3f &amp;p0, const vec3f &amp;p1, const vec3f &amp;p2)</argsstring>
        <name>from_points</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/plane.h" line="18" column="9" bodyfile="libs/base/src/base/plane.cc" bodystart="19" bodyend="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>eu::unit3f</label>
        <link refid="structeu_1_1unit3f"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>eu::Plane</label>
        <link refid="structeu_1_1Plane"/>
        <childnode refid="2" relation="usage">
          <edgelabel>normal</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>eu::vec3f</label>
        <link refid="structeu_1_1vec3f"/>
      </node>
    </collaborationgraph>
    <location file="libs/base/src/base/plane.h" line="7" column="5" bodyfile="libs/base/src/base/plane.h" bodystart="8" bodyend="19"/>
    <listofallmembers>
      <member refid="structeu_1_1Plane_1a04bb53a664a0219c739a2817fac9d633" prot="public" virt="non-virtual"><scope>eu::Plane</scope><name>distance</name></member>
      <member refid="structeu_1_1Plane_1abf06fbc339f1009e3823f17974b7cc8d" prot="public" virt="non-virtual"><scope>eu::Plane</scope><name>from_normal_and_point</name></member>
      <member refid="structeu_1_1Plane_1a4ca4d0043feff498fcc01640652d8864" prot="public" virt="non-virtual"><scope>eu::Plane</scope><name>from_points</name></member>
      <member refid="structeu_1_1Plane_1a96b4eb28d0a93fd43c8c407da2f15a1a" prot="public" virt="non-virtual"><scope>eu::Plane</scope><name>normal</name></member>
      <member refid="structeu_1_1Plane_1ab6d3927c097abecc71abcd5e8c00dd0c" prot="public" virt="non-virtual"><scope>eu::Plane</scope><name>Plane</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

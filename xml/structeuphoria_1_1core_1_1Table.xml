<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structeuphoria_1_1core_1_1Table" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::Table</compoundname>
    <includes refid="table_8h" local="no">table.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" prot="public" static="no">
        <type>int</type>
        <definition>using euphoria::core::Table&lt; T &gt;::Idx =  int</definition>
        <argsstring></argsstring>
        <name>Idx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="19" column="9" bodyfile="libs/core/src/core/table.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Table_1a9d7f6d12ab62a7ff6b5b713acc1885b5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::Table&lt; T &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="188" column="21" bodyfile="libs/core/src/core/table.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Table_1af7202669218cdef27a06b27fb936a322" prot="private" static="no" mutable="no">
        <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
        <definition>Idx euphoria::core::Table&lt; T &gt;::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="189" column="13" bodyfile="libs/core/src/core/table.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Table_1aa5d77015ea391a64e4c81d52826e7b6d" prot="private" static="no" mutable="no">
        <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
        <definition>Idx euphoria::core::Table&lt; T &gt;::height</definition>
        <argsstring></argsstring>
        <name>height</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="190" column="13" bodyfile="libs/core/src/core/table.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a0ee0f2f2eb272d563f862407a6cea254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::Table&lt; T &gt;::Table</definition>
        <argsstring>()=default</argsstring>
        <name>Table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="21" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1ad0d8ca188b7bffe2dfd3c6e81d0c5ae0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Table&lt; T &gt;::new_row</definition>
        <argsstring>(T d=T())</argsstring>
        <name>new_row</name>
        <param>
          <type>T</type>
          <declname>d</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="33" column="14" bodyfile="libs/core/src/core/table.h" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a9eb3c65ca537a7a267844a012476eab2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Table&lt; T &gt;::clear</definition>
        <argsstring>(T d=T())</argsstring>
        <name>clear</name>
        <param>
          <type>T</type>
          <declname>d</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="40" column="14" bodyfile="libs/core/src/core/table.h" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1ae4e464f083a15e9bfec62b581be61335" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TFunc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void euphoria::core::Table&lt; T &gt;::set_all</definition>
        <argsstring>(TFunc f)</argsstring>
        <name>set_all</name>
        <param>
          <type>TFunc</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="49" column="14" bodyfile="libs/core/src/core/table.h" bodystart="49" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a75bac7baf4bc3204b7bb7b891fda5909" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Table&lt; T &gt;::new_row</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;row, T d=T())</argsstring>
        <name>new_row</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>T</type>
          <declname>d</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Add a new row to the table. </para>
        </briefdescription>
        <detaileddescription>
<para>Places the new row at the bottom left and resizes the table if necessary. Fills the (new) empty space with default values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the new row </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value (if needed) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="66" column="14" bodyfile="libs/core/src/core/table.h" bodystart="66" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a5bcee0aa3cb8eea63f585f31c48ad2df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Table&lt; T &gt;::expand_width</definition>
        <argsstring>(Idx new_width, T d=T())</argsstring>
        <name>expand_width</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>new_width</declname>
        </param>
        <param>
          <type>T</type>
          <declname>d</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Expand the table to the new width. </para>
        </briefdescription>
        <detaileddescription>
<para>Aligns existing content to the left, fills the empty space with default values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_width</parametername>
</parameternamelist>
<parameterdescription>
<para>the new width </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="113" column="14" bodyfile="libs/core/src/core/table.h" bodystart="113" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1af9af076dd551dcd88b75831180d7fa33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::Table&lt; T &gt;::is_inside</definition>
        <argsstring>(Idx x, Idx y) const</argsstring>
        <name>is_inside</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="131" column="15" bodyfile="libs/core/src/core/table.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1aff13b2fb39de53fedd99d7d8ecd9f56e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t euphoria::core::Table&lt; T &gt;::data_index</definition>
        <argsstring>(Idx x, Idx y) const</argsstring>
        <name>data_index</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="136" column="17" bodyfile="libs/core/src/core/table.h" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a6cb8c8f1dc3e864c14f24d886a3406f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Recti" kindref="compound">Recti</ref></type>
        <definition>Recti euphoria::core::Table&lt; T &gt;::get_indices</definition>
        <argsstring>() const</argsstring>
        <name>get_indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="148" column="16" bodyfile="libs/core/src/core/table.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a689c452066d5094b7d403fadd66c3f37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
        <definition>Idx euphoria::core::Table&lt; T &gt;::get_width</definition>
        <argsstring>() const</argsstring>
        <name>get_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="153" column="14" bodyfile="libs/core/src/core/table.h" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1ac6be94e7d0a32d6a7eb9928f14813195" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
        <definition>Idx euphoria::core::Table&lt; T &gt;::get_height</definition>
        <argsstring>() const</argsstring>
        <name>get_height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="158" column="14" bodyfile="libs/core/src/core/table.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a397f5f6884c4d3c9df52b391e5894bba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T euphoria::core::Table&lt; T &gt;::operator()</definition>
        <argsstring>(Idx x, Idx y) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="165" column="11" bodyfile="libs/core/src/core/table.h" bodystart="165" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1ad9a91a438fa18d7e127a53405e87760d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::reference</type>
        <definition>std::vector&lt;T&gt;::reference euphoria::core::Table&lt; T &gt;::operator()</definition>
        <argsstring>(Idx x, Idx y)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="172" column="42" bodyfile="libs/core/src/core/table.h" bodystart="172" bodyend="177"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a46cd939f6d02e7308d02fef52476b6c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref></type>
        <definition>static Table euphoria::core::Table&lt; T &gt;::from_width_height</definition>
        <argsstring>(Idx width, Idx height, T d=T())</argsstring>
        <name>from_width_height</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type>T</type>
          <declname>d</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="23" column="23" bodyfile="libs/core/src/core/table.h" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a1b2a0621147844fc6e41961f6c8a6b5f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref></type>
        <definition>static Table euphoria::core::Table&lt; T &gt;::from_height_width</definition>
        <argsstring>(Idx height, Idx width, T d=T())</argsstring>
        <name>from_height_width</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type>T</type>
          <declname>d</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="28" column="23" bodyfile="libs/core/src/core/table.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1a43f2001ad8ee9146504de2a84be80a36" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
        <definition>static constexpr Idx euphoria::core::Table&lt; T &gt;::conv</definition>
        <argsstring>(size_t t)</argsstring>
        <name>conv</name>
        <param>
          <type>size_t</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="181" column="9" bodyfile="libs/core/src/core/table.h" bodystart="181" bodyend="184"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Table_1abd64ff82355254fd657c1ca2f582a6cc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::Table&lt; T &gt;::Table</definition>
        <argsstring>(Idx c, Idx r, T d=T())</argsstring>
        <name>Table</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" kindref="member">Idx</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>T</type>
          <declname>d</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="193" column="9" bodyfile="libs/core/src/core/table.h" bodystart="193" bodyend="196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/table.h" line="18" column="1" bodyfile="libs/core/src/core/table.h" bodystart="17" bodyend="197"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1Table_1a9eb3c65ca537a7a267844a012476eab2" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>clear</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a43f2001ad8ee9146504de2a84be80a36" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>conv</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a9d7f6d12ab62a7ff6b5b713acc1885b5" prot="private" virt="non-virtual"><scope>euphoria::core::Table</scope><name>data</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1aff13b2fb39de53fedd99d7d8ecd9f56e" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>data_index</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a5bcee0aa3cb8eea63f585f31c48ad2df" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>expand_width</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a1b2a0621147844fc6e41961f6c8a6b5f" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>from_height_width</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a46cd939f6d02e7308d02fef52476b6c2" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>from_width_height</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1ac6be94e7d0a32d6a7eb9928f14813195" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>get_height</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a6cb8c8f1dc3e864c14f24d886a3406f1" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>get_indices</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a689c452066d5094b7d403fadd66c3f37" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>get_width</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1aa5d77015ea391a64e4c81d52826e7b6d" prot="private" virt="non-virtual"><scope>euphoria::core::Table</scope><name>height</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a8158f774e849914c5aecd89ab5c7a1f4" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>Idx</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1af9af076dd551dcd88b75831180d7fa33" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>is_inside</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1ad0d8ca188b7bffe2dfd3c6e81d0c5ae0" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>new_row</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a75bac7baf4bc3204b7bb7b891fda5909" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>new_row</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a397f5f6884c4d3c9df52b391e5894bba" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>operator()</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1ad9a91a438fa18d7e127a53405e87760d" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>operator()</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1ae4e464f083a15e9bfec62b581be61335" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>set_all</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1a0ee0f2f2eb272d563f862407a6cea254" prot="public" virt="non-virtual"><scope>euphoria::core::Table</scope><name>Table</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1abd64ff82355254fd657c1ca2f582a6cc" prot="private" virt="non-virtual"><scope>euphoria::core::Table</scope><name>Table</name></member>
      <member refid="structeuphoria_1_1core_1_1Table_1af7202669218cdef27a06b27fb936a322" prot="private" virt="non-virtual"><scope>euphoria::core::Table</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

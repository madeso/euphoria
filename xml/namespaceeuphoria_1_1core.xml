<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceeuphoria_1_1core" kind="namespace" language="C++">
    <compoundname>euphoria::core</compoundname>
    <innerclass refid="structeuphoria_1_1core_1_1Aabb" prot="public">euphoria::core::Aabb</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Angle" prot="public">euphoria::core::Angle</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1AngleTransform" prot="public">euphoria::core::AngleTransform</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1AxisAngle" prot="public">euphoria::core::AxisAngle</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1BezierSegment2" prot="public">euphoria::core::BezierSegment2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Bitfield" prot="public">euphoria::core::Bitfield</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1BorderSettings" prot="public">euphoria::core::BorderSettings</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1BucketBase10" prot="public">euphoria::core::BucketBase10</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1BucketBase16" prot="public">euphoria::core::BucketBase16</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1BufferBuilder2" prot="public">euphoria::core::BufferBuilder2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1BufferPoint2" prot="public">euphoria::core::BufferPoint2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Cache" prot="public">euphoria::core::Cache</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Camera3" prot="public">euphoria::core::Camera3</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Canvas" prot="public">euphoria::core::Canvas</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CanvasLogic" prot="public">euphoria::core::CanvasLogic</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Chatbot" prot="public">euphoria::core::Chatbot</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CliProgressDots" prot="public">euphoria::core::CliProgressDots</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1ClosestPointCollector" prot="public">euphoria::core::ClosestPointCollector</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CollisionMesh" prot="public">euphoria::core::CollisionMesh</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CompiledCamera3" prot="public">euphoria::core::CompiledCamera3</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CompiledTextTemplate" prot="public">euphoria::core::CompiledTextTemplate</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CsvParserOptions" prot="public">euphoria::core::CsvParserOptions</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CustomArgparser" prot="public">euphoria::core::CustomArgparser</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CustomArgparser_3_01Lrud_3_01T_01_4_01_4" prot="public">euphoria::core::CustomArgparser&lt; Lrud&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CustomArgparser_3_01Rgbi_01_4" prot="public">euphoria::core::CustomArgparser&lt; Rgbi &gt;</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1CustomArgparser_3_01Size2_3_01T_01_4_01_4" prot="public">euphoria::core::CustomArgparser&lt; Size2&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1DateTime" prot="public">euphoria::core::DateTime</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Decompressor" prot="public">euphoria::core::Decompressor</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Defines" prot="public">euphoria::core::Defines</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1DirectoryListing" prot="public">euphoria::core::DirectoryListing</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1DynamicPalette" prot="public">euphoria::core::DynamicPalette</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1EditorCamera3" prot="public">euphoria::core::EditorCamera3</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1EnumToStringImplementation" prot="public">euphoria::core::EnumToStringImplementation</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1EnumType" prot="public">euphoria::core::EnumType</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1EnumValue" prot="public">euphoria::core::EnumValue</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1FloatTransform" prot="public">euphoria::core::FloatTransform</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1FloatValue" prot="public">euphoria::core::FloatValue</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1FpsController" prot="public">euphoria::core::FpsController</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1HashedStringView" prot="public">euphoria::core::HashedStringView</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1HelpTextHover" prot="public">euphoria::core::HelpTextHover</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Hsl" prot="public">euphoria::core::Hsl</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Image" prot="public">euphoria::core::Image</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1ImageLoadResult" prot="public">euphoria::core::ImageLoadResult</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1ImageMapAction" prot="public">euphoria::core::ImageMapAction</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Interpolate" prot="public">euphoria::core::Interpolate</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1IntValue" prot="public">euphoria::core::IntValue</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1LastN" prot="public">euphoria::core::LastN</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1LinePoint" prot="public">euphoria::core::LinePoint</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Lines" prot="public">euphoria::core::Lines</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1LoadedFont" prot="public">euphoria::core::LoadedFont</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1LoadedGlyph" prot="public">euphoria::core::LoadedGlyph</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1LoadedMeshOrError" prot="public">euphoria::core::LoadedMeshOrError</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Lrud" prot="public">euphoria::core::Lrud</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1MapValue" prot="public">euphoria::core::MapValue</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Mat2" prot="public">euphoria::core::Mat2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Mat3" prot="public">euphoria::core::Mat3</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Mat4" prot="public">euphoria::core::Mat4</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1MatchedEnum" prot="public">euphoria::core::MatchedEnum</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Material" prot="public">euphoria::core::Material</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1MaterialTexture" prot="public">euphoria::core::MaterialTexture</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1MemoryChunk" prot="public">euphoria::core::MemoryChunk</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1MemoryChunkFile" prot="public">euphoria::core::MemoryChunkFile</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Mesh" prot="public">euphoria::core::Mesh</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1MeshFace" prot="public">euphoria::core::MeshFace</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1MeshPart" prot="public">euphoria::core::MeshPart</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1MeshPoint" prot="public">euphoria::core::MeshPoint</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1NormalizedAndLength" prot="public">euphoria::core::NormalizedAndLength</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1OrbitController" prot="public">euphoria::core::OrbitController</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Palette" prot="public">euphoria::core::Palette</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Plane" prot="public">euphoria::core::Plane</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1PoissonWorker" prot="public">euphoria::core::PoissonWorker</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1PolarCoordinate" prot="public">euphoria::core::PolarCoordinate</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1PolyBezier2" prot="public">euphoria::core::PolyBezier2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Polyline2" prot="public">euphoria::core::Polyline2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Quat" prot="public">euphoria::core::Quat</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Random" prot="public">euphoria::core::Random</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1RandomLcg" prot="public">euphoria::core::RandomLcg</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1RandomXorShift" prot="public">euphoria::core::RandomXorShift</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Range" prot="public">euphoria::core::Range</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Ray2f" prot="public">euphoria::core::Ray2f</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Ray2Ray2Result" prot="public">euphoria::core::Ray2Ray2Result</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Ray3AabbResult" prot="public">euphoria::core::Ray3AabbResult</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Ray3f" prot="public">euphoria::core::Ray3f</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1ReadErrorFileError" prot="public">euphoria::core::ReadErrorFileError</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1ReadErrorFileMissing" prot="public">euphoria::core::ReadErrorFileMissing</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Rect" prot="public">euphoria::core::Rect</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Result" prot="public">euphoria::core::Result</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Rgb" prot="public">euphoria::core::Rgb</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Rgba" prot="public">euphoria::core::Rgba</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Rgbai" prot="public">euphoria::core::Rgbai</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Rgbi" prot="public">euphoria::core::Rgbi</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1RgbTransform" prot="public">euphoria::core::RgbTransform</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Scale2" prot="public">euphoria::core::Scale2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Scale3" prot="public">euphoria::core::Scale3</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Sensitivity" prot="public">euphoria::core::Sensitivity</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Shufflebag" prot="public">euphoria::core::Shufflebag</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Size2" prot="public">euphoria::core::Size2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Sortable" prot="public">euphoria::core::Sortable</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1SortAction" prot="public">euphoria::core::SortAction</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1SortBuilder" prot="public">euphoria::core::SortBuilder</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Sphere" prot="public">euphoria::core::Sphere</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1SphereAndPosition" prot="public">euphoria::core::SphereAndPosition</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1StaticPalette" prot="public">euphoria::core::StaticPalette</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1StepIterator" prot="public">euphoria::core::StepIterator</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1StepIteratorCreator" prot="public">euphoria::core::StepIteratorCreator</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1StringBuilder" prot="public">euphoria::core::StringBuilder</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1StringBuilder2" prot="public">euphoria::core::StringBuilder2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1StringMerger" prot="public">euphoria::core::StringMerger</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1StructTmWrapper" prot="public">euphoria::core::StructTmWrapper</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1SubVec" prot="public">euphoria::core::SubVec</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Table" prot="public">euphoria::core::Table</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1TableGenerator" prot="public">euphoria::core::TableGenerator</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1TemplateErrorList" prot="public">euphoria::core::TemplateErrorList</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1TextBox" prot="public">euphoria::core::TextBox</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1TextBoxStyle" prot="public">euphoria::core::TextBoxStyle</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1TextfileParser" prot="public">euphoria::core::TextfileParser</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1TimetWrapper" prot="public">euphoria::core::TimetWrapper</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1TreeStyle" prot="public">euphoria::core::TreeStyle</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1UiText" prot="public">euphoria::core::UiText</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Unit2" prot="public">euphoria::core::Unit2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Unit3" prot="public">euphoria::core::Unit3</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1UnitRay3f" prot="public">euphoria::core::UnitRay3f</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Value" prot="public">euphoria::core::Value</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Vec2" prot="public">euphoria::core::Vec2</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Vec2Transform" prot="public">euphoria::core::Vec2Transform</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Vec3" prot="public">euphoria::core::Vec3</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Vec3fValue" prot="public">euphoria::core::Vec3fValue</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Vec4" prot="public">euphoria::core::Vec4</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1Viewport" prot="public">euphoria::core::Viewport</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1ViewportDefinition" prot="public">euphoria::core::ViewportDefinition</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1VirtualConsole" prot="public">euphoria::core::VirtualConsole</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1WallCounter" prot="public">euphoria::core::WallCounter</innerclass>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1argparse">euphoria::core::argparse</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1base64">euphoria::core::base64</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1colorbrewer">euphoria::core::colorbrewer</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1colorutil">euphoria::core::colorutil</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1detail">euphoria::core::detail</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1dot">euphoria::core::dot</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1dump2d">euphoria::core::dump2d</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1dump3d">euphoria::core::dump3d</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1easing">euphoria::core::easing</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1ecs">euphoria::core::ecs</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1generator">euphoria::core::generator</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1io">euphoria::core::io</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1markov">euphoria::core::markov</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1meshes">euphoria::core::meshes</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1palettes">euphoria::core::palettes</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1raytracer">euphoria::core::raytracer</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1search">euphoria::core::search</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1string__mergers">euphoria::core::string_mergers</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1textparser">euphoria::core::textparser</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1tracery">euphoria::core::tracery</innernamespace>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1vfs">euphoria::core::vfs</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a1ec03d988d6a9065ce681392a857aa94" prot="public" static="no" strong="yes">
        <type></type>
        <name>EditorCameraStyle3</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a1ec03d988d6a9065ce681392a857aa94aaaa13d20a3eef0dc1975270df400bcd8" prot="public">
          <name>orbital</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a1ec03d988d6a9065ce681392a857aa94a05934928102b17827b8f03ed60c3e6e0" prot="public">
          <name>fps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/camera3.editor.h" line="65" column="1" bodyfile="libs/core/src/core/camera3.editor.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74e" prot="public" static="no" strong="yes">
        <type></type>
        <name>NamedColor</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ead508fe45cecaf653904a0e774084bb5c" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea770e427f6a16eb64e2ece9585ba9d193" prot="public">
          <name>light_gray</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74eacda7a650c5856cf2f6738072447d7825" prot="public">
          <name>gray</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea49dba686026a18435dd23b5e83eb5cfd" prot="public">
          <name>dark_gray</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea1ffd9e753c8054cc61456ac7fac1ac89" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74eabda9643ac6601722a28f238714274da4" prot="public">
          <name>red</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea5fc7f488aaf8c4cef723d8307dab63c1" prot="public">
          <name>pure_red</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea48d6215903dff56238e52e8891380c8f" prot="public">
          <name>blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea75876b1759fd5c3d70b379e382a21201" prot="public">
          <name>pure_blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea61a2783898a9df78bb27edc33f768e6e" prot="public">
          <name>light_blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea852926ebcf39a1bde6fe55ea859c9fd8" prot="public">
          <name>normal_blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74eabc432826c5179d5332c28e32f2ff58a0" prot="public">
          <name>cornflower_blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea9f27410725ab8cc8854a2769c7a516b8" prot="public">
          <name>green</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea433237595a9697d0a94f13e50c46ce6a" prot="public">
          <name>pure_green</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74eac10bddadd1786a8a12f96ae7db5bafb8" prot="public">
          <name>light_green</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ead487dd0b55dfcacdd920ccbdaeafa351" prot="public">
          <name>yellow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea89cfe30ed9b2b04acad740f2e7a204ae" prot="public">
          <name>pure_yellow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74eafe01d67a002dfa0f3ac084298142eccd" prot="public">
          <name>orange</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea490ebe2773b07005137e4d6a1d988ebf" prot="public">
          <name>pure_orange</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea6ff47afa5dc7daa42cc705a03fca8a9b" prot="public">
          <name>brown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74eac88392c295fdf3d0c14b78f2d7de42f3" prot="public">
          <name>pure_brown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74eabb7aedfa61007447dd6efaf9f37641e3" prot="public">
          <name>purple</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea20743bde01784dc88194746154b5a2c0" prot="public">
          <name>pure_purple</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea4a0b0dcedd48f780778d1cd1bb8f9877" prot="public">
          <name>pink</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea67ff8501543ab43e2471efaacf5cebbb" prot="public">
          <name>pure_pink</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea74d216a5e8b72d8926453fcd1505ecc3" prot="public">
          <name>pure_beige</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea5b2d4484498235e80d61a233a7c04991" prot="public">
          <name>tan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74eafddb285d45dfa29d3163a3e7c2cc66d0" prot="public">
          <name>pure_tan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea6411532ba4971f378391776a9db629d3" prot="public">
          <name>cyan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea88e7d4d79a6178f203b2fc9556e5f1c0" prot="public">
          <name>pure_cyan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/colors.h" line="12" column="1" bodyfile="libs/core/src/core/colors.h" bodystart="11" bodyend="156"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a5aacc8412ac75c0c9bb8f5032852adad" prot="public" static="no" strong="yes">
        <type></type>
        <name>BangWongPalette</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a5aacc8412ac75c0c9bb8f5032852adada1ffd9e753c8054cc61456ac7fac1ac89" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a5aacc8412ac75c0c9bb8f5032852adadaa522e513b3069ef2fef4205d1aa89db1" prot="public">
          <name>organge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a5aacc8412ac75c0c9bb8f5032852adadaac3f9198492afd06eb5095cada0f3504" prot="public">
          <name>blue_sky</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a5aacc8412ac75c0c9bb8f5032852adada396d1a02f78aeeef2b1488b9675f6486" prot="public">
          <name>green_bluish</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a5aacc8412ac75c0c9bb8f5032852adadad487dd0b55dfcacdd920ccbdaeafa351" prot="public">
          <name>yellow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a5aacc8412ac75c0c9bb8f5032852adada48d6215903dff56238e52e8891380c8f" prot="public">
          <name>blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a5aacc8412ac75c0c9bb8f5032852adada27d5aea5874274c92fb55326db30f5a1" prot="public">
          <name>red_vermillion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a5aacc8412ac75c0c9bb8f5032852adadab4285db5f1f456f1237d877baab59b4e" prot="public">
          <name>purple_redish</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/colors.h" line="163" column="1" bodyfile="libs/core/src/core/colors.h" bodystart="162" bodyend="187"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a115463d1e927ca892cec2491d19a056b" prot="public" static="no" strong="yes">
        <type></type>
        <name>ActionWhenMissingInAlphabet</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a115463d1e927ca892cec2491d19a056ba567bc1d268f135496de3d5b946b691f3" prot="public">
          <name>ignore</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a115463d1e927ca892cec2491d19a056bae2d68d874a73c72e056c6e92c005e699" prot="public">
          <name>pass_through</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a115463d1e927ca892cec2491d19a056ba9dde360102c103867bd2f45872f1129c" prot="public">
          <name>replace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cypher.h" line="11" column="1" bodyfile="libs/core/src/core/cypher.h" bodystart="10" bodyend="13"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52a" prot="public" static="no" strong="yes">
        <type></type>
        <name>Month</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa467b6140fe3bb958f2332983914de787" prot="public">
          <name>january</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa8eb8e307a6d649bc7fb51443a06a216f" prot="public">
          <name>february</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa4061838f4395ef541fb1b3f07e42bc21" prot="public">
          <name>march</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa37d153a06c79e99e4de5889dbe2e7c57" prot="public">
          <name>april</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa9a4b6f884971dcb4a5172876b335baab" prot="public">
          <name>may</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa11501255f17710952e79563ddc090a4d" prot="public">
          <name>june</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa3785a4f12840727f9fc71676c104ac0d" prot="public">
          <name>july</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa61a590f1b9b5548efbae70fd7bcf45b3" prot="public">
          <name>august</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa110cea74cf52e41ead691dccdf75f27b" prot="public">
          <name>september</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aae60a95f3f443e37f5a47210d9b340a05" prot="public">
          <name>october</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aa4d04cedd6d05b1f16a4404ff5a1fa4af" prot="public">
          <name>november</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6e9d54d933dc9e9c9314cd763a39d52aaf962bed5616612c8c7053f6e97e72b12" prot="public">
          <name>december</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/datetime.h" line="15" column="21" bodyfile="libs/core/src/core/datetime.h" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a694ea38f253fd5079cc1d7eb1acd757c" prot="public" static="no" strong="yes">
        <type></type>
        <name>DstInfo</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a694ea38f253fd5079cc1d7eb1acd757ca0834a7672dc7d3d4f1a7c4161c9677cb" prot="public">
          <name>in_effect</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a694ea38f253fd5079cc1d7eb1acd757ca905ad61153a860f705af0571ecbd0f6e" prot="public">
          <name>not_in_effect</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a694ea38f253fd5079cc1d7eb1acd757cae2346f0060cb5e623843b48b5fdba809" prot="public">
          <name>info_unavailable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/datetime.h" line="36" column="23" bodyfile="libs/core/src/core/datetime.h" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1ab6be8a33011c429e839dd2853f7e4632" prot="public" static="no" strong="yes">
        <type></type>
        <name>TimeZone</name>
        <enumvalue id="namespaceeuphoria_1_1core_1ab6be8a33011c429e839dd2853f7e4632a3cb8eb17ba602a2951b9d2c11f1de623" prot="public">
          <name>gmt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1ab6be8a33011c429e839dd2853f7e4632af5ddaf0ca7929578b408c909429f68f2" prot="public">
          <name>local</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/datetime.h" line="77" column="1" bodyfile="libs/core/src/core/datetime.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a68fff98aaeca3d2cba3daf865a80eaa1" prot="public" static="no" strong="yes">
        <type></type>
        <name>ImageWriteFormat</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a68fff98aaeca3d2cba3daf865a80eaa1abff139fa05ac583f685a523ab3d110a0" prot="public">
          <name>png</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a68fff98aaeca3d2cba3daf865a80eaa1a96a75bdbf222c58cabde08ebe2172c9f" prot="public">
          <name>bmp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a68fff98aaeca3d2cba3daf865a80eaa1a574b636175ba01ef0128f22e360c197b" prot="public">
          <name>tga</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a68fff98aaeca3d2cba3daf865a80eaa1aab4f3ccba74857c5f2ba0d5b7dbf65e1" prot="public">
          <name>jpeg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image.h" line="20" column="1" bodyfile="libs/core/src/core/image.h" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1ac4d25e41b15b75088eed48e49138eea8" prot="public" static="no" strong="yes">
        <type></type>
        <name>AlphaLoad</name>
        <enumvalue id="namespaceeuphoria_1_1core_1ac4d25e41b15b75088eed48e49138eea8a0f6969d7052da9261e31ddb6e88c136e" prot="public">
          <name>remove</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1ac4d25e41b15b75088eed48e49138eea8a18ccf61d533b600bbf5a963359223fe4" prot="public">
          <name>keep</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image.h" line="159" column="1" bodyfile="libs/core/src/core/image.h" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a6cca1860905cb2f50dfec8f077ad6af2" prot="public" static="no" strong="yes">
        <type></type>
        <name>PixelsOutside</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a6cca1860905cb2f50dfec8f077ad6af2ae44e4612f62d2fb8f8738bab118a9850" prot="public">
          <name>assert</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a6cca1860905cb2f50dfec8f077ad6af2a70f68bb2f748b85de6526bfe236ea1e9" prot="public">
          <name>discard</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="82" column="1" bodyfile="libs/core/src/core/image_draw.h" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124" prot="public" static="no" strong="yes">
        <type></type>
        <name>Grayscale</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124a4b43b0aee35624cd95b910189b3dc231" prot="public">
          <name>r</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124ab2f5ff47436671b6e533d8dc3614845d" prot="public">
          <name>g</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124a92eb5ffee6ae2fec3ad71c777531578f" prot="public">
          <name>b</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124a0cc175b9c0f1b6a831c399e269772661" prot="public">
          <name>a</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124a2ffe4e77325d9a7152f7086ea7aa5114" prot="public">
          <name>max</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124a05b048d7242cb7b8b57cfa3b1d65ecea" prot="public">
          <name>gamma</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124a9a932b3cb396238423eb2f33ec17d6aa" prot="public">
          <name>linear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124a6927a3a7218a3195858411433ec20a21" prot="public">
          <name>average</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/imagefilters.h" line="14" column="1" bodyfile="libs/core/src/core/imagefilters.h" bodystart="13" bodyend="23"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeac" prot="public" static="no" strong="yes">
        <type></type>
        <name>MouseButton</name>
        <enumvalue id="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeacafedb2d84cafe20862cb4399751a8a7e3" prot="public">
          <name>invalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeaca88f443429ac4dfe75fdb4f18f2c6df99" prot="public">
          <name>unbound</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeaca811882fecd5c7618d7099ebbd39ea254" prot="public">
          <name>left</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeaca4a548addbfb239bbd12f5afe11a4b6dc" prot="public">
          <name>middle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeaca7c4f29407893c334a6cb7a87bf045c0d" prot="public">
          <name>right</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeaca6dbf9ac2da09ee1d3debf5a51873ec6d" prot="public">
          <name>x1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeaca8e683187a00e5d462a4aeee69e9d3d9c" prot="public">
          <name>x2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/key.h" line="8" column="1" bodyfile="libs/core/src/core/key.h" bodystart="7" bodyend="16"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710" prot="public" static="no" strong="yes">
        <type></type>
        <name>Key</name>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710afedb2d84cafe20862cb4399751a8a7e3" prot="public">
          <name>invalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a88f443429ac4dfe75fdb4f18f2c6df99" prot="public">
          <name>unbound</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af5b438232daa2a9532d759b14a36bf57" prot="public">
          <name>return_key</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae0ebc3c409070d07f1df0f2f4132509e" prot="public">
          <name>escape</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a5528770f4bce9c9b0ce9bbb8645aef45" prot="public">
          <name>backspace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae7f8cbd87d347be881cba92dad128518" prot="public">
          <name>tab</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aff2364a0be3d20e46cc69efb36afe9a5" prot="public">
          <name>space</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a3d5768a8c30c03b85cc24492e274bd45" prot="public">
          <name>exclaim</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a62afb0cdc261e382397dfb986f5c42c9" prot="public">
          <name>quotedbl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a0800fc577294c34e0b28ad2839435945" prot="public">
          <name>hash</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a354f047ba64552895b016bbdd60ab174" prot="public">
          <name>percent</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a33c381af2d1e41fe40556f1663244b34" prot="public">
          <name>dollar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa096fd08af89f16e286f268063c06af6" prot="public">
          <name>ampersand</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7a674c327bfa07f7c1204fb38ca6ef3b" prot="public">
          <name>quote</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a991d99fe8556bbb155078fa40c02d9c0" prot="public">
          <name>left_paren</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ab478b8a3957bdf430d16502db501587d" prot="public">
          <name>right_paren</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a79cfab624c6f02057146c1cdadff2edf" prot="public">
          <name>asterix</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ad7d18cfb3a0d8293e2f5d94ea30e04d2" prot="public">
          <name>plus</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ab6d00dc1ba038e5901cd6c06b2daa192" prot="public">
          <name>comma</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710adabe6e597b70e5760826aea1dcc564f7" prot="public">
          <name>minus</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa0acfa46d86f7610b2c73dbb28f64701" prot="public">
          <name>period</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a9fbbaa4cc515bc46e0c12e82a31df736" prot="public">
          <name>slash</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae0c312b77becbf0db3eb95684e1f3c6b" prot="public">
          <name>num_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4c633d95b2042a69a9dc84b9722da1a6" prot="public">
          <name>num_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710adb78bf0468d4b67878a3a7c35d0e614e" prot="public">
          <name>num_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ad3a014e638e1b7083e1e4a4d1cfd24f3" prot="public">
          <name>num_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a62088c3e7bd037a4060a13a5c6e5ada3" prot="public">
          <name>num_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a73ae0dab45d507710e73573b1f546815" prot="public">
          <name>num_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae3e5156208b092bf0f531359a384851f" prot="public">
          <name>num_6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a310c3f5034d8b9fbd370840e6e1b6c6b" prot="public">
          <name>num_7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a761ae972118562072e8808d6244159fd" prot="public">
          <name>num_8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a92b019d256f53072b91d5d4316e7ba6b" prot="public">
          <name>num_9</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710acd474d96b7d33934e9dc47b57cb4c445" prot="public">
          <name>colon</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a77b7e24bb3642a4b9d3081d393785273" prot="public">
          <name>semicolon</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae37e8d912e8f7b8f9b5ef9452ba47ff1" prot="public">
          <name>less</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a51c3f59625962b899c03595d6cdfb284" prot="public">
          <name>equals</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7b8dc4fb0fb55fc8eb69ff080c45ed7e" prot="public">
          <name>greater</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a5494af1f14a8c19939968c3e9e2d4f79" prot="public">
          <name>question</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7d0db380a5b95a8ba1da0bca241abda1" prot="public">
          <name>at</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a1476759ce86d46d41e079a8584b7a4f9" prot="public">
          <name>left_bracket</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ac57aeddaffce62fead6be61022eb1340" prot="public">
          <name>backslash</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7ffe0bf6f1b9c2223bda0e8a37dffe78" prot="public">
          <name>right_bracket</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a1e4d1d8e9a5c4437184eefbf8885a3fd" prot="public">
          <name>caret</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ab81453378a0c6e5389111178cf249c11" prot="public">
          <name>underscore</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4d0c5097c9c68673bd38d87353aa3637" prot="public">
          <name>backquote</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a0cc175b9c0f1b6a831c399e269772661" prot="public">
          <name>a</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a92eb5ffee6ae2fec3ad71c777531578f" prot="public">
          <name>b</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4a8a08f09d37b73795649038408b5f33" prot="public">
          <name>c</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a8277e0910d750195b448797616e091ad" prot="public">
          <name>d</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae1671797c52e15f763380b45e841ec32" prot="public">
          <name>e</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a8fa14cdd754f91cc6554c9e71929cce7" prot="public">
          <name>f</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ab2f5ff47436671b6e533d8dc3614845d" prot="public">
          <name>g</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a2510c39011c5be704182423e3a695e91" prot="public">
          <name>h</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a865c0c0b4ab0e063e5caa3387c1a8741" prot="public">
          <name>i</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a363b122c528f54df4a0446b6bab05515" prot="public">
          <name>j</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a8ce4b16b22b58894aa86c421e8759df3" prot="public">
          <name>k</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a2db95e8e1a9267b7a1188556b2013b33" prot="public">
          <name>l</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a6f8f57715090da2632453988d9a1501b" prot="public">
          <name>m</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7b8b965ad4bca0e41ab51de7b31363a1" prot="public">
          <name>n</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ad95679752134a2d9eb61dbd7b91c4bcc" prot="public">
          <name>o</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a83878c91171338902e0fe0fb97a8c47a" prot="public">
          <name>p</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7694f4a66316e53c8cdd9d9954bd611d" prot="public">
          <name>q</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4b43b0aee35624cd95b910189b3dc231" prot="public">
          <name>r</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a03c7c0ace395d80182db07ae2c30f034" prot="public">
          <name>s</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae358efa489f58062f10dd7316b65649e" prot="public">
          <name>t</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7b774effe4a349c6dd82ad4f4f21d34c" prot="public">
          <name>u</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a9e3669d19b675bd57058fd4664205d2a" prot="public">
          <name>v</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af1290186a5d0b1ceab27f4e77c0c5d68" prot="public">
          <name>w</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a9dd4e461268c8034f5c8564e155c67a6" prot="public">
          <name>x</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a415290769594460e2e485922904f345d" prot="public">
          <name>y</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710afbade9e36a3f36d3d676c1b808451dd7" prot="public">
          <name>z</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4b6f5bb8c345f4dbe4a50ee0e9bc15ae" prot="public">
          <name>capslock</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710abd19836ddb62c11c55ab251ccaca5645" prot="public">
          <name>f1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a3667f6a0c97490758d7dc9659d01ea34" prot="public">
          <name>f2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a1779cf3aa50c413afc7e05adb7e1b0de" prot="public">
          <name>f3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a6e1fcd704528ad8bf6d6bbedb9210096" prot="public">
          <name>f4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a74ce2e1a498f2fa27b5542040be774dc" prot="public">
          <name>f5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a64e4cda19b3f3ea4a7a56b5ba8cc33ca" prot="public">
          <name>f6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a6c664eeed34d9c29a711bdb374831b49" prot="public">
          <name>f7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a581c3010417303e1ee4c0657d76318d0" prot="public">
          <name>f8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a6506f0388343a1f09fd708fb15c5ade9" prot="public">
          <name>f9</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a82b5f6802b727b0d948d38cbccd48904" prot="public">
          <name>f10</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af344a40a52a94ab7903e6b35896b543e" prot="public">
          <name>f11</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a8039b4e0e6fe78bee7d3e5cfbfa343f0" prot="public">
          <name>f12</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a58f26ac305986a702312d42b4dd87761" prot="public">
          <name>print_screen</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a52752d17cb8e9c551c3a736c45e1ddf1" prot="public">
          <name>scroll_lock</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aec1b81965109165de6b38cd92c1e39f9" prot="public">
          <name>pause</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae0df5f3dfd2650ae5be9993434e2b2c0" prot="public">
          <name>insert</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a106a6c241b8797f52e1e77317b96a201" prot="public">
          <name>home</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af8e72578226499b7311f292f1deba130" prot="public">
          <name>page_up</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a5732df9ee14926851255e2f029258063" prot="public">
          <name>delete_key</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7f021a1415b86f2d013b2618fb31ae53" prot="public">
          <name>end</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ad8a0a6a1d9f3b78b1af0293cf6ac5dd7" prot="public">
          <name>page_down</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7c4f29407893c334a6cb7a87bf045c0d" prot="public">
          <name>right</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a811882fecd5c7618d7099ebbd39ea254" prot="public">
          <name>left</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a74e8333ad11685ff3bdae589c8f6e34d" prot="public">
          <name>down</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a46c48bec0d282018b9d167eef7711b2c" prot="public">
          <name>up</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af7afbc5b5e5b6bfb0e68b09b6bb925b8" prot="public">
          <name>numlock_clear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a84498e102b2629d3e7f0abf81229d8c0" prot="public">
          <name>keypad_divide</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a05c9c30bfd5524696356470aa1d982fd" prot="public">
          <name>keypad_multiply</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a17b2defd80df9a50a7734bdb01de32d1" prot="public">
          <name>keypad_minus</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a8c1106bd91ab68a34e4f25520e91b80f" prot="public">
          <name>keypad_plus</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af4b43f2b9d5df358690103e431d59e85" prot="public">
          <name>keypad_enter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a17bc3c0912747ca8a45c80ec4d4ac6ba" prot="public">
          <name>keypad_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae4c3b569ae10cff6dba7b05c936e1fa2" prot="public">
          <name>keypad_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a179845d0887a3aca46758bd17c15ca64" prot="public">
          <name>keypad_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a9f4cd05501c727e4075f74d3137d666e" prot="public">
          <name>keypad_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a95fd44d33428a56fc923be3cfdce1403" prot="public">
          <name>keypad_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa49dd2274f0196b2bde955621f45457b" prot="public">
          <name>keypad_6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a3ea17710316bd14054997ebded7c1177" prot="public">
          <name>keypad_7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710abc57af92a24bd0ebed4d085051037685" prot="public">
          <name>keypad_8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa765ab8dcd135525d71fd76618138de2" prot="public">
          <name>keypad_9</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710abeb8e3002141008ad395a4179160c59c" prot="public">
          <name>keypad_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4f6431b7d5fd7aeabaa6fbb0d90b0451" prot="public">
          <name>keypad_period</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a3676d55f84497cbeadfc614c1b1b62fc" prot="public">
          <name>application</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a62cd275989e78ee56a81f0265a87562e" prot="public">
          <name>power</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa1690a2472ae0f31ec9b97f32b8e3208" prot="public">
          <name>keypad_equals</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a89b45ff321063b749efc5b5b3aa79930" prot="public">
          <name>f13</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a1323fd7c68edb36766c982e6343cfdb4" prot="public">
          <name>f14</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ad3c8a0832878a5e1d4e873e57b7f4238" prot="public">
          <name>f15</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa2449b6477c1fef79be4202906486876" prot="public">
          <name>f16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710afe397f3f6f24b8500bc9c5f356384020" prot="public">
          <name>f17</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ad60ea3899962ccffb8e5c7893e7eddd7" prot="public">
          <name>f18</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a599f127bd63e32d6fd5457f9f1fa1e14" prot="public">
          <name>f19</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a3ad32b999fe4b4b2f6229acc5630e97b" prot="public">
          <name>f20</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710afc698bd6eba4453d16fc4acb4abf4a5a" prot="public">
          <name>f21</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a186381290b21833e0f1761ff4a87d4ba" prot="public">
          <name>f22</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a8ea5d22eba2d75b7651304f4dcde8eee" prot="public">
          <name>f23</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710affa04600c43d9c24762433fd7c4f55a3" prot="public">
          <name>f24</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aec0cd3cb91fe82b9501f62a528eb07a9" prot="public">
          <name>execute</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a657f8b8da628ef83cf69101b6817150a" prot="public">
          <name>help</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a8d6ab84ca2af9fccd4e4048694176ebf" prot="public">
          <name>menu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a99938282f04071859941e18f16efcf42" prot="public">
          <name>select</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aef399b2d446bb37b7c32ad2cc1b6045b" prot="public">
          <name>stop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a639849f6b368019778991b32434354fc" prot="public">
          <name>again</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a2dce8f543e8c072775c2743c7b9854cc" prot="public">
          <name>undo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710afe47aa7c733c490d36e80508d5dc4019" prot="public">
          <name>cut</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a12cba3ee81cf4a793796a51b6327c678" prot="public">
          <name>copy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a2f73afad7f2480e30b484a13d08c8c95" prot="public">
          <name>paste</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aea170e2cafb1337755c8b3d5ae4437f4" prot="public">
          <name>find</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710adef9cbe59ce34853e7081f62b095e348" prot="public">
          <name>mute</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a99d8c19a76f587b7c476c802950bea5d" prot="public">
          <name>volume_up</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a5484a052412a1490792614e316964a73" prot="public">
          <name>volume_down</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af75fdd5fa07ad16983db91aeb7b107d3" prot="public">
          <name>keypad_comma</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a151361ebcd263377885aae27b3d4a786" prot="public">
          <name>keypad_equals_as_400</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a162cc4be50aabbf411b0a0e2de3a23dc" prot="public">
          <name>alt_erase</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a96d8a9396af0ae17e48837c797947d79" prot="public">
          <name>sysreq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a10aec35353f9c4096a71c38654c3d402" prot="public">
          <name>cancel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a01bc6f8efa4202821e95f4fdf6298b30" prot="public">
          <name>clear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ada63586c8e4bfc904f1d33b0dc6d4827" prot="public">
          <name>prior</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ad00428c981df1d3de6841a851f1ee13b" prot="public">
          <name>second_return</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa0f0bc95016c862498bbad29d1f4d9d4" prot="public">
          <name>separator</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ac68271a63ddbc431c307beb7d2918275" prot="public">
          <name>out</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710afd154ffe305c26b5004231ff709bd1b8" prot="public">
          <name>oper</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ad8f5b82256b8f92d6da9bbfc1d23260f" prot="public">
          <name>clear_again</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a58ccbec034a34a25419e4a806de37d51" prot="public">
          <name>crsel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4e94d941c8b169755652c101776717d4" prot="public">
          <name>exsel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710adc56237d3cda808829afcba72dfc5e41" prot="public">
          <name>keypad_00</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aff9c143e233b8a60697fc09d5ec24e6b" prot="public">
          <name>keypad_000</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7a14c237a3b99587fb7662c69750efb4" prot="public">
          <name>thousandseparator</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a39b284e4b726982b1d9952dddc948369" prot="public">
          <name>decimalseparator</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ab80f57dd88ee2ba2fcc43a2ca46724f9" prot="public">
          <name>currency_unit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a63948f156f5644e985b4e5ca35fa83f4" prot="public">
          <name>currency_subunit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a5df49ed88d7694d9a806bc1fd0667512" prot="public">
          <name>keypad_leftparen</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aae8bd25485e2bdfde20ae3fc748d042c" prot="public">
          <name>keypad_rightparen</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a421b1c86b07082263e8f2cc9d6c2690b" prot="public">
          <name>keypad_leftbrace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af5ea50d6e3b1ac0fd2eab877eefd5946" prot="public">
          <name>keypad_rightbrace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af2be34d16751ee69678144a5468f8285" prot="public">
          <name>keypad_tab</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af05721879aedbb4bf965544a51d3168d" prot="public">
          <name>keypad_backspace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a3edefbc2243830f186d5e529335bee0a" prot="public">
          <name>keypad_a</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa90b6f98c68c3100a49b34ceb445889c" prot="public">
          <name>keypad_b</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a34517efdd2ab78d75e44a9d8be8ea4b6" prot="public">
          <name>keypad_c</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a2bf1d0f71b7e8e02b3ae51336dbbdad6" prot="public">
          <name>keypad_d</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a1816098ac0dbb6c6865bfda3aea92e9c" prot="public">
          <name>keypad_e</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae9983393a152be074ccf663601c158f7" prot="public">
          <name>keypad_f</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a582c124792a25d67aa7b45d232d0cf57" prot="public">
          <name>keypad_xor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4ff95c19ed677e867774618beea2a55f" prot="public">
          <name>keypad_power</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710af31112c75dd8a9b7c133a1db47327a97" prot="public">
          <name>keypad_percent</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a8fb8e6f90ed5ed4437ea3c454c0ef978" prot="public">
          <name>keypad_less</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a63589de3ba1f05a9b17ec0a5b4d3bbb8" prot="public">
          <name>keypad_greater</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ace0a407b98e59f668445e9350334da6a" prot="public">
          <name>keypad_ampersand</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ac7a030eb6a836416d9e33805a6347fed" prot="public">
          <name>keypad_double_ampersand</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a471b6daf13bdb4fcf33f0369ad860dc1" prot="public">
          <name>keypad_vertical_bar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710acf0fb9df03dad2f933ee1c4ccbec513e" prot="public">
          <name>keypad_double_verticle_bar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a915ef00f67ffcb4782b715f2543762e2" prot="public">
          <name>keypad_colon</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a693389c72fc0b3e9b148a15c5e5bbdd3" prot="public">
          <name>keypad_hash</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a919965bec64181f371f6df76a7d2ee0c" prot="public">
          <name>keypad_space</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a8f3782a5894062f46b934a4dfbb34228" prot="public">
          <name>keypad_at</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a536b1b191a70c5e0dbe8aa61ff52bac5" prot="public">
          <name>keypad_exclam</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a3433b42e02acf6687743ad49bb401672" prot="public">
          <name>keypad_mem_store</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a091e955d23525c2749d664c07e8a6af1" prot="public">
          <name>keypad_mem_recall</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a6f29fd773a9e9416863272ca00016626" prot="public">
          <name>keypad_mem_clear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7a207be070761f371517fa05d447b38c" prot="public">
          <name>keypad_mem_add</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a80dfe89b5bcd51c9456d0d21e1f48fc7" prot="public">
          <name>keypad_mem_subtract</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710afab582440764875a490035d006a1358b" prot="public">
          <name>keypad_mem_multiply</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa84b1a542e74800397146a17b01aa027" prot="public">
          <name>keypad_mem_divide</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ade945dc2af4edc81f2efdaa6f98399ff" prot="public">
          <name>keypad_plus_minus</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a818ac9572bf30fad6b58e46c184d871d" prot="public">
          <name>keypad_clear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a0888dfc87d5cc2a0a22ff2a8c466f452" prot="public">
          <name>keypad_clear_entry</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aaa4a0574613e428781786692279bd818" prot="public">
          <name>keypad_binary</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a2cf82bc3e568d0f77b324cde84aad3ed" prot="public">
          <name>keypad_octal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae1377c55dc3f1ff135b677e16751f564" prot="public">
          <name>keypad_decimal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a53625c0b0d5d544ea5742154e2d1332e" prot="public">
          <name>keypad_hexadecimal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a75707dc8c6dff5c32682116e66641243" prot="public">
          <name>ctrl_left</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710abc9e94a9606c06cd9d0dcff07b6148ec" prot="public">
          <name>shift_left</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a87ef7ffb504eaa5c7307a8a739974767" prot="public">
          <name>alt_left</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a856e640242b281ea893d1da181732fe1" prot="public">
          <name>gui_left</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a033f0c6889986548aba3cebcbd15ce12" prot="public">
          <name>ctrl_right</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a066380d27185d48e0c5e3c5a521a8e1d" prot="public">
          <name>shift_right</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a66c27042ffabee2b8d1c35e64fd0dc16" prot="public">
          <name>alt_right</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ab4b7dc402cbae5f31481a402bd363f58" prot="public">
          <name>gui_right</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a15d61712450a686a7f365adf4fef581f" prot="public">
          <name>mode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710afa16e068dac7219686fab7d06d1d695c" prot="public">
          <name>audio_next</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7aa2ae95892023509aadd893b8ff568f" prot="public">
          <name>audio_prev</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a68f7f43267bac4f6940a98b19c2009bc" prot="public">
          <name>audio_stop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aaac7e24d1d578085cb395c81c1351ea7" prot="public">
          <name>audio_play</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a6df64b47a5cce4035b8028129b15ed4d" prot="public">
          <name>audio_mute</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a16aa99c9cea437cb3f17025a185f34d6" prot="public">
          <name>media_select</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4eae35f1b35977a00ebd8086c259d4c9" prot="public">
          <name>www</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ab83a886a5c437ccd9ac15473fd6f1788" prot="public">
          <name>mail</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a4880766485de7821db13940395a913c8" prot="public">
          <name>calculator</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710adf53ca268240ca76670c8566ee54568a" prot="public">
          <name>computer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710afe7b2bc09c54c335951bbe5e2eab993f" prot="public">
          <name>ac_search</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ac0a714203c4bc13cf4a820c1ec4257e1" prot="public">
          <name>ac_home</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a1e835fa294fd7384744bc67d60025052" prot="public">
          <name>ac_back</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a9972d1a535494ac2a207cc3f88800974" prot="public">
          <name>ac_forward</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a69eaf4304d2d3e7c152251b18f5350fc" prot="public">
          <name>ac_stop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a00be9ded8274d6f69b8312cbe3ea7448" prot="public">
          <name>ac_refresh</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ad9cd88802233d830123471f272920d9c" prot="public">
          <name>ac_bookmarks</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ae344c7097a6e4dc3ba6176425a8d2467" prot="public">
          <name>brightness_down</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a7579840986300d170f41b29ad170e972" prot="public">
          <name>brightness_up</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a33cff0baff7e4c539ca0c51396ca9c23" prot="public">
          <name>displayswitch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a87a81538dce4723615b226d225c9bebb" prot="public">
          <name>keyboard_illum_toggle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a47014c5792f44cd089cadfc42d54bc44" prot="public">
          <name>keyboard_illum_down</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710a3b19f18e73c0a51ece64b7e67877a858" prot="public">
          <name>keyboard_illum_up</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710aa562c32c37bf0b775ddae04b93e2b6c3" prot="public">
          <name>eject</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710ac9fab33e9458412c527c3fe8a13ee37d" prot="public">
          <name>sleep</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/key.h" line="26" column="1" bodyfile="libs/core/src/core/key.h" bodystart="25" bodyend="264"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1aac094dc57a2fe85861d0a09afea97978" prot="public" static="no" strong="yes">
        <type></type>
        <name>WrapMode</name>
        <enumvalue id="namespaceeuphoria_1_1core_1aac094dc57a2fe85861d0a09afea97978a32cf6da134a8b268cf4ab6b79a9a5ad9" prot="public">
          <name>repeat</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aac094dc57a2fe85861d0a09afea97978a7ff5ead6fef18ca5f63119754ac76c3e" prot="public">
          <name>clamp_to_edge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1aac094dc57a2fe85861d0a09afea97978aa0987f6d6bef179be99f9ffd6f1cc73d" prot="public">
          <name>mirror_repeat</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mesh.h" line="25" column="1" bodyfile="libs/core/src/core/mesh.h" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1ae4c24a6a2024585c62a9b910a86d571d" prot="public" static="no" strong="yes">
        <type></type>
        <name>MouseBehaviour</name>
        <enumvalue id="namespaceeuphoria_1_1core_1ae4c24a6a2024585c62a9b910a86d571dafea087517c26fadd409bd4b9dc642555" prot="public">
          <name>normal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1ae4c24a6a2024585c62a9b910a86d571da197a55dab3fecbc7d994f2ba66a92222" prot="public">
          <name>wrap_within_window</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1ae4c24a6a2024585c62a9b910a86d571dab94e97963431fdc1086c18b725454d99" prot="public">
          <name>relative_only</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mousebehaviour.h" line="7" column="1" bodyfile="libs/core/src/core/mousebehaviour.h" bodystart="6" bodyend="9"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1abfc67891bba4cfcbc72a6eaaeb6371dc" prot="public" static="no" strong="yes">
        <type></type>
        <name>SortStyle</name>
        <enumvalue id="namespaceeuphoria_1_1core_1abfc67891bba4cfcbc72a6eaaeb6371dca9c9ab624360885fcf93b7643c93b6748" prot="public">
          <name>ascending</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1abfc67891bba4cfcbc72a6eaaeb6371dcab19e9805fd7727c52ca04dfa3d24a2e5" prot="public">
          <name>descending</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/multisort.h" line="16" column="1" bodyfile="libs/core/src/core/multisort.h" bodystart="15" bodyend="19"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a2e8b7cc361c3a1f0fd3e547e2c1eaee7" prot="public" static="no" strong="yes">
        <type></type>
        <name>ValueType</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a2e8b7cc361c3a1f0fd3e547e2c1eaee7a06d324fffd90570dc177e7d1aabcb4dd" prot="public">
          <name>int_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a2e8b7cc361c3a1f0fd3e547e2c1eaee7afd7170216efb2a7d32648e80919fb0ff" prot="public">
          <name>float_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a2e8b7cc361c3a1f0fd3e547e2c1eaee7a84d43bc0d9c76e960c0eb5e043db0baf" prot="public">
          <name>vec3f_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a2e8b7cc361c3a1f0fd3e547e2c1eaee7a4aea6729d47bac89dd13a327cf2b3efb" prot="public">
          <name>map_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/propertytree.h" line="12" column="1" bodyfile="libs/core/src/core/propertytree.h" bodystart="11" bodyend="17"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1ab230baada4409e0fcca3d5b1e4e94e31" prot="public" static="no" strong="yes">
        <type></type>
        <name>IsAbsolute</name>
        <enumvalue id="namespaceeuphoria_1_1core_1ab230baada4409e0fcca3d5b1e4e94e31aa6105c0a611b41b08f1209506350279e" prot="public">
          <name>yes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1ab230baada4409e0fcca3d5b1e4e94e31a7fa3b767c460b54a2be4d49030b349c7" prot="public">
          <name>no</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="156" column="1" bodyfile="libs/core/src/core/rgb.h" bodystart="155" bodyend="159"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03" prot="public" static="no" strong="yes">
        <type></type>
        <name>BlendMode</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03afea087517c26fadd409bd4b9dc642555" prot="public">
          <name>normal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03aea7156050a6d1023b33d8d29f46dd8ef" prot="public">
          <name>lighten</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03ae20f352f07dfbda67b934760a1aeac82" prot="public">
          <name>darken</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a0fbe41b549bb236aabadebd7924379fd" prot="public">
          <name>multiply</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a6927a3a7218a3195858411433ec20a21" prot="public">
          <name>average</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a34ec78fcc91ffb1e54cd85e4a0924332" prot="public">
          <name>add</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a97f415c180230ce76bafa74bc058ef5f" prot="public">
          <name>subtract</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a95456e7506a8c9c04e3bdffd78da1cae" prot="public">
          <name>difference</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a5a12847d9b6e756c1ed20d8e70b880d6" prot="public">
          <name>negation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a599eba19aa93a929cb8589f148b8a6c4" prot="public">
          <name>screen</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03af2c7487f4bc27a30cae5da87ae71aa81" prot="public">
          <name>exclusion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a380e537acdaedd487ca1adb49d020f7e" prot="public">
          <name>overlay</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a301c325464558e5837329d74e447c092" prot="public">
          <name>soft_light</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03ade4bff08a5171a9c3435b58bff4b40ab" prot="public">
          <name>hard_light</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a00fcd9ef06a0d8df92a9f5e074632458" prot="public">
          <name>color_dodge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03ae04fd4c1e32a378ee1d7d9709c82e758" prot="public">
          <name>color_burn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a3d8c5a12633122b8c280d6f31def695e" prot="public">
          <name>linear_dodge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a171b3580e2b352d998f47e8a1732b0b6" prot="public">
          <name>linear_burn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a5d7c98d5d96fa4ee78c8183fbc4c2d5b" prot="public">
          <name>linear_light</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a760ec9c327e33e1df6136a09548feba8" prot="public">
          <name>vivid_light</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a597f0bcbbf4a23f779534397d011face" prot="public">
          <name>pin_light</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03aee868bc026e48b47c7ff3add3e249324" prot="public">
          <name>hard_mix</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03ac361ee72f1559105051ffb9bac309c5a" prot="public">
          <name>reflect</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03a85ed998c9203767af5ec409f07cdfcab" prot="public">
          <name>glow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03ab3d97746dbb45e92dc083db205e1fd14" prot="public">
          <name>phoenix</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb_blend.h" line="8" column="1" bodyfile="libs/core/src/core/rgb_blend.h" bodystart="7" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="group__string_1ga76be2d19e62a480036566314fba1fb03" prot="public" static="no" strong="yes">
        <type></type>
        <name>CharToStringStyle</name>
        <enumvalue id="group__string_1gga76be2d19e62a480036566314fba1fb03a8c319f28d81d1527a9428e9a5c2195f5" prot="public">
          <name>smart</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__string_1gga76be2d19e62a480036566314fba1fb03afa2f1c8dc686b38506663647e5242622" prot="public">
          <name>include_hex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="115" column="1" bodyfile="libs/core/src/core/stringutils.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1acb9120f582881616e08787e08654e252" prot="public" static="no" strong="yes">
        <type></type>
        <name>BorderSetupRule</name>
        <enumvalue id="namespaceeuphoria_1_1core_1acb9120f582881616e08787e08654e252ad91f00fc682feeec2c90d8399d62d8ef" prot="public">
          <name>always_wall</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1acb9120f582881616e08787e08654e252a43ea0f4e9c567eb0cd96aaba3fb30fc5" prot="public">
          <name>always_empty</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1acb9120f582881616e08787e08654e252a7ddf32e17a6ac5ce04a8ecbf782ca509" prot="public">
          <name>random</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="21" column="1" bodyfile="libs/core/src/core/table_bool.h" bodystart="20" bodyend="25"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430" prot="public" static="no" strong="yes">
        <type></type>
        <name>OutsideRule</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430a2d86bdac01a3315b95794ffa7360edc3" prot="public">
          <name>wall</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430aa2e4822a98337283e39f7b60acf85ec9" prot="public">
          <name>empty</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430afbe322a89bc0ba531c3f0050e3935f28" prot="public">
          <name>mirror</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430accfc59a528a109fa4204e8ea06e8b68b" prot="public">
          <name>wrap</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="39" column="1" bodyfile="libs/core/src/core/table_bool.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a30b337cc45a3f978a3cf405f37ca4d9f" prot="public" static="no" strong="yes">
        <type></type>
        <name>NeighborhoodAlgorithm</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a30b337cc45a3f978a3cf405f37ca4d9fa6750aea347ac766af296266711a6171b" prot="public">
          <name>manhattan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a30b337cc45a3f978a3cf405f37ca4d9fad7d18cfb3a0d8293e2f5d94ea30e04d2" prot="public">
          <name>plus</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a30b337cc45a3f978a3cf405f37ca4d9fa34be958a921e43d813a2075297d8e862" prot="public">
          <name>box</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="85" column="1" bodyfile="libs/core/src/core/table_bool.h" bodystart="84" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeuphoria_1_1core_1a3b8da0f08a5f5180d7b458fac903396b" prot="public" static="no" strong="yes">
        <type></type>
        <name>CsvTrim</name>
        <enumvalue id="namespaceeuphoria_1_1core_1a3b8da0f08a5f5180d7b458fac903396ba9e2cd3a49272eb4863464c187878b93d" prot="public">
          <name>trim</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeuphoria_1_1core_1a3b8da0f08a5f5180d7b458fac903396ba0ca3eef3c01508462851fcc05908efe2" prot="public">
          <name>dont_trim</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_string.h" line="64" column="1" bodyfile="libs/core/src/core/table_string.h" bodystart="63" bodyend="67"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a58021cc41de6a201a07686ab6435efbf" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Interpolate" kindref="compound">Interpolate</ref>&lt; float, <ref refid="structeuphoria_1_1core_1_1FloatTransform" kindref="compound">FloatTransform</ref> &gt;</type>
        <definition>using euphoria::core::FloatInterpolate = typedef Interpolate&lt;float, FloatTransform&gt;</definition>
        <argsstring></argsstring>
        <name>FloatInterpolate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/interpolate.h" line="101" column="5" bodyfile="libs/core/src/core/interpolate.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a6b5c38948a5141360fbdfef830cebabe" prot="public" static="no">
        <type>std::int64_t</type>
        <definition>using euphoria::core::I64 = typedef std::int64_t</definition>
        <argsstring></argsstring>
        <name>I64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ints.h" line="7" column="5" bodyfile="libs/core/src/core/ints.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a7b6921cd0ad90f5c7fca5293d906f5cd" prot="public" static="no">
        <type>std::int32_t</type>
        <definition>using euphoria::core::I32 = typedef std::int32_t</definition>
        <argsstring></argsstring>
        <name>I32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ints.h" line="8" column="5" bodyfile="libs/core/src/core/ints.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a96c830397ec44df00f580ad758a68919" prot="public" static="no">
        <type>std::int16_t</type>
        <definition>using euphoria::core::I16 = typedef std::int16_t</definition>
        <argsstring></argsstring>
        <name>I16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ints.h" line="9" column="5" bodyfile="libs/core/src/core/ints.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a007850237768818819cc532b1136060b" prot="public" static="no">
        <type>std::int8_t</type>
        <definition>using euphoria::core::I8 = typedef std::int8_t</definition>
        <argsstring></argsstring>
        <name>I8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ints.h" line="10" column="5" bodyfile="libs/core/src/core/ints.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" prot="public" static="no">
        <type>std::uint64_t</type>
        <definition>using euphoria::core::U64 = typedef std::uint64_t</definition>
        <argsstring></argsstring>
        <name>U64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ints.h" line="12" column="5" bodyfile="libs/core/src/core/ints.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1ad68af8ee03e7b07d1a8a497b960c36a6" prot="public" static="no">
        <type>std::uint32_t</type>
        <definition>using euphoria::core::U32 = typedef std::uint32_t</definition>
        <argsstring></argsstring>
        <name>U32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ints.h" line="13" column="5" bodyfile="libs/core/src/core/ints.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1ac1ab516b63c6083618b5085e1e66c973" prot="public" static="no">
        <type>std::uint16_t</type>
        <definition>using euphoria::core::U16 = typedef std::uint16_t</definition>
        <argsstring></argsstring>
        <name>U16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ints.h" line="14" column="5" bodyfile="libs/core/src/core/ints.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a8d5a7dabfee4ed81c44079dc769697c3" prot="public" static="no">
        <type>std::uint8_t</type>
        <definition>using euphoria::core::U8 = typedef std::uint8_t</definition>
        <argsstring></argsstring>
        <name>U8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ints.h" line="15" column="5" bodyfile="libs/core/src/core/ints.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a82ac3ebd0dd8ae0ce4a3f6f532117579" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; int, int &gt;, float &gt;</type>
        <definition>using euphoria::core::KerningMap = typedef std::map&lt;std::pair&lt;int, int&gt;, float&gt;</definition>
        <argsstring></argsstring>
        <name>KerningMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/loadedfont.h" line="47" column="5" bodyfile="libs/core/src/core/loadedfont.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a1bada718b5a5fca01cdbae7c904f15d1" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Mat2f = typedef Mat2&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Mat2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat2.h" line="247" column="5" bodyfile="libs/core/src/core/mat2.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1ad52538d8033f57bebc0a681b1cac2f38" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Mat2i = typedef Mat2&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Mat2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat2.h" line="248" column="5" bodyfile="libs/core/src/core/mat2.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a47967d819c56604204b213f6ea24f413" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Mat3f = typedef Mat3&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Mat3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="393" column="5" bodyfile="libs/core/src/core/mat3.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1ac8b856ef745e03e278fc5e67e665273b" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Mat3i = typedef Mat3&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Mat3i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="394" column="5" bodyfile="libs/core/src/core/mat3.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a0652f9600dc461d914bd5ecfdd4d3924" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Mat4f = typedef Mat4&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Mat4f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat4.h" line="643" column="5" bodyfile="libs/core/src/core/mat4.h" bodystart="643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1ab37d14229c8c23d1e4aebf0e7070612b" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Mat4i = typedef Mat4&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Mat4i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat4.h" line="644" column="5" bodyfile="libs/core/src/core/mat4.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1aa7b5cb44c97d3860db511720967d640f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1Sortable" kindref="compound">Sortable</ref>&lt; T &gt; &gt;&gt;</type>
        <definition>using euphoria::core::SortableList = typedef std::vector&lt;std::shared_ptr&lt;Sortable&lt;T&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>SortableList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/multisort.h" line="36" column="5" bodyfile="libs/core/src/core/multisort.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a2dc87cb41fd6236adfbaee88b2746bf0" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>using euphoria::core::TextLine = typedef std::vector&lt;std::string&gt;</definition>
        <argsstring></argsstring>
        <name>TextLine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/nlp_line.h" line="11" column="1" bodyfile="libs/core/src/core/nlp_line.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a648a0683fcf7056c08734142a24e653a" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>using euphoria::core::TextSentence = typedef std::vector&lt;std::string&gt;</definition>
        <argsstring></argsstring>
        <name>TextSentence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/nlp_sentence.h" line="11" column="1" bodyfile="libs/core/src/core/nlp_sentence.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a1c3acd5fd095ea1e72c187b4b0c955bf" prot="public" static="no">
        <type>std::function&lt; void(const <ref refid="namespaceeuphoria_1_1core_1a648a0683fcf7056c08734142a24e653a" kindref="member">TextSentence</ref> &amp;)&gt;</type>
        <definition>using euphoria::core::OnSentenceFunction = typedef std::function&lt;void(const TextSentence&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>OnSentenceFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/nlp_sentence.h" line="12" column="1" bodyfile="libs/core/src/core/nlp_sentence.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a1c291e953f27d604436fdae47ddca0d4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::variant&lt; T, <ref refid="structeuphoria_1_1core_1_1ReadErrorFileMissing" kindref="compound">ReadErrorFileMissing</ref>, <ref refid="structeuphoria_1_1core_1_1ReadErrorFileError" kindref="compound">ReadErrorFileError</ref> &gt;</type>
        <definition>using euphoria::core::ReadResult = typedef std::variant&lt;T, ReadErrorFileMissing, ReadErrorFileError&gt;</definition>
        <argsstring></argsstring>
        <name>ReadResult</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="44" column="5" bodyfile="libs/core/src/core/proto.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a4e667d7591aa51d3bbf27ab04de0d8c1" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Quatf = typedef Quat&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Quatf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="498" column="5" bodyfile="libs/core/src/core/quat.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a14bda6d9c6e82c1937343ed8c51b7443" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Quati = typedef Quat&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Quati</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="499" column="5" bodyfile="libs/core/src/core/quat.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a18429a488f4a0c6d17b4a84fe0dac703" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Recti = typedef Rect&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Recti</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rect.h" line="558" column="5" bodyfile="libs/core/src/core/rect.h" bodystart="558" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a36217bfc978879cdbc151f5c8759bf86" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Rectf = typedef Rect&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Rectf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rect.h" line="559" column="5" bodyfile="libs/core/src/core/rect.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a719f8d7ee521c1ddadd6151452ede535" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1RandomLcg" kindref="compound">RandomLcg</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" kindref="member">U64</ref>, std::numeric_limits&lt; <ref refid="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" kindref="member">U64</ref> &gt;::<ref refid="namespaceeuphoria_1_1core_1ace73dc23f7e3bd11ee16bc5b458a702c" kindref="member">max</ref>(), 6364136223846793005, 1442695040888963407 &gt;</type>
        <definition>using euphoria::core::RandomLnuthLcg = typedef RandomLcg&lt;U64, std::numeric_limits&lt;U64&gt;::max() , 6364136223846793005, 1442695040888963407&gt;</definition>
        <argsstring></argsstring>
        <name>RandomLnuthLcg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rng.h" line="29" column="5" bodyfile="libs/core/src/core/rng.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a5f0fee2396291b49b449a8fc52489598" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1RandomXorShift" kindref="compound">RandomXorShift</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1ad68af8ee03e7b07d1a8a497b960c36a6" kindref="member">U32</ref>, 13, 17, 5 &gt;</type>
        <definition>using euphoria::core::RandomXorShift32 = typedef RandomXorShift&lt;U32, 13, 17, 5&gt;</definition>
        <argsstring></argsstring>
        <name>RandomXorShift32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rng.h" line="62" column="5" bodyfile="libs/core/src/core/rng.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1ad8850be5e3361568d3970e1db3ff30ae" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1RandomXorShift" kindref="compound">RandomXorShift</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" kindref="member">U64</ref>, 13, 17, 7 &gt;</type>
        <definition>using euphoria::core::RandomXorShift64 = typedef RandomXorShift&lt;U64, 13, 17, 7&gt;</definition>
        <argsstring></argsstring>
        <name>RandomXorShift64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rng.h" line="63" column="5" bodyfile="libs/core/src/core/rng.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Size2i = typedef Size2&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Size2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="215" column="5" bodyfile="libs/core/src/core/size2.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a8c5f78c50315b8abde58b90d27490153" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Size2f = typedef Size2&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Size2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="216" column="5" bodyfile="libs/core/src/core/size2.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; bool &gt;</type>
        <definition>using euphoria::core::BoolTable = typedef Table&lt;bool&gt;</definition>
        <argsstring></argsstring>
        <name>BoolTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="15" column="5" bodyfile="libs/core/src/core/table_bool.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a51bbf4c8bfd3a69ac3c1bf95b58ba5ca" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; std::string &gt;</type>
        <definition>using euphoria::core::StringTable = typedef Table&lt;std::string&gt;</definition>
        <argsstring></argsstring>
        <name>StringTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_string.h" line="17" column="5" bodyfile="libs/core/src/core/table_string.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a41020bc8b8bbff3320d0f2f637cb0288" prot="public" static="no">
        <type>std::chrono::time_point&lt; std::chrono::steady_clock &gt;</type>
        <definition>using euphoria::core::TimePoint = typedef std::chrono::time_point&lt;std::chrono::steady_clock&gt;</definition>
        <argsstring></argsstring>
        <name>TimePoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/timepoint.h" line="8" column="5" bodyfile="libs/core/src/core/timepoint.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Vec2f = typedef Vec2&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Vec2f</name>
        <briefdescription>
<para>Typedefs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="395" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a8b5a6dd14d0dfa498bde24a677e6faff" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Scale2" kindref="compound">Scale2</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Scale2f = typedef Scale2&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Scale2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="396" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a3d30e5ea309cd81baf38b43901c3d581" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Unit2" kindref="compound">Unit2</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Unit2f = typedef Unit2&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Unit2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="397" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a535cdec5073145060843e7200f37c167" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Vec2Transform" kindref="compound">Vec2Transform</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Vec2fTransform = typedef Vec2Transform&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Vec2fTransform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="398" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Vec2i = typedef Vec2&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Vec2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="399" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a3e444c309c2aca23e25fca3eaff3e730" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Scale2" kindref="compound">Scale2</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Scale2i = typedef Scale2&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Scale2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="400" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1ab491963ab7023c3d4425ed222b1e7320" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Unit2" kindref="compound">Unit2</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Unit2i = typedef Unit2&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Unit2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="401" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a1af05e58e18008da1339011fc6268733" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Vec2Transform" kindref="compound">Vec2Transform</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Vec2iTransform = typedef Vec2Transform&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Vec2iTransform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="402" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Vec3f = typedef Vec3&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Vec3f</name>
        <briefdescription>
<para>Typedefs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="411" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a05bb87e4918e13835245f049556061f1" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Unit3" kindref="compound">Unit3</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Unit3f = typedef Unit3&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Unit3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="412" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a5884936cc210f8d8174b2798b8089931" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Scale3" kindref="compound">Scale3</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Scale3f = typedef Scale3&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Scale3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="413" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a5672025103c21c7865df698df78094f8" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Vec3i = typedef Vec3&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Vec3i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="415" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a1a6a50c34797c4165d3c7552515aecbc" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Unit3" kindref="compound">Unit3</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Unit3i = typedef Unit3&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Unit3i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="416" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a15769bf7a6f5be3ce0326015f8ca7ee8" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Scale3" kindref="compound">Scale3</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Scale3i = typedef Scale3&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Scale3i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="417" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a569bf739e9febc4ba8e75ae686ec9d2f" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
        <definition>using euphoria::core::Vec4f = typedef Vec4&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Vec4f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec4.h" line="91" column="5" bodyfile="libs/core/src/core/vec4.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeuphoria_1_1core_1a9fbe60ef69dd35af9d6dc9043b0b6fc6" prot="public" static="no">
        <type><ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; int &gt;</type>
        <definition>using euphoria::core::Vec4i = typedef Vec4&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Vec4i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec4.h" line="92" column="5" bodyfile="libs/core/src/core/vec4.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1ad4a8e371c07d563694baaf2060f7fd5a" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::pi</definition>
        <argsstring></argsstring>
        <name>pi</name>
        <initializer>= 3.1415926535897932384626433832795f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="126" column="21" bodyfile="libs/core/src/core/numeric.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1a1b71bd0b682f0a76b13a63e162bcc831" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char euphoria::core::path_separator</definition>
        <argsstring></argsstring>
        <name>path_separator</name>
        <initializer>= &apos;/&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/os.h" line="23" column="20" bodyfile="libs/core/src/core/os.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1aaed82f4d51028b1f13d9daefab60e3ef" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool euphoria::core::always_false_v</definition>
        <argsstring></argsstring>
        <name>always_false_v</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="73" column="37" bodyfile="libs/core/src/core/proto.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1ad3c7e655e88508e8c88f6deaa3e485ba" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; float &gt;</type>
        <definition>constexpr Range&lt;float&gt; euphoria::core::r01</definition>
        <argsstring></argsstring>
        <name>r01</name>
        <initializer>= { 0.0f, 1.0f, nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="65" column="21" bodyfile="libs/core/src/core/range.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1ad5e6f03eb3ae864a82caf6ac6f568d06" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; float &gt;</type>
        <definition>constexpr Range&lt;float&gt; euphoria::core::r11</definition>
        <argsstring></argsstring>
        <name>r11</name>
        <initializer>= { -1.0f, 1.0f, nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="66" column="21" bodyfile="libs/core/src/core/range.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__string_1ga6b3b47e71d47e09860a94f43e2e4e443" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string euphoria::core::space_characters</definition>
        <argsstring></argsstring>
        <name>space_characters</name>
        <initializer>= &quot; \n\r\t&quot;</initializer>
        <briefdescription>
<para>Space characters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the space characters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="27" column="23" bodyfile="libs/core/src/core/stringutils.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1aa7c2fcd6521a50ba45dea90436066f4f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr unsigned char</type>
        <definition>constexpr unsigned char euphoria::core::bit_up</definition>
        <argsstring></argsstring>
        <name>bit_up</name>
        <initializer>= 1 &lt;&lt; 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="13" column="29" bodyfile="libs/core/src/core/textbox.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1a0f70ea49fbb77c520d71a545f8106585" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr unsigned char</type>
        <definition>constexpr unsigned char euphoria::core::bit_down</definition>
        <argsstring></argsstring>
        <name>bit_down</name>
        <initializer>= 1 &lt;&lt; 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="14" column="29" bodyfile="libs/core/src/core/textbox.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1a664318ae7dd0a8f15f9ace98fceecebc" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr unsigned char</type>
        <definition>constexpr unsigned char euphoria::core::bit_left</definition>
        <argsstring></argsstring>
        <name>bit_left</name>
        <initializer>= 1 &lt;&lt; 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="15" column="29" bodyfile="libs/core/src/core/textbox.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1abd1d23b042d95930fc87f61edcada57f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr unsigned char</type>
        <definition>constexpr unsigned char euphoria::core::bit_right</definition>
        <argsstring></argsstring>
        <name>bit_right</name>
        <initializer>= 1 &lt;&lt; 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="16" column="29" bodyfile="libs/core/src/core/textbox.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeuphoria_1_1core_1a3b02050bb8b242036e35292ba9978467" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr unsigned char</type>
        <definition>constexpr unsigned char euphoria::core::bit_no_line</definition>
        <argsstring></argsstring>
        <name>bit_no_line</name>
        <initializer>= static_cast&lt;unsigned char&gt;(~(<ref refid="namespaceeuphoria_1_1core_1aa7c2fcd6521a50ba45dea90436066f4f" kindref="member">bit_up</ref> | <ref refid="namespaceeuphoria_1_1core_1a0f70ea49fbb77c520d71a545f8106585" kindref="member">bit_down</ref> | <ref refid="namespaceeuphoria_1_1core_1a664318ae7dd0a8f15f9ace98fceecebc" kindref="member">bit_left</ref> | <ref refid="namespaceeuphoria_1_1core_1abd1d23b042d95930fc87f61edcada57f" kindref="member">bit_right</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="17" column="29" bodyfile="libs/core/src/core/textbox.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae05a7c45a30c073c706720de288b3ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;s, const Aabb &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Aabb" kindref="compound">Aabb</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/aabb.h" line="62" column="5" bodyfile="libs/core/src/core/aabb.h" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa35646a94b3e4643533eab01838ab901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref></type>
        <definition>Vec3f euphoria::core::get_random_point</definition>
        <argsstring>(Random *rand, const Aabb &amp;)</argsstring>
        <name>get_random_point</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Aabb" kindref="compound">Aabb</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/aabb.h" line="70" column="5" declfile="libs/core/src/core/aabb.h" declline="70" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a54dc61b60c4556ed12bd50dab1f97755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::sin</definition>
        <argsstring>(const Angle &amp;ang)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="141" column="5" declfile="libs/core/src/core/angle.h" declline="141" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae8d3f359094a7b631eb2b8431004eb33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::cos</definition>
        <argsstring>(const Angle &amp;ang)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="145" column="5" declfile="libs/core/src/core/angle.h" declline="145" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a909c6e5e4847976d1b0eff710d379594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::tan</definition>
        <argsstring>(const Angle &amp;ang)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="149" column="5" declfile="libs/core/src/core/angle.h" declline="149" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3708822241026b3647ac86d31299e0db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::asin</definition>
        <argsstring>(float v)</argsstring>
        <name>asin</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="153" column="5" declfile="libs/core/src/core/angle.h" declline="153" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3159f55a6d78330c7d9342cec146f46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::acos</definition>
        <argsstring>(float v)</argsstring>
        <name>acos</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="157" column="5" declfile="libs/core/src/core/angle.h" declline="157" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a966656c296ef6c69c3263be95f771033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::atan</definition>
        <argsstring>(float v)</argsstring>
        <name>atan</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="161" column="5" declfile="libs/core/src/core/angle.h" declline="161" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2ca6cf46cc444b8be5893b2b135d06a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::atan2</definition>
        <argsstring>(float y, float x)</argsstring>
        <name>atan2</name>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="165" column="5" declfile="libs/core/src/core/angle.h" declline="165" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a60140f7b2f3938e91fe0cd66a8286eff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::operator+</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="169" column="5" declfile="libs/core/src/core/angle.h" declline="169" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad3dddde243b55924c20d8d157b82460d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::operator-</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="173" column="5" declfile="libs/core/src/core/angle.h" declline="173" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a28f84f955bba842fb8831871c2bb3024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::operator*</definition>
        <argsstring>(const Angle &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="177" column="5" declfile="libs/core/src/core/angle.h" declline="177" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab7b2e0db3d1906f786e018fade65f40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::operator/</definition>
        <argsstring>(const Angle &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="181" column="5" declfile="libs/core/src/core/angle.h" declline="181" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afd89dc481f0be9d85b05bd8ea8e8f6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::operator*</definition>
        <argsstring>(float rhs, const Angle &amp;lhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="185" column="5" declfile="libs/core/src/core/angle.h" declline="185" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae29131d02b15cf6cc5ccae579ef0fad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Angle &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="188" column="5" declfile="libs/core/src/core/angle.h" declline="188" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad79fde24b36f5118ba33a7aff24a448b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::operator&lt;</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="192" column="5" declfile="libs/core/src/core/angle.h" declline="192" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a370cd137e658bbda2644dc55033498af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::operator&lt;=</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="196" column="5" declfile="libs/core/src/core/angle.h" declline="196" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6d3058c513926140bbba99e2c4d7a7c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::operator&gt;</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="201" column="5" declfile="libs/core/src/core/angle.h" declline="201" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a62d42548fb7c2b4dc461bdcbaff2f08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::operator&gt;=</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="205" column="5" declfile="libs/core/src/core/angle.h" declline="205" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae3c3712e31cb676fc48e2af9ba4511be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const AxisAngle &amp;aa)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1AxisAngle" kindref="compound">AxisAngle</ref> &amp;</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/axisangle.h" line="27" column="5" declfile="libs/core/src/core/axisangle.h" declline="27" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5fedf1ecd80db4f67871d932a0d88b27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::c_sizet_to_int</definition>
        <argsstring>(size_t t)</argsstring>
        <name>c_sizet_to_int</name>
        <param>
          <type>size_t</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="11" column="5" declfile="libs/core/src/core/cint.h" declline="11" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afc7d47131603e24941c080823cf0ac7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::c_int_to_t</definition>
        <argsstring>(int i)</argsstring>
        <name>c_int_to_t</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="15" column="7" bodyfile="libs/core/src/core/cint.h" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a16df1b842e91e1f166af943e8d993371" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int euphoria::core::c_int_to_t</definition>
        <argsstring>(int i)</argsstring>
        <name>c_int_to_t</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="21" column="19" bodyfile="libs/core/src/core/cint.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a1931bd6f188c6cad27801400bbdcbd89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::c_unsigned_int_to_int</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>c_unsigned_int_to_int</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="25" column="5" declfile="libs/core/src/core/cint.h" declline="25" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a68f6cd9e264fde6691093fe2a051f5d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int euphoria::core::c_int_to_unsigned_int</definition>
        <argsstring>(int i)</argsstring>
        <name>c_int_to_unsigned_int</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="29" column="5" declfile="libs/core/src/core/cint.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af099f7ec563e6193d781f5d13f5c075b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t euphoria::core::c_int_to_sizet</definition>
        <argsstring>(int i)</argsstring>
        <name>c_int_to_sizet</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="33" column="5" declfile="libs/core/src/core/cint.h" declline="33" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad8bcb4de9324eb9b973afb897d659903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a8d5a7dabfee4ed81c44079dc769697c3" kindref="member">U8</ref></type>
        <definition>U8 euphoria::core::c_int_to_u8</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>c_int_to_u8</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="37" column="5" declfile="libs/core/src/core/cint.h" declline="37" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a4f33f8280112d46e88d7e2d4ec2355af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::c_u64_to_int</definition>
        <argsstring>(U64 u)</argsstring>
        <name>c_u64_to_int</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" kindref="member">U64</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="41" column="5" declfile="libs/core/src/core/cint.h" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a4a9c9c153a137b6a8f3953e4a57a1ff0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr int</type>
        <definition>constexpr int euphoria::core::c_float_to_int</definition>
        <argsstring>(float f)</argsstring>
        <name>c_float_to_int</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="46" column="5" bodyfile="libs/core/src/core/cint.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a46311ab73f84dd32e91af1c681e28fbf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::c_sizet_to_float</definition>
        <argsstring>(std::size_t f)</argsstring>
        <name>c_sizet_to_float</name>
        <param>
          <type>std::size_t</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="53" column="5" bodyfile="libs/core/src/core/cint.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1abac18fdcdb2d7a94b7762d18e9a2f34c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::c_int_to_float</definition>
        <argsstring>(int i)</argsstring>
        <name>c_int_to_float</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="60" column="5" bodyfile="libs/core/src/core/cint.h" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a4b6b33d25b2f27edee03687948e3a256" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::c_u64_to_float</definition>
        <argsstring>(U64 i)</argsstring>
        <name>c_u64_to_float</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" kindref="member">U64</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="67" column="5" bodyfile="libs/core/src/core/cint.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa3c486456bf5b6720845d8dc5fa4b45f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespaceeuphoria_1_1core_1ad68af8ee03e7b07d1a8a497b960c36a6" kindref="member">U32</ref></type>
        <definition>constexpr U32 euphoria::core::c_bit_signed_to_unsigned</definition>
        <argsstring>(I32 i)</argsstring>
        <name>c_bit_signed_to_unsigned</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a7b6921cd0ad90f5c7fca5293d906f5cd" kindref="member">I32</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="74" column="5" bodyfile="libs/core/src/core/cint.h" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a234870637f579d966c038a02f905b29c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double euphoria::core::c_float_to_double</definition>
        <argsstring>(float f)</argsstring>
        <name>c_float_to_double</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="83" column="5" bodyfile="libs/core/src/core/cint.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a89950e28f40bbcdd836da3379ae45998" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::c_double_to_float</definition>
        <argsstring>(double f)</argsstring>
        <name>c_double_to_float</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cint.h" line="90" column="5" bodyfile="libs/core/src/core/cint.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac33a5e3814d73fb7685080175cac49c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" kindref="member">Size2i</ref> &gt;</type>
        <definition>std::vector&lt;Size2i&gt; euphoria::core::collect_sizes</definition>
        <argsstring>(const std::vector&lt; Image &gt; &amp;images, int padding)</argsstring>
        <name>collect_sizes</name>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &gt; &amp;</type>
          <declname>images</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/collage.h" line="15" column="17" declfile="libs/core/src/core/collage.h" declline="15" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a34e46f71500f105d163bc74cc829c348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref></type>
        <definition>Image euphoria::core::draw_image</definition>
        <argsstring>(const std::vector&lt; Vec2i &gt; &amp;positions, const std::vector&lt; Image &gt; &amp;images, const Size2i &amp;size, const Rgbi &amp;background_color)</argsstring>
        <name>draw_image</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &gt; &amp;</type>
          <declname>images</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" kindref="member">Size2i</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>background_color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/collage.h" line="22" column="5" declfile="libs/core/src/core/collage.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7e193cdb7acc68532e25fbba500a0646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" kindref="member">Size2i</ref></type>
        <definition>Size2i euphoria::core::pack_tight</definition>
        <argsstring>(const Size2i &amp;default_size, std::vector&lt; Vec2i &gt; *positions, const std::vector&lt; Image &gt; &amp;images, int padding)</argsstring>
        <name>pack_tight</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" kindref="member">Size2i</ref> &amp;</type>
          <declname>default_size</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &gt; *</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &gt; &amp;</type>
          <declname>images</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/collage.h" line="31" column="5" declfile="libs/core/src/core/collage.h" declline="31" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7bfe3a026c7015b208de242070f7ad8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &gt;</type>
        <definition>std::vector&lt;Vec2i&gt; euphoria::core::pack_image</definition>
        <argsstring>(const Size2i &amp;image_size, const std::vector&lt; Image &gt; &amp;images, const std::vector&lt; std::string &gt; &amp;files, int padding)</argsstring>
        <name>pack_image</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" kindref="member">Size2i</ref> &amp;</type>
          <declname>image_size</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &gt; &amp;</type>
          <declname>images</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>files</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/collage.h" line="43" column="5" declfile="libs/core/src/core/collage.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a53656a642d01babab854d9b3d76b501f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &gt;</type>
        <definition>std::optional&lt;Image&gt; euphoria::core::pack_image</definition>
        <argsstring>(const std::vector&lt; Image &gt; &amp;images, const std::vector&lt; std::string &gt; &amp;files, const Size2i &amp;requested_size, int padding, Rgbi background_color, bool pack_image)</argsstring>
        <name>pack_image</name>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &gt; &amp;</type>
          <declname>images</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>files</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" kindref="member">Size2i</ref> &amp;</type>
          <declname>requested_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padding</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref></type>
          <declname>background_color</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pack_image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/collage.h" line="53" column="5" declfile="libs/core/src/core/collage.h" declline="53" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab7af0efa3209c752a2bb407927cc9962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &gt;, <ref refid="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" kindref="member">Size2i</ref> &gt;</type>
        <definition>std::pair&lt;std::vector&lt;Vec2i&gt;, Size2i&gt; euphoria::core::grid_layout</definition>
        <argsstring>(const std::vector&lt; Image &gt; &amp;images, int padding, bool top_to_bottom)</argsstring>
        <name>grid_layout</name>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &gt; &amp;</type>
          <declname>images</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padding</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>top_to_bottom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/collage.h" line="68" column="5" declfile="libs/core/src/core/collage.h" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6d4dae55ee0c833d3c7f19b888203637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref></type>
        <definition>Image euphoria::core::grid_layout</definition>
        <argsstring>(const std::vector&lt; Image &gt; &amp;images, int padding, Rgbi background_color, bool top_to_bottom)</argsstring>
        <name>grid_layout</name>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &gt; &amp;</type>
          <declname>images</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padding</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref></type>
          <declname>background_color</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>top_to_bottom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/collage.h" line="76" column="5" declfile="libs/core/src/core/collage.h" declline="76" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad44176a68db7eda1a6adacdc8748144e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; float &gt;</type>
        <definition>std::optional&lt;float&gt; euphoria::core::get_intersection</definition>
        <argsstring>(const UnitRay3f &amp;ray, const CollisionMesh &amp;mesh)</argsstring>
        <name>get_intersection</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1UnitRay3f" kindref="compound">UnitRay3f</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1CollisionMesh" kindref="compound">CollisionMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/collisionmesh.h" line="24" column="1" declfile="libs/core/src/core/collisionmesh.h" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad749318b4cd5de0e4f2ef98d5cd9cf0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::parse_commandline</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>parse_commandline</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/console.h" line="37" column="5" declfile="libs/core/src/core/console.h" declline="37" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2e6b585fb99265669fb91b68b785969e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view euphoria::core::get_cp437</definition>
        <argsstring>(int c)</argsstring>
        <name>get_cp437</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cp437.h" line="12" column="5" declfile="libs/core/src/core/cp437.h" declline="12" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a9da7bf15e54e0e45d1d0118704e47900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view euphoria::core::get_random_cp437_in_utf8</definition>
        <argsstring>(Random *random)</argsstring>
        <name>get_random_cp437_in_utf8</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cp437.h" line="15" column="5" declfile="libs/core/src/core/cp437.h" declline="15" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab021838196f1bbe4729eead4ad9eb022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long euphoria::core::calculate_crc32</definition>
        <argsstring>(const MemoryChunk &amp;chunk)</argsstring>
        <name>calculate_crc32</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> &amp;</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/crc32.h" line="8" column="5" declfile="libs/core/src/core/crc32.h" declline="8" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a45bf6b79de29d2b7ccb9d19100b5b5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TreeStyle" kindref="compound">TreeStyle</ref></type>
        <definition>TreeStyle euphoria::core::slash_style</definition>
        <argsstring>()</argsstring>
        <name>slash_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ctree.h" line="20" column="5" declfile="libs/core/src/core/ctree.h" declline="20" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af8262da5777c17a850d64e30bf4da9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TreeStyle" kindref="compound">TreeStyle</ref></type>
        <definition>TreeStyle euphoria::core::cross_style</definition>
        <argsstring>()</argsstring>
        <name>cross_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ctree.h" line="24" column="5" declfile="libs/core/src/core/ctree.h" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a91e9afab2ea23e1c653819a20bea5dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TreeStyle" kindref="compound">TreeStyle</ref></type>
        <definition>TreeStyle euphoria::core::utf8_tree_style</definition>
        <argsstring>()</argsstring>
        <name>utf8_tree_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ctree.h" line="28" column="5" declfile="libs/core/src/core/ctree.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7c9218b5cbc7ed8555742dd10a461b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TreeStyle" kindref="compound">TreeStyle</ref></type>
        <definition>TreeStyle euphoria::core::determine_style</definition>
        <argsstring>()</argsstring>
        <name>determine_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ctree.h" line="32" column="5" declfile="libs/core/src/core/ctree.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aca0d3480c8d8add15f0d79a91a82fec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename LabelFunction</type>
          </param>
          <param>
            <type>typename FindChildrenFunction</type>
          </param>
          <param>
            <type>typename PrintFunction</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void euphoria::core::print_hierarchy</definition>
        <argsstring>(T item, LabelFunction label_function, FindChildrenFunction find_children_function, PrintFunction print_function, const TreeStyle &amp;style=determine_style(), const std::string &amp;a_indent=&quot;&quot;, int index=0, bool last=true)</argsstring>
        <name>print_hierarchy</name>
        <param>
          <type>T</type>
          <declname>item</declname>
        </param>
        <param>
          <type>LabelFunction</type>
          <declname>label_function</declname>
        </param>
        <param>
          <type>FindChildrenFunction</type>
          <declname>find_children_function</declname>
        </param>
        <param>
          <type>PrintFunction</type>
          <declname>print_function</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1TreeStyle" kindref="compound">TreeStyle</ref> &amp;</type>
          <declname>style</declname>
          <defval><ref refid="namespaceeuphoria_1_1core_1a7c9218b5cbc7ed8555742dd10a461b38" kindref="member">determine_style</ref>()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>a_indent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>last</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/ctree.h" line="43" column="5" bodyfile="libs/core/src/core/ctree.h" bodystart="44" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a918cfae31cf05d99c3cc736c9bfc5a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string euphoria::core::custom_argparser_to_string</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>custom_argparser_to_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/custom_parser.h" line="23" column="5" bodyfile="libs/core/src/core/custom_parser.h" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7878fd0aefc0e9ce9e2b41c25f4acc34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt;T&gt; euphoria::core::custom_argparser_parse</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>custom_argparser_parse</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/custom_parser.h" line="30" column="5" bodyfile="libs/core/src/core/custom_parser.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a9c4aeb4f4c340dd2d8246ff8eca5fda2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::ceasar_cypher</definition>
        <argsstring>(const std::string &amp;input, int steps, const std::string &amp;alphabet, bool case_sensitive, ActionWhenMissingInAlphabet missing_in_alphabet, char invalid)</argsstring>
        <name>ceasar_cypher</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>steps</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>alphabet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a115463d1e927ca892cec2491d19a056b" kindref="member">ActionWhenMissingInAlphabet</ref></type>
          <declname>missing_in_alphabet</declname>
        </param>
        <param>
          <type>char</type>
          <declname>invalid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cypher.h" line="17" column="5" declfile="libs/core/src/core/cypher.h" declline="17" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a35f30a6412ebf01a137c0f9f24993bed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::rot13</definition>
        <argsstring>(const std::string &amp;input)</argsstring>
        <name>rot13</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/cypher.h" line="29" column="5" declfile="libs/core/src/core/cypher.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a39a59d9adc8b608b6d9d88337b496042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t euphoria::core::date_time_to_int64</definition>
        <argsstring>(const TimetWrapper &amp;dt)</argsstring>
        <name>date_time_to_int64</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1TimetWrapper" kindref="compound">TimetWrapper</ref> &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/datetime.h" line="73" column="14" declfile="libs/core/src/core/datetime.h" declline="73" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afbaafd838f7af6fa10a12a9c6d4f8815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TimetWrapper" kindref="compound">TimetWrapper</ref></type>
        <definition>TimetWrapper euphoria::core::int64_to_date_time</definition>
        <argsstring>(uint64_t i)</argsstring>
        <name>int64_to_date_time</name>
        <param>
          <type>uint64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/datetime.h" line="74" column="18" declfile="libs/core/src/core/datetime.h" declline="74" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3a9b89b15fe7f8605f9fcc43225ddbc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a8d5a7dabfee4ed81c44079dc769697c3" kindref="member">U8</ref> &gt;</type>
        <definition>std::vector&lt;U8&gt; euphoria::core::to_bytes</definition>
        <argsstring>(U32 hash)</argsstring>
        <name>to_bytes</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ad68af8ee03e7b07d1a8a497b960c36a6" kindref="member">U32</ref></type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/drunken_bishop.h" line="13" column="5" declfile="libs/core/src/core/drunken_bishop.h" declline="13" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab43a636d02c8b612f6c8f9cc6d20fcd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a8d5a7dabfee4ed81c44079dc769697c3" kindref="member">U8</ref> &gt;</type>
        <definition>std::vector&lt;U8&gt; euphoria::core::to_bytes</definition>
        <argsstring>(U64 hash)</argsstring>
        <name>to_bytes</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" kindref="member">U64</ref></type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/drunken_bishop.h" line="17" column="5" declfile="libs/core/src/core/drunken_bishop.h" declline="17" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad5592438ce04c42930bf5dea0e149845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; euphoria::core::to_codes</definition>
        <argsstring>(U8 byte, bool msb_first)</argsstring>
        <name>to_codes</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a8d5a7dabfee4ed81c44079dc769697c3" kindref="member">U8</ref></type>
          <declname>byte</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>msb_first</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/drunken_bishop.h" line="21" column="5" declfile="libs/core/src/core/drunken_bishop.h" declline="21" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2e1438717c1e984c2cfeb2af09c93a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; euphoria::core::to_codes</definition>
        <argsstring>(const std::vector&lt; U8 &gt; &amp;bytes, bool msb_first)</argsstring>
        <name>to_codes</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a8d5a7dabfee4ed81c44079dc769697c3" kindref="member">U8</ref> &gt; &amp;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>msb_first</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/drunken_bishop.h" line="24" column="5" declfile="libs/core/src/core/drunken_bishop.h" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6dcb3c1090ac1e92d65dec72be245348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; int &gt;</type>
        <definition>Table&lt;int&gt; euphoria::core::drunken_bishop</definition>
        <argsstring>(U32 hash, int width, int height, bool msb_first=true, int startx=-1, int starty=-1)</argsstring>
        <name>drunken_bishop</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ad68af8ee03e7b07d1a8a497b960c36a6" kindref="member">U32</ref></type>
          <declname>hash</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>msb_first</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>startx</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>starty</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/drunken_bishop.h" line="27" column="5" declfile="libs/core/src/core/drunken_bishop.h" declline="27" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6fa82b02f5e86755eed3f5b1d18cc7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; int &gt;</type>
        <definition>Table&lt;int&gt; euphoria::core::drunken_bishop</definition>
        <argsstring>(U64 hash, int width, int height, bool msb_first=true, int startx=-1, int starty=-1)</argsstring>
        <name>drunken_bishop</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" kindref="member">U64</ref></type>
          <declname>hash</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>msb_first</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>startx</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>starty</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/drunken_bishop.h" line="38" column="5" declfile="libs/core/src/core/drunken_bishop.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a395d4a10b9b435ad4d491f60d2e241a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; int &gt;</type>
        <definition>Table&lt;int&gt; euphoria::core::drunken_bishop</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;codes, int width, int height, int startx=-1, int starty=-1)</argsstring>
        <name>drunken_bishop</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startx</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>starty</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/drunken_bishop.h" line="49" column="5" declfile="libs/core/src/core/drunken_bishop.h" declline="49" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a91ac3f9ceebf944f762ee5c6628f80be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::get_ssh_characters</definition>
        <argsstring>()</argsstring>
        <name>get_ssh_characters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/drunken_bishop.h" line="60" column="5" declfile="libs/core/src/core/drunken_bishop.h" declline="60" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a9ddc3d7b3fe4d1dedd62ea8c430b050d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::collapse</definition>
        <argsstring>(const Table&lt; int &gt; &amp;table, const std::vector&lt; std::string &gt; &amp;characters)</argsstring>
        <name>collapse</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; int &gt; &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>characters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/drunken_bishop.h" line="63" column="5" declfile="libs/core/src/core/drunken_bishop.h" declline="63" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a03f93165c8b4dde6911945e2e9b68c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::edit_distance</definition>
        <argsstring>(const std::string &amp;source, const std::string &amp;target)</argsstring>
        <name>edit_distance</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/editdistance.h" line="12" column="5" declfile="libs/core/src/core/editdistance.h" declline="12" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6e92b28b3a757f4be3682b00a9c8e761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::fast_edit_distance</definition>
        <argsstring>(const std::string &amp;the_row, const std::string &amp;the_col)</argsstring>
        <name>fast_edit_distance</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>the_row</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>the_col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/editdistance.h" line="18" column="5" declfile="libs/core/src/core/editdistance.h" declline="18" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5a717e085d40f2ecf3f4696d1ed702be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;s, const EnumValue &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1EnumValue" kindref="compound">EnumValue</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/enum.h" line="88" column="5" declfile="libs/core/src/core/enum.h" declline="88" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aae97fc77c5c94b0157d311e34c68874e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::load_enum_type</definition>
        <argsstring>(EnumType *type, vfs::FileSystem *fs, const vfs::FilePath &amp;path)</argsstring>
        <name>load_enum_type</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1EnumType" kindref="compound">EnumType</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">vfs::FileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">vfs::FilePath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/enum.h" line="93" column="5" declfile="libs/core/src/core/enum.h" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5831989eaaa7149c87f7da76f44fde03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string euphoria::core::enum_to_string</definition>
        <argsstring>(T t)</argsstring>
        <name>enum_to_string</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/enumtostring.h" line="118" column="5" bodyfile="libs/core/src/core/enumtostring.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afe75787cd8800feb5787d8a439dbc298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1EnumToStringImplementation" kindref="compound">EnumToStringImplementation</ref>&lt; T &gt;</type>
        <definition>EnumToStringImplementation&lt;T&gt; euphoria::core::get_enum_to_string_implementation_from_enum</definition>
        <argsstring>()</argsstring>
        <name>get_enum_to_string_implementation_from_enum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/enumtostring.h" line="125" column="5" bodyfile="libs/core/src/core/enumtostring.h" bodystart="125" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3ce7079ca4003e53365620ae8c0a14f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1MatchedEnum" kindref="compound">MatchedEnum</ref>&lt; T &gt;</type>
        <definition>MatchedEnum&lt;T&gt; euphoria::core::string_to_enum</definition>
        <argsstring>(const std::string &amp;input, size_t max_size=5)</argsstring>
        <name>string_to_enum</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_size</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/enumtostring.h" line="141" column="5" bodyfile="libs/core/src/core/enumtostring.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2b4d179819e21a51434e7bc2a299259e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::enum_to_string</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts)</argsstring>
        <name>enum_to_string</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/enumtostring.h" line="149" column="5" bodyfile="libs/core/src/core/enumtostring.h" bodystart="149" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af7e7be4593c7e53349ac4fd082b2877b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::enum_to_string</definition>
        <argsstring>()</argsstring>
        <name>enum_to_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/enumtostring.h" line="162" column="5" bodyfile="libs/core/src/core/enumtostring.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3855c35d1b5b0e022fb7d7c3fa1270f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::enum_values</definition>
        <argsstring>()</argsstring>
        <name>enum_values</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/enumtostring.h" line="169" column="5" bodyfile="libs/core/src/core/enumtostring.h" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6aee73bde8335c83077c9f0aeec17f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::find</definition>
        <argsstring>(const std::string &amp;target, const std::string &amp;search)</argsstring>
        <name>find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/findstring.h" line="12" column="5" declfile="libs/core/src/core/findstring.h" declline="12" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6d178b4db9b4d51ef3f0da748f8a62a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::find</definition>
        <argsstring>(const std::string &amp;target, const std::vector&lt; std::string &gt; &amp;searches)</argsstring>
        <name>find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>searches</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/findstring.h" line="16" column="5" declfile="libs/core/src/core/findstring.h" declline="16" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a246455882fca127f106f865c3062fffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::find</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;targets, const std::string &amp;search)</argsstring>
        <name>find</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>targets</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/findstring.h" line="20" column="5" declfile="libs/core/src/core/findstring.h" declline="20" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a941b08dbfbf2445019dbe372b694d94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::find</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;targets, const std::vector&lt; std::string &gt; &amp;searches)</argsstring>
        <name>find</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>targets</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>searches</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/findstring.h" line="24" column="5" declfile="libs/core/src/core/findstring.h" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a13a6b01b8adee3895897512e83904be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Lrud&lt; T &gt; &amp;lhs, const Lrud&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/fourway.h" line="75" column="5" bodyfile="libs/core/src/core/fourway.h" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af65b9a5494301dd70a089e3c3d9ee779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator!=</definition>
        <argsstring>(const Lrud&lt; T &gt; &amp;lhs, const Lrud&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/fourway.h" line="88" column="5" bodyfile="libs/core/src/core/fourway.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae9600a32364bf90a366c64fdf4953ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;s, const Lrud&lt; T &gt; &amp;fw)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; T &gt; &amp;</type>
          <declname>fw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/fourway.h" line="95" column="5" bodyfile="libs/core/src/core/fourway.h" bodystart="96" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5fd4380f3b4072113722593f6975494b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::pair&lt; A, B &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;A, B&gt; &gt; euphoria::core::zip</definition>
        <argsstring>(const std::vector&lt; A &gt; &amp;as, const std::vector&lt; B &gt; &amp;bs)</argsstring>
        <name>zip</name>
        <param>
          <type>const std::vector&lt; A &gt; &amp;</type>
          <declname>as</declname>
        </param>
        <param>
          <type>const std::vector&lt; B &gt; &amp;</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/functional.h" line="19" column="5" bodyfile="libs/core/src/core/functional.h" bodystart="19" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a0e95bf4592922626cf90a921f7378f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::pair&lt; A, B &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;A, B&gt; &gt; euphoria::core::zip_longest</definition>
        <argsstring>(const std::vector&lt; A &gt; &amp;as, const std::vector&lt; B &gt; &amp;bs, A da=A(), B db=B())</argsstring>
        <name>zip_longest</name>
        <param>
          <type>const std::vector&lt; A &gt; &amp;</type>
          <declname>as</declname>
        </param>
        <param>
          <type>const std::vector&lt; B &gt; &amp;</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>A</type>
          <declname>da</declname>
          <defval>A()</defval>
        </param>
        <param>
          <type>B</type>
          <declname>db</declname>
          <defval>B()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/functional.h" line="33" column="5" bodyfile="libs/core/src/core/functional.h" bodystart="34" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa1d503e85e62c8891e2a9671ed477d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::map</definition>
        <argsstring>(const std::vector&lt; F &gt; &amp;fs, C convert)</argsstring>
        <name>map</name>
        <param>
          <type>const std::vector&lt; F &gt; &amp;</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>C</type>
          <declname>convert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/functional.h" line="56" column="5" bodyfile="libs/core/src/core/functional.h" bodystart="56" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8080211f0c747d348b01bfba4e211cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::map</definition>
        <argsstring>(const std::map&lt; K, V &gt; &amp;fs, C convert)</argsstring>
        <name>map</name>
        <param>
          <type>const std::map&lt; K, V &gt; &amp;</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>C</type>
          <declname>convert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/functional.h" line="70" column="5" bodyfile="libs/core/src/core/functional.h" bodystart="70" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa575ae9ec96dad1f7e8dd661baf95d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::filter</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts, C check)</argsstring>
        <name>filter</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>C</type>
          <declname>check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/functional.h" line="86" column="5" bodyfile="libs/core/src/core/functional.h" bodystart="86" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad84eb2e3f8fd9820f9eef2bf20da6bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::all</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts, C check)</argsstring>
        <name>all</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>C</type>
          <declname>check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/functional.h" line="105" column="5" bodyfile="libs/core/src/core/functional.h" bodystart="105" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8909345be52296d11fdffc6a6cba782a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::any</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts, C check)</argsstring>
        <name>any</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>C</type>
          <declname>check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/functional.h" line="122" column="5" bodyfile="libs/core/src/core/functional.h" bodystart="122" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa26bf96e5a2737af847cc9398897dee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename R</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>R euphoria::core::fold</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts, C concat, R zero)</argsstring>
        <name>fold</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>C</type>
          <declname>concat</declname>
        </param>
        <param>
          <type>R</type>
          <declname>zero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/functional.h" line="147" column="5" bodyfile="libs/core/src/core/functional.h" bodystart="147" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1adf45fd1be7f9b08a3dd9c7e3a93cf3fc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" kindref="member">U64</ref></type>
        <definition>constexpr U64 euphoria::core::hash64</definition>
        <argsstring>(const std::string_view str, U64 hash=0xcbf29ce484222325)</argsstring>
        <name>hash64</name>
        <param>
          <type>const std::string_view</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a9a78daf2d2b390a0bac9e43d7119d916" kindref="member">U64</ref></type>
          <declname>hash</declname>
          <defval>0xcbf29ce484222325</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/hash.h" line="12" column="5" bodyfile="libs/core/src/core/hash.h" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ada6bbfb388fc1fff93817c5c1719450e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::render_retro</definition>
        <argsstring>(Image *image, U32 code)</argsstring>
        <name>render_retro</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ad68af8ee03e7b07d1a8a497b960c36a6" kindref="member">U32</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/hashgen.h" line="17" column="10" declfile="libs/core/src/core/hashgen.h" declline="17" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a251e6a58db37415119e612dcfdeb1b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::render_identicon</definition>
        <argsstring>(Image *image, U32 code)</argsstring>
        <name>render_identicon</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ad68af8ee03e7b07d1a8a497b960c36a6" kindref="member">U32</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/hashgen.h" line="23" column="10" declfile="libs/core/src/core/hashgen.h" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a84107b5cc638597719431bb208146d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::render_sprator</definition>
        <argsstring>(Image *image, U32 code, const Rgbai &amp;foreground_color={NamedColor::white}, std::optional&lt; Rgbai &gt; border_color_arg=std::nullopt, const Rgbai &amp;background_color={NamedColor::black, 0})</argsstring>
        <name>render_sprator</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ad68af8ee03e7b07d1a8a497b960c36a6" kindref="member">U32</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>foreground_color</declname>
          <defval>{<ref refid="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ead508fe45cecaf653904a0e774084bb5c" kindref="member">NamedColor::white</ref>}</defval>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &gt;</type>
          <declname>border_color_arg</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>background_color</declname>
          <defval>{<ref refid="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea1ffd9e753c8054cc61456ac7fac1ac89" kindref="member">NamedColor::black</ref>, 0}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/hashgen.h" line="30" column="5" declfile="libs/core/src/core/hashgen.h" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa9c4ef85bb93a7ec98901dfa585347a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::render_sprator</definition>
        <argsstring>(std::vector&lt; Image &gt; *images, U32 code, const Rgbai &amp;foreground_color={NamedColor::white}, std::optional&lt; Rgbai &gt; border_color_arg=std::nullopt, const Rgbai &amp;background_color={NamedColor::black, 0})</argsstring>
        <name>render_sprator</name>
        <param>
          <type>std::vector&lt; <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &gt; *</type>
          <declname>images</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ad68af8ee03e7b07d1a8a497b960c36a6" kindref="member">U32</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>foreground_color</declname>
          <defval>{<ref refid="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ead508fe45cecaf653904a0e774084bb5c" kindref="member">NamedColor::white</ref>}</defval>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &gt;</type>
          <declname>border_color_arg</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>background_color</declname>
          <defval>{<ref refid="namespaceeuphoria_1_1core_1a4e52b01e84041d220929c7bcabfaf74ea1ffd9e753c8054cc61456ac7fac1ac89" kindref="member">NamedColor::black</ref>, 0}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/hashgen.h" line="40" column="5" declfile="libs/core/src/core/hashgen.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a86a3f88f118e3dffc1b98abd4ca6e1cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1ImageLoadResult" kindref="compound">ImageLoadResult</ref></type>
        <definition>ImageLoadResult euphoria::core::load_image</definition>
        <argsstring>(vfs::FileSystem *fs, const vfs::FilePath &amp;path, AlphaLoad alpha)</argsstring>
        <name>load_image</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">vfs::FileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">vfs::FilePath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ac4d25e41b15b75088eed48e49138eea8" kindref="member">AlphaLoad</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image.h" line="167" column="5" declfile="libs/core/src/core/image.h" declline="167" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aaeb04eda915920619d9a0cd3676039ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1ImageLoadResult" kindref="compound">ImageLoadResult</ref></type>
        <definition>ImageLoadResult euphoria::core::load_image</definition>
        <argsstring>(std::shared_ptr&lt; MemoryChunk &gt; channel, const std::string &amp;path, AlphaLoad alpha)</argsstring>
        <name>load_image</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> &gt;</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ac4d25e41b15b75088eed48e49138eea8" kindref="member">AlphaLoad</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image.h" line="171" column="5" declfile="libs/core/src/core/image.h" declline="171" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1abab00ea48bcff61551c40deece2f9473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1ImageLoadResult" kindref="compound">ImageLoadResult</ref></type>
        <definition>ImageLoadResult euphoria::core::load_image</definition>
        <argsstring>(void *compressed_data, int compressed_size, const std::string &amp;path, AlphaLoad alpha)</argsstring>
        <name>load_image</name>
        <param>
          <type>void *</type>
          <declname>compressed_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>compressed_size</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ac4d25e41b15b75088eed48e49138eea8" kindref="member">AlphaLoad</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image.h" line="180" column="5" declfile="libs/core/src/core/image.h" declline="180" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1abb44190eda44b8e9c0ee1a40c7ab7832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a18429a488f4a0c6d17b4a84fe0dac703" kindref="member">Recti</ref></type>
        <definition>Recti euphoria::core::whole_image</definition>
        <argsstring>(const Image &amp;image)</argsstring>
        <name>whole_image</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="18" column="5" declfile="libs/core/src/core/image_draw.h" declline="18" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa8c3e6116cd91630a4a4c1296931ec65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::clear</definition>
        <argsstring>(Image *image, const Rgbai &amp;color)</argsstring>
        <name>clear</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="21" column="5" declfile="libs/core/src/core/image_draw.h" declline="21" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a500aab051bbe2aa82206c3f67eadd76b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::draw_rect</definition>
        <argsstring>(Image *image, const Rgbai &amp;color, const Recti &amp;rect)</argsstring>
        <name>draw_rect</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a18429a488f4a0c6d17b4a84fe0dac703" kindref="member">Recti</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="24" column="5" declfile="libs/core/src/core/image_draw.h" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad65aa7df4e71bc5802692e1f72baa7ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::draw_square</definition>
        <argsstring>(Image *image, const Rgbai &amp;color, int x, int y, int size)</argsstring>
        <name>draw_square</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="27" column="5" declfile="libs/core/src/core/image_draw.h" declline="27" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3535b4f48fb88f4b4ad2201d0fb53576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::fill_poly</definition>
        <argsstring>(Image *image, const Rgbai &amp;color, const std::vector&lt; Vec2f &gt; &amp;poly)</argsstring>
        <name>fill_poly</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &gt; &amp;</type>
          <declname>poly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="30" column="5" declfile="libs/core/src/core/image_draw.h" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a199b3ed0ba659771d0d424276d7fda24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::draw_circle</definition>
        <argsstring>(Image *image, const Rgb &amp;color, const Vec2i &amp;center, float radius, float softness=0.0f, float inner=-1.0f)</argsstring>
        <name>draw_circle</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>softness</declname>
          <defval>0.0f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>inner</declname>
          <defval>-1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="33" column="5" declfile="libs/core/src/core/image_draw.h" declline="33" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a04bd313e48f98b9cff2947a5d670d9c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::draw_line_fast</definition>
        <argsstring>(Image *image, const Rgbai &amp;color, const Vec2i &amp;from, const Vec2i &amp;to)</argsstring>
        <name>draw_line_fast</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="44" column="5" declfile="libs/core/src/core/image_draw.h" declline="44" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a057582218dd5eb126924b7df0859a7c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::draw_line_antialiased</definition>
        <argsstring>(Image *image, const Rgb &amp;color, const Vec2f &amp;from, const Vec2f &amp;to)</argsstring>
        <name>draw_line_antialiased</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="53" column="5" declfile="libs/core/src/core/image_draw.h" declline="53" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa4971f1c8f6aa03e05610ce88c1af21b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::draw_line_antialiased</definition>
        <argsstring>(Image *image, const Rgb &amp;color, const Vec2i &amp;from, const Vec2i &amp;to)</argsstring>
        <name>draw_line_antialiased</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="62" column="5" declfile="libs/core/src/core/image_draw.h" declline="62" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1acc3200d92d98b57deb004d18a3c9230c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::draw_text</definition>
        <argsstring>(Image *image, const Vec2i &amp;start_pos, const std::string &amp;text, const Rgbai &amp;color, const LoadedFont &amp;font)</argsstring>
        <name>draw_text</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>start_pos</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1LoadedFont" kindref="compound">LoadedFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="72" column="5" declfile="libs/core/src/core/image_draw.h" declline="72" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a608185de1897d8a25eaa88dee16ce32f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::paste_image</definition>
        <argsstring>(Image *dest_image, const Vec2i &amp;position, const Image &amp;source_image, BlendMode blend=BlendMode::normal, PixelsOutside clip=PixelsOutside::assert)</argsstring>
        <name>paste_image</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>dest_image</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>source_image</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03" kindref="member">BlendMode</ref></type>
          <declname>blend</declname>
          <defval><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03afea087517c26fadd409bd4b9dc642555" kindref="member">BlendMode::normal</ref></defval>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a6cca1860905cb2f50dfec8f077ad6af2" kindref="member">PixelsOutside</ref></type>
          <declname>clip</declname>
          <defval><ref refid="namespaceeuphoria_1_1core_1a6cca1860905cb2f50dfec8f077ad6af2ae44e4612f62d2fb8f8738bab118a9850" kindref="member">PixelsOutside::assert</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="88" column="5" declfile="libs/core/src/core/image_draw.h" declline="88" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a1e61c56424b44be29ed20a295baf05b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::draw_arrow</definition>
        <argsstring>(Image *image, const Vec2f &amp;from, const Vec2f &amp;to, const Rgbai &amp;color, float size)</argsstring>
        <name>draw_arrow</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>float</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_draw.h" line="103" column="5" declfile="libs/core/src/core/image_draw.h" declline="103" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aeb53701e6240fd0e150af331cd565402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; char &gt;</type>
        <definition>Table&lt;char&gt; euphoria::core::image_to_string_table</definition>
        <argsstring>(const Image &amp;img, const std::vector&lt; ImageMapAction &gt; &amp;map)</argsstring>
        <name>image_to_string_table</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1core_1_1ImageMapAction" kindref="compound">ImageMapAction</ref> &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_to_text.h" line="26" column="5" declfile="libs/core/src/core/image_to_text.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a17d9b8f00b65fcbac34c5ffa5a4d9b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; char &gt;</type>
        <definition>Table&lt;char&gt; euphoria::core::image_to_string_table_exact</definition>
        <argsstring>(const Image &amp;img, const std::vector&lt; ImageMapAction &gt; &amp;map, char missing)</argsstring>
        <name>image_to_string_table_exact</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1core_1_1ImageMapAction" kindref="compound">ImageMapAction</ref> &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>char</type>
          <declname>missing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_to_text.h" line="34" column="5" declfile="libs/core/src/core/image_to_text.h" declline="34" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a4ad09ea6e8b47415206027571769a62a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; char &gt;</type>
        <definition>Table&lt;char&gt; euphoria::core::image_to_string_table</definition>
        <argsstring>(const Image &amp;img, bool shorter, Grayscale grayscale=Grayscale::r)</argsstring>
        <name>image_to_string_table</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shorter</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124" kindref="member">Grayscale</ref></type>
          <declname>grayscale</declname>
          <defval><ref refid="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124a4b43b0aee35624cd95b910189b3dc231" kindref="member">Grayscale::r</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_to_text.h" line="42" column="5" declfile="libs/core/src/core/image_to_text.h" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6c52056b0c64c8d1b295aedcff7a391e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::to_strings</definition>
        <argsstring>(const Table&lt; char &gt; &amp;t)</argsstring>
        <name>to_strings</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; char &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/image_to_text.h" line="46" column="5" declfile="libs/core/src/core/image_to_text.h" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6ef9c9912198e8e8eab88b8c987f4932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref></type>
        <definition>Rgbai euphoria::core::make_grayscale</definition>
        <argsstring>(Rgbai color, Grayscale grayscale)</argsstring>
        <name>make_grayscale</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124" kindref="member">Grayscale</ref></type>
          <declname>grayscale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/imagefilters.h" line="26" column="5" declfile="libs/core/src/core/imagefilters.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3de6fdc0b72168b33c45010f051d0b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::make_grayscale</definition>
        <argsstring>(Image *image, Grayscale grayscale)</argsstring>
        <name>make_grayscale</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a352b811085853f7ec220af1a5b92a124" kindref="member">Grayscale</ref></type>
          <declname>grayscale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/imagefilters.h" line="29" column="5" declfile="libs/core/src/core/imagefilters.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aad1096fbf4605a44e764a57bdaf67ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::match_palette</definition>
        <argsstring>(Image *image, const Palette &amp;palette)</argsstring>
        <name>match_palette</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Palette" kindref="compound">Palette</ref> &amp;</type>
          <declname>palette</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/imagefilters.h" line="32" column="5" declfile="libs/core/src/core/imagefilters.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae37b8520a214afe21beebc2e51e14f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::match_palette_dither</definition>
        <argsstring>(Image *image, const Palette &amp;palette)</argsstring>
        <name>match_palette_dither</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Palette" kindref="compound">Palette</ref> &amp;</type>
          <declname>palette</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/imagefilters.h" line="35" column="5" declfile="libs/core/src/core/imagefilters.h" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6b17643ebbc9c7b27f9e365125eb0752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::edge_detection</definition>
        <argsstring>(Image *image, float r)</argsstring>
        <name>edge_detection</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/imagefilters.h" line="38" column="5" declfile="libs/core/src/core/imagefilters.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7bbbbeb0b4fc47828ebd7e23a5927e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::color_detection</definition>
        <argsstring>(Image *image, Rgb color, float r)</argsstring>
        <name>color_detection</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/imagefilters.h" line="41" column="5" declfile="libs/core/src/core/imagefilters.h" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aaf5b6c9c717b2143949a292373f9df18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::change_brightness</definition>
        <argsstring>(Image *image, int change)</argsstring>
        <name>change_brightness</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>change</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/imagefilters.h" line="44" column="5" declfile="libs/core/src/core/imagefilters.h" declline="44" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a67c9a72e391bae0d9094a6b27bcf6076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::change_contrast</definition>
        <argsstring>(Image *image, const Angle &amp;contrast)</argsstring>
        <name>change_contrast</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>contrast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/imagefilters.h" line="47" column="5" declfile="libs/core/src/core/imagefilters.h" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6306c16f06a2792263ef05481843dbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SortFunc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void euphoria::core::insertion_sort</definition>
        <argsstring>(std::vector&lt; T &gt; *pointer_to_array, SortFunc sort_func)</argsstring>
        <name>insertion_sort</name>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>pointer_to_array</declname>
        </param>
        <param>
          <type>SortFunc</type>
          <declname>sort_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/insertionsort.h" line="10" column="5" bodyfile="libs/core/src/core/insertionsort.h" bodystart="10" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a67aaf3fa06463bc87eaefbe131db26fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SortFunc</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::insertion_sort</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;array, SortFunc sort_func)</argsstring>
        <name>insertion_sort</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>SortFunc</type>
          <declname>sort_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/insertionsort.h" line="30" column="5" bodyfile="libs/core/src/core/insertionsort.h" bodystart="30" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a149d662d430c9d874edaba879aace453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int euphoria::core::default_insertion_sort</definition>
        <argsstring>(const T &amp;lhs, const T &amp;rhs)</argsstring>
        <name>default_insertion_sort</name>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/insertionsort.h" line="39" column="5" bodyfile="libs/core/src/core/insertionsort.h" bodystart="39" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae55dad512c63927e2286a8a7684ca3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::insertion_sort</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;array)</argsstring>
        <name>insertion_sort</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/insertionsort.h" line="50" column="5" bodyfile="libs/core/src/core/insertionsort.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a66ebd1e7ded6a99716624029fdc087d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Ray3AabbResult" kindref="compound">Ray3AabbResult</ref></type>
        <definition>Ray3AabbResult euphoria::core::get_intersection</definition>
        <argsstring>(const UnitRay3f &amp;r, const Aabb &amp;aabb)</argsstring>
        <name>get_intersection</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1UnitRay3f" kindref="compound">UnitRay3f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Aabb" kindref="compound">Aabb</ref> &amp;</type>
          <declname>aabb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="31" column="5" declfile="libs/core/src/core/intersection.h" declline="31" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aef7816bf0108632fc69edf5bb98b3d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::get_intersection</definition>
        <argsstring>(const UnitRay3f &amp;r, const Plane &amp;p)</argsstring>
        <name>get_intersection</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1UnitRay3f" kindref="compound">UnitRay3f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Plane" kindref="compound">Plane</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="34" column="5" declfile="libs/core/src/core/intersection.h" declline="34" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa77a81d1dbc4f113feaa49e9ea757ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Ray2Ray2Result" kindref="compound">Ray2Ray2Result</ref></type>
        <definition>Ray2Ray2Result euphoria::core::get_intersection</definition>
        <argsstring>(const Ray2f &amp;lhs, const Ray2f &amp;rhs)</argsstring>
        <name>get_intersection</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Ray2f" kindref="compound">Ray2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Ray2f" kindref="compound">Ray2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="42" column="5" declfile="libs/core/src/core/intersection.h" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7af820b13dbbc6a841950d19eb984b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::get_distance_between</definition>
        <argsstring>(const Plane &amp;plane, const Vec3f &amp;p)</argsstring>
        <name>get_distance_between</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Plane" kindref="compound">Plane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="50" column="5" declfile="libs/core/src/core/intersection.h" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af97832fb7c39508780ccc448e70f1d11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref></type>
        <definition>Vec3f euphoria::core::get_closest_point</definition>
        <argsstring>(const Plane &amp;plane, const Vec3f &amp;p)</argsstring>
        <name>get_closest_point</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Plane" kindref="compound">Plane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="53" column="5" declfile="libs/core/src/core/intersection.h" declline="53" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a1d9eb5eed70a4e8034757289775b2569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::get_distance_between</definition>
        <argsstring>(const UnitRay3f &amp;ray, const Vec3f &amp;p)</argsstring>
        <name>get_distance_between</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1UnitRay3f" kindref="compound">UnitRay3f</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="61" column="5" declfile="libs/core/src/core/intersection.h" declline="61" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac3396ee6cad9568595f691635d947bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref></type>
        <definition>Vec3f euphoria::core::get_closest_point</definition>
        <argsstring>(const UnitRay3f &amp;ray, const Vec3f &amp;c)</argsstring>
        <name>get_closest_point</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1UnitRay3f" kindref="compound">UnitRay3f</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="64" column="5" declfile="libs/core/src/core/intersection.h" declline="64" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a85706fe3216c3e13ae3ad7f5f579c8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::get_intersection</definition>
        <argsstring>(const Sphere &amp;lhs, const Vec3f &amp;lhs_center, const Sphere &amp;rhs, const Vec3f &amp;rhs_center)</argsstring>
        <name>get_intersection</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Sphere" kindref="compound">Sphere</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>lhs_center</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Sphere" kindref="compound">Sphere</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>rhs_center</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="72" column="5" declfile="libs/core/src/core/intersection.h" declline="72" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac9f403ee4099ca4b9d4c3bfe876e693a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::contains_point</definition>
        <argsstring>(const Sphere &amp;sphere, const Vec3f &amp;sphere_center, const Vec3f &amp;point)</argsstring>
        <name>contains_point</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Sphere" kindref="compound">Sphere</ref> &amp;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>sphere_center</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="80" column="5" declfile="libs/core/src/core/intersection.h" declline="80" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8831761cb994ab0e25d016d8c6a3c43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref></type>
        <definition>Vec3f euphoria::core::get_closest_point</definition>
        <argsstring>(const Sphere &amp;sphere, const Vec3f &amp;sphere_center, const Vec3f &amp;point)</argsstring>
        <name>get_closest_point</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Sphere" kindref="compound">Sphere</ref> &amp;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>sphere_center</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="83" column="5" declfile="libs/core/src/core/intersection.h" declline="83" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae31a36613c10c5b65c2d606515836425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::get_intersection</definition>
        <argsstring>(const UnitRay3f &amp;r, const Sphere &amp;sphere, const Vec3f &amp;sphere_center)</argsstring>
        <name>get_intersection</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1UnitRay3f" kindref="compound">UnitRay3f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Sphere" kindref="compound">Sphere</ref> &amp;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>sphere_center</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="92" column="5" declfile="libs/core/src/core/intersection.h" declline="92" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7143d07ffb51cc9a6535af40b6949896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::contains_point</definition>
        <argsstring>(const Aabb &amp;aabb, const Vec3f &amp;point)</argsstring>
        <name>contains_point</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Aabb" kindref="compound">Aabb</ref> &amp;</type>
          <declname>aabb</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="100" column="5" declfile="libs/core/src/core/intersection.h" declline="100" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a50d06f88689882e5a72962e0bc02ae29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref></type>
        <definition>Vec3f euphoria::core::get_closest_point</definition>
        <argsstring>(const Aabb &amp;aabb, const Vec3f &amp;point)</argsstring>
        <name>get_closest_point</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Aabb" kindref="compound">Aabb</ref> &amp;</type>
          <declname>aabb</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="103" column="5" declfile="libs/core/src/core/intersection.h" declline="103" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7544c0bf0fafbc6c716eff245324739c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::is_point_in_triangle</definition>
        <argsstring>(const Vec2f &amp;a, const Vec2f &amp;b, const Vec2f &amp;c, const Vec2f &amp;p)</argsstring>
        <name>is_point_in_triangle</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="111" column="5" declfile="libs/core/src/core/intersection.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a9aa05d9c9d86f5f927d010c9359e810c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; float &gt;</type>
        <definition>std::optional&lt;float&gt; euphoria::core::get_intersection_ray_triangle</definition>
        <argsstring>(const UnitRay3f &amp;ray, const Vec3f &amp;v0, const Vec3f &amp;v1, const Vec3f &amp;v2)</argsstring>
        <name>get_intersection_ray_triangle</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1UnitRay3f" kindref="compound">UnitRay3f</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/intersection.h" line="120" column="5" declfile="libs/core/src/core/intersection.h" declline="120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7b2f2246b3a47e7b0f4a2dbda5cf9411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1StepIteratorCreator" kindref="compound">StepIteratorCreator</ref>&lt; T &gt;</type>
        <definition>StepIteratorCreator&lt;T&gt; euphoria::core::iterate</definition>
        <argsstring>(const T from, T to, T step=1)</argsstring>
        <name>iterate</name>
        <param>
          <type>const T</type>
          <declname>from</declname>
        </param>
        <param>
          <type>T</type>
          <declname>to</declname>
        </param>
        <param>
          <type>T</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/iterate.h" line="76" column="5" bodyfile="libs/core/src/core/iterate.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af24d04d4cc7e9dadc73b1412e11952cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::to_string</definition>
        <argsstring>(MouseButton button)</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeac" kindref="member">MouseButton</ref></type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/key.h" line="19" column="5" declfile="libs/core/src/core/key.h" declline="19" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae7594444660871b56e1ab43909ba46f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1aca4be613f8530e618686f73fdb00eeac" kindref="member">MouseButton</ref></type>
        <definition>MouseButton euphoria::core::to_mouse_button</definition>
        <argsstring>(const std::string &amp;button)</argsstring>
        <name>to_mouse_button</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/key.h" line="22" column="5" declfile="libs/core/src/core/key.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aeb8a5e9218eeb98509a8d24619da86c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::to_string</definition>
        <argsstring>(Key k)</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710" kindref="member">Key</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/key.h" line="267" column="5" declfile="libs/core/src/core/key.h" declline="267" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae0d12838da3415153c4145603cb74456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710" kindref="member">Key</ref></type>
        <definition>Key euphoria::core::to_key</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>to_key</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/key.h" line="270" column="5" declfile="libs/core/src/core/key.h" declline="270" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2d796cf9b863e29568d6250a2f6560a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void euphoria::core::knuth_shuffle</definition>
        <argsstring>(std::vector&lt; T &gt; *v, Random *r)</argsstring>
        <name>knuth_shuffle</name>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/knuthshuffle.h" line="18" column="5" bodyfile="libs/core/src/core/knuthshuffle.h" bodystart="18" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a043050e78422181bbad906e284227577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1LoadedFont" kindref="compound">LoadedFont</ref></type>
        <definition>LoadedFont euphoria::core::load_characters_from_builtin8</definition>
        <argsstring>()</argsstring>
        <name>load_characters_from_builtin8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/loadedfont.h" line="69" column="5" declfile="libs/core/src/core/loadedfont.h" declline="69" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a860dc8b5aeb88f3e1bb594045601b406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1LoadedFont" kindref="compound">LoadedFont</ref></type>
        <definition>LoadedFont euphoria::core::load_characters_from_builtin13</definition>
        <argsstring>()</argsstring>
        <name>load_characters_from_builtin13</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/loadedfont.h" line="73" column="5" declfile="libs/core/src/core/loadedfont.h" declline="73" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6330fde1a94121abe5d2f6482bf7bfe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1LoadedFont" kindref="compound">LoadedFont</ref></type>
        <definition>LoadedFont euphoria::core::get_characters_from_font</definition>
        <argsstring>(vfs::FileSystem *file_system, const vfs::FilePath &amp;font_file, int font_size, const std::string &amp;chars)</argsstring>
        <name>get_characters_from_font</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">vfs::FileSystem</ref> *</type>
          <declname>file_system</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">vfs::FilePath</ref> &amp;</type>
          <declname>font_file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>font_size</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/loadedfont.h" line="77" column="5" declfile="libs/core/src/core/loadedfont.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a87d203b00f5d23a7b322936aa0b54d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1LoadedFont" kindref="compound">LoadedFont</ref></type>
        <definition>LoadedFont euphoria::core::get_characters_from_font</definition>
        <argsstring>(std::shared_ptr&lt; MemoryChunk &gt; file_memory, int font_size, const std::string &amp;chars)</argsstring>
        <name>get_characters_from_font</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> &gt;</type>
          <declname>file_memory</declname>
        </param>
        <param>
          <type>int</type>
          <declname>font_size</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/loadedfont.h" line="87" column="5" declfile="libs/core/src/core/loadedfont.h" declline="87" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a519d1ce1780e3e930f9b97a97488f748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1LoadedFont" kindref="compound">LoadedFont</ref></type>
        <definition>LoadedFont euphoria::core::get_characters_from_single_image</definition>
        <argsstring>(vfs::FileSystem *fs, const vfs::FilePath &amp;image_file, const std::string &amp;image_alias, float image_scale, float image_bearing_x, float image_bearing_y, float image_advance)</argsstring>
        <name>get_characters_from_single_image</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">vfs::FileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">vfs::FilePath</ref> &amp;</type>
          <declname>image_file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_alias</declname>
        </param>
        <param>
          <type>float</type>
          <declname>image_scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>image_bearing_x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>image_bearing_y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>image_advance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/loadedfont.h" line="95" column="5" declfile="libs/core/src/core/loadedfont.h" declline="95" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5531443ba854f0eccaf25c5d391cdbbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1LoadedFont" kindref="compound">LoadedFont</ref></type>
        <definition>LoadedFont euphoria::core::get_characters_from_single_image</definition>
        <argsstring>(const Image &amp;image, const std::string &amp;image_alias, float image_scale, float image_bearing_x, float image_bearing_y, float image_advance)</argsstring>
        <name>get_characters_from_single_image</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_alias</declname>
        </param>
        <param>
          <type>float</type>
          <declname>image_scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>image_bearing_x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>image_bearing_y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>image_advance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/loadedfont.h" line="107" column="5" declfile="libs/core/src/core/loadedfont.h" declline="107" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1abb6eca25cc1d1dd5219b1fd597539a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Mat2&lt; T &gt; &amp;lhs, const Mat2&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat2.h" line="188" column="5" bodyfile="libs/core/src/core/mat2.h" bodystart="188" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aabefbc227894d2e976542df4a90beb02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Mat2&lt; T &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat2.h" line="198" column="5" bodyfile="libs/core/src/core/mat2.h" bodystart="199" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab532ef65b29ed597d5423b53eaa28fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt;</type>
        <definition>Mat2&lt;T&gt; euphoria::core::operator+</definition>
        <argsstring>(const Mat2&lt; T &gt; &amp;lhs, const Mat2&lt; T &gt; rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat2.h" line="210" column="5" bodyfile="libs/core/src/core/mat2.h" bodystart="210" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa5f07c3a9b6b60aa524d1fb163e8b314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt;</type>
        <definition>Mat2&lt;T&gt; euphoria::core::operator-</definition>
        <argsstring>(const Mat2&lt; T &gt; &amp;lhs, const Mat2&lt; T &gt; rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat2.h" line="219" column="5" bodyfile="libs/core/src/core/mat2.h" bodystart="219" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae1d81ef40f36f74a0a2e6b7441c7adff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt;</type>
        <definition>Mat2&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Mat2&lt; T &gt; &amp;lhs, const Mat2&lt; T &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat2.h" line="227" column="10" bodyfile="libs/core/src/core/mat2.h" bodystart="227" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a09c4aeeb5b44f9dea6daec0505bb07cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
        <definition>Vec2&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Mat2&lt; T &gt; &amp;lhs, const Vec2&lt; T &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat2" kindref="compound">Mat2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat2.h" line="240" column="10" bodyfile="libs/core/src/core/mat2.h" bodystart="240" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a14a93490892bf279d1e84732a0bad6ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Mat3&lt; T &gt; &amp;lhs, const Mat3&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="333" column="5" bodyfile="libs/core/src/core/mat3.h" bodystart="333" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab0ef78a55f1205ad317bb03fc2b1381b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Mat3&lt; T &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="343" column="5" bodyfile="libs/core/src/core/mat3.h" bodystart="344" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af34a70b82e1dc0c4f8aaf4f9daf3b8fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt;</type>
        <definition>Mat3&lt;T&gt; euphoria::core::operator+</definition>
        <argsstring>(const Mat3&lt; T &gt; &amp;lhs, const Mat3&lt; T &gt; rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="355" column="5" bodyfile="libs/core/src/core/mat3.h" bodystart="355" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a9ccd8b1d95394ceae534e20fd2b9a6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt;</type>
        <definition>Mat3&lt;T&gt; euphoria::core::operator-</definition>
        <argsstring>(const Mat3&lt; T &gt; &amp;lhs, const Mat3&lt; T &gt; rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="364" column="5" bodyfile="libs/core/src/core/mat3.h" bodystart="364" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa3a293e288fb13d59e276fd528248dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt;</type>
        <definition>Mat3&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Mat3&lt; T &gt; &amp;lhs, const Mat3&lt; T &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="372" column="10" bodyfile="libs/core/src/core/mat3.h" bodystart="372" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad6f2c81c91923a23f7eeb93262580a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Mat3&lt; T &gt; &amp;lhs, const Vec3&lt; T &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat3" kindref="compound">Mat3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="386" column="10" bodyfile="libs/core/src/core/mat3.h" bodystart="386" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3721b570fa732793c31119a472847fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Mat4&lt; T &gt; &amp;lhs, const Mat4&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat4.h" line="575" column="5" bodyfile="libs/core/src/core/mat4.h" bodystart="575" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab2428ca7b710fc1e944eabebb579625c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Mat4&lt; T &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat4.h" line="586" column="5" bodyfile="libs/core/src/core/mat4.h" bodystart="587" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1affa348fe01ca96848777a8e74e2adb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt;</type>
        <definition>Mat4&lt;T&gt; euphoria::core::operator+</definition>
        <argsstring>(const Mat4&lt; T &gt; &amp;lhs, const Mat4&lt; T &gt; rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat4.h" line="600" column="5" bodyfile="libs/core/src/core/mat4.h" bodystart="600" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a25f4919ed642fcc9c397246c0a810583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt;</type>
        <definition>Mat4&lt;T&gt; euphoria::core::operator-</definition>
        <argsstring>(const Mat4&lt; T &gt; &amp;lhs, const Mat4&lt; T &gt; rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat4.h" line="609" column="5" bodyfile="libs/core/src/core/mat4.h" bodystart="609" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6a7ac036536b7cb3f97115b43b4d7bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt;</type>
        <definition>Mat4&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Mat4&lt; T &gt; &amp;lhs, const Mat4&lt; T &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat4.h" line="617" column="10" bodyfile="libs/core/src/core/mat4.h" bodystart="617" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa881a70003e7cf9deb15491bafdf3102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; T &gt;</type>
        <definition>Vec4&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Mat4&lt; T &gt; &amp;lhs, const Vec4&lt; T &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Mat4" kindref="compound">Mat4</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat4.h" line="633" column="10" bodyfile="libs/core/src/core/mat4.h" bodystart="633" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae78195f4430b477e0cefaaee20b768eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::copy_to_memory</definition>
        <argsstring>(MemoryChunk *memory, const void *src)</argsstring>
        <name>copy_to_memory</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/memorychunk.h" line="35" column="5" declfile="libs/core/src/core/memorychunk.h" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3a226038042a9d9ca05360fc541606e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> &gt;</type>
        <definition>std::shared_ptr&lt;MemoryChunk&gt; euphoria::core::create_memory_chunk_from_string</definition>
        <argsstring>(const std::string &amp;content)</argsstring>
        <name>create_memory_chunk_from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>content</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/memorychunk.h" line="38" column="5" declfile="libs/core/src/core/memorychunk.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a56e30a10f8a1679c99b3e601fd752a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>count</declname>
            <defname>count</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TExtract</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::array&lt; T, count &gt;, std::array&lt; T, count &gt; &gt;</type>
        <definition>std::pair&lt;std::array&lt;T, count&gt;, std::array&lt;T, count&gt; &gt; euphoria::core::find_min_max_ranges</definition>
        <argsstring>(const TContainer &amp;ts, TExtract extract)</argsstring>
        <name>find_min_max_ranges</name>
        <param>
          <type>const TContainer &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>TExtract</type>
          <declname>extract</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/minmax.h" line="19" column="5" bodyfile="libs/core/src/core/minmax.h" bodystart="20" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7bb28f8df460791773966a1b399227c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TExtract</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt;</type>
        <definition>Range&lt;T&gt; euphoria::core::find_min_max_range</definition>
        <argsstring>(const TContainer &amp;ts, TExtract extract)</argsstring>
        <name>find_min_max_range</name>
        <param>
          <type>const TContainer &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>TExtract</type>
          <declname>extract</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/minmax.h" line="55" column="5" bodyfile="libs/core/src/core/minmax.h" bodystart="56" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a12deb43b5899968f0f0c1ef6e8d73803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TMinFunction</type>
          </param>
          <param>
            <type>typename TMaxFunction</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; T, T &gt;</type>
        <definition>std::tuple&lt;T, T&gt; euphoria::core::find_min_max</definition>
        <argsstring>(const TContainer &amp;ts, TMinFunction min_function, TMaxFunction max_function)</argsstring>
        <name>find_min_max</name>
        <param>
          <type>const TContainer &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>TMinFunction</type>
          <declname>min_function</declname>
        </param>
        <param>
          <type>TMaxFunction</type>
          <declname>max_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/minmax.h" line="86" column="5" bodyfile="libs/core/src/core/minmax.h" bodystart="87" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1acc91499be6de778d1a4e8abe24d0e858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int euphoria::core::default_sort_func</definition>
        <argsstring>(T lhs, T rhs)</argsstring>
        <name>default_sort_func</name>
        <param>
          <type>T</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/multisort.h" line="59" column="5" bodyfile="libs/core/src/core/multisort.h" bodystart="59" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8138382bac0335c522c6eed08955ec71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Self</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; euphoria::core::get_sorted_indices</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, const SortBuilder&lt; T, Self &gt; &amp;builder)</argsstring>
        <name>get_sorted_indices</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1SortBuilder" kindref="compound">SortBuilder</ref>&lt; T, Self &gt; &amp;</type>
          <declname>builder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/multisort.h" line="109" column="5" bodyfile="libs/core/src/core/multisort.h" bodystart="110" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7943dc45ee17fd6aef61d059a86622a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="namespaceeuphoria_1_1core_1a2dc87cb41fd6236adfbaee88b2746bf0" kindref="member">TextLine</ref> &gt;</type>
        <definition>std::optional&lt;TextLine&gt; euphoria::core::parse_line</definition>
        <argsstring>(const std::string &amp;line)</argsstring>
        <name>parse_line</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/nlp_line.h" line="15" column="1" declfile="libs/core/src/core/nlp_line.h" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac48fae5c70620f4c741c9787c8e72746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::line_to_string</definition>
        <argsstring>(const TextLine &amp;s)</argsstring>
        <name>line_to_string</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a2dc87cb41fd6236adfbaee88b2746bf0" kindref="member">TextLine</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/nlp_line.h" line="19" column="1" declfile="libs/core/src/core/nlp_line.h" declline="19" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac656cee1af98f8e6d4131580286e0f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::parse_sentences</definition>
        <argsstring>(std::istream &amp;data, OnSentenceFunction on_sentence)</argsstring>
        <name>parse_sentences</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a1c3acd5fd095ea1e72c187b4b0c955bf" kindref="member">OnSentenceFunction</ref></type>
          <declname>on_sentence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/nlp_sentence.h" line="16" column="1" declfile="libs/core/src/core/nlp_sentence.h" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a98a801cd773a76be9b8867d4c8f6c831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::sentence_to_string</definition>
        <argsstring>(const TextSentence &amp;s)</argsstring>
        <name>sentence_to_string</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a648a0683fcf7056c08734142a24e653a" kindref="member">TextSentence</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/nlp_sentence.h" line="20" column="1" declfile="libs/core/src/core/nlp_sentence.h" declline="20" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3b5ec1646e51d84c9084b4113f43ef28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::is_equal</definition>
        <argsstring>(float lhs, float rhs)</argsstring>
        <name>is_equal</name>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="11" column="5" declfile="libs/core/src/core/numeric.h" declline="11" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a70d5cb59723e58915e90c173e8618d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::is_equal</definition>
        <argsstring>(int lhs, int rhs)</argsstring>
        <name>is_equal</name>
        <param>
          <type>int</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="14" column="5" declfile="libs/core/src/core/numeric.h" declline="14" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aba7fbc4aa0499937017225ce6b63ba0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::is_zero</definition>
        <argsstring>(float r)</argsstring>
        <name>is_zero</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="17" column="5" declfile="libs/core/src/core/numeric.h" declline="17" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3605767cd8477e6fa9ec23ca15fa96b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::is_zero</definition>
        <argsstring>(int r)</argsstring>
        <name>is_zero</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="20" column="5" declfile="libs/core/src/core/numeric.h" declline="20" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aec3c47a3f8b9336ba15eaa89db1982be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::zero_or_value</definition>
        <argsstring>(float r)</argsstring>
        <name>zero_or_value</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="23" column="5" declfile="libs/core/src/core/numeric.h" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1acbaacc58d40afc47968339f134a0ea0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::floor</definition>
        <argsstring>(float v)</argsstring>
        <name>floor</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="26" column="5" declfile="libs/core/src/core/numeric.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a00b15a2f1db1f97770a458448ae7cec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::ceil</definition>
        <argsstring>(float v)</argsstring>
        <name>ceil</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="29" column="5" declfile="libs/core/src/core/numeric.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af36e4ad79d84cf16472624021c88ed17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::floor_to_int</definition>
        <argsstring>(float v)</argsstring>
        <name>floor_to_int</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="32" column="5" declfile="libs/core/src/core/numeric.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a44c1a9ee9e795ae0eaa3796b16b7862e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::ceil_to_int</definition>
        <argsstring>(float v)</argsstring>
        <name>ceil_to_int</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="35" column="5" declfile="libs/core/src/core/numeric.h" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a0ffa13d1af7f36f079d8fda98c6931ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::get_sign</definition>
        <argsstring>(float r)</argsstring>
        <name>get_sign</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Calculates the sign as a positive or a negative int. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if r is greater than 0, -1 if not. </para>
</simplesect>
<simplesect kind="see"><para>Abs() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="43" column="5" declfile="libs/core/src/core/numeric.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6f61d8c94986676f51cca21cf21ac1e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::get_sign</definition>
        <argsstring>(int r)</argsstring>
        <name>get_sign</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="47" column="5" declfile="libs/core/src/core/numeric.h" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8fe5ef3d9fb2c3b1748a6f65ca8a7f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::get_sign</definition>
        <argsstring>(bool b)</argsstring>
        <name>get_sign</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns either 1 or -1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="52" column="5" declfile="libs/core/src/core/numeric.h" declline="52" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2245554676150e4027290df7d90fd16f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::lerp</definition>
        <argsstring>(float f, float scale, float t)</argsstring>
        <name>lerp</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="56" column="5" declfile="libs/core/src/core/numeric.h" declline="56" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a78f34640ca7191ab9a49aaba5e3806c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::curve</definition>
        <argsstring>(float new_value, float old_value, float smoothing_value)</argsstring>
        <name>curve</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>float</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>float</type>
          <declname>smoothing_value</declname>
        </param>
        <briefdescription>
<para>Performs a single interpolating step to transform a old value to a new value. </para>
        </briefdescription>
        <detaileddescription>
<para>Larger smoothing values result in a smoother but less resposive path.</para>
<para>Example: <programlisting><codeline><highlight class="normal"><sp/>mousex<sp/>=<sp/>Curve(<sp/>(<sp/>MousePos.X<sp/>-<sp/>OldMousePos.X<sp/>)<sp/>*<sp/>Sensitivity(),<sp/>mousex,<sp/>6</highlight></codeline>
<codeline><highlight class="normal">);<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_value</parametername>
</parameternamelist>
<parameterdescription>
<para>is the target value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_value</parametername>
</parameternamelist>
<parameterdescription>
<para>is the current value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>smoothing_value</parametername>
</parameternamelist>
<parameterdescription>
<para>is the smoothing value &gt; 0, the lower, the less smooth</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The smoothed result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="72" column="5" declfile="libs/core/src/core/numeric.h" declline="72" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a4821977ac1f1f9d3e5b994559acbb21f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::square</definition>
        <argsstring>(float r)</argsstring>
        <name>square</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="75" column="5" declfile="libs/core/src/core/numeric.h" declline="75" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6b10a264309b93b8bc4aa26bbf8c641f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::sqrt</definition>
        <argsstring>(float r)</argsstring>
        <name>sqrt</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="78" column="5" declfile="libs/core/src/core/numeric.h" declline="78" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8f6ae6403fb2a65953bc6a618d88114b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::log</definition>
        <argsstring>(float r)</argsstring>
        <name>log</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="81" column="5" declfile="libs/core/src/core/numeric.h" declline="81" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a146bcc37f072fee6de23ed22916da0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::abs</definition>
        <argsstring>(float r)</argsstring>
        <name>abs</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="84" column="5" declfile="libs/core/src/core/numeric.h" declline="84" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a4bb4c38ba24ee6727e11503a6ff0c9a5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T euphoria::core::min</definition>
        <argsstring>(T lhs, T rhs)</argsstring>
        <name>min</name>
        <param>
          <type>T</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="88" column="5" bodyfile="libs/core/src/core/numeric.h" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ace73dc23f7e3bd11ee16bc5b458a702c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T euphoria::core::max</definition>
        <argsstring>(T lhs, T rhs)</argsstring>
        <name>max</name>
        <param>
          <type>T</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="101" column="5" bodyfile="libs/core/src/core/numeric.h" bodystart="101" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a942f6f2858467cd2de32fa5fc347c213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::mod</definition>
        <argsstring>(float numer, float denumer)</argsstring>
        <name>mod</name>
        <param>
          <type>float</type>
          <declname>numer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>denumer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="112" column="5" declfile="libs/core/src/core/numeric.h" declline="112" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a60f883bdcc98f0f0237fd403c3f3ae25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::is_within_inclusive_as_int</definition>
        <argsstring>(int min, int c, int max)</argsstring>
        <name>is_within_inclusive_as_int</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="115" column="5" declfile="libs/core/src/core/numeric.h" declline="115" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a09c4dfcfe6872d0474ba7d127d5f9b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::round</definition>
        <argsstring>(float num, float gran)</argsstring>
        <name>round</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gran</declname>
        </param>
        <briefdescription>
<para>Rounds a value to the nearest nice value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the granularity is 1 the function rounds to the closest integer, at .5 the closest half integer, at 2 even integers etc... <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>the number to round </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gran</parametername>
</parameternamelist>
<parameterdescription>
<para>the granularity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="124" column="5" declfile="libs/core/src/core/numeric.h" declline="124" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af734a12e521a9f9dc58f5e8be470793c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::get_default_if_close_to_zero</definition>
        <argsstring>(T value, T def, T epsilon)</argsstring>
        <name>get_default_if_close_to_zero</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T</type>
          <declname>def</declname>
        </param>
        <param>
          <type>T</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="131" column="5" bodyfile="libs/core/src/core/numeric.h" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aaf60d36e106a25d49f67bdca13aa96ee" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool euphoria::core::is_each_nth</definition>
        <argsstring>(I i, I each)</argsstring>
        <name>is_each_nth</name>
        <param>
          <type>I</type>
          <declname>i</declname>
        </param>
        <param>
          <type>I</type>
          <declname>each</declname>
        </param>
        <briefdescription>
<para>returns true for a index each Nth loop. </para>
        </briefdescription>
        <detaileddescription>
<para>pass zero to always return false useful for example adding a newline each 10th or 15th line </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numeric.h" line="141" column="5" bodyfile="libs/core/src/core/numeric.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5efb4886bf4b2e21f2f7bdcf49e7231d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; int &gt;</type>
        <definition>std::optional&lt;int&gt; euphoria::core::locale_parse_int</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>locale_parse_int</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numparse.h" line="9" column="15" declfile="libs/core/src/core/numparse.h" declline="9" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a21ea25701ef8a947d4738033383dd42d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; float &gt;</type>
        <definition>std::optional&lt;float&gt; euphoria::core::locale_parse_float</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>locale_parse_float</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numparse.h" line="10" column="15" declfile="libs/core/src/core/numparse.h" declline="10" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a4fc591357b645a2b830d136b4b60c40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; bool &gt;</type>
        <definition>std::optional&lt;bool&gt; euphoria::core::locale_parse_bool</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>locale_parse_bool</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numparse.h" line="11" column="15" declfile="libs/core/src/core/numparse.h" declline="11" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a836a8e75ad9a44c4476a4cca41e7ab2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; T &gt;</type>
        <definition>std::optional&lt;T&gt; euphoria::core::locale_parse_generic</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>locale_parse_generic</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/numparse.h" line="17" column="1" declfile="libs/core/src/core/numparse.h" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afbe85ae408075d8d9883a2478d1e73e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::get_current_directory</definition>
        <argsstring>()</argsstring>
        <name>get_current_directory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/os.h" line="10" column="5" declfile="libs/core/src/core/os.h" declline="10" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a84c02039437a0197f6960cd84438f8f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1DirectoryListing" kindref="compound">DirectoryListing</ref></type>
        <definition>DirectoryListing euphoria::core::list_directory</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>list_directory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/os.h" line="21" column="5" declfile="libs/core/src/core/os.h" declline="21" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab81ad001decb30501e6e7db63c588f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::ends_with</definition>
        <argsstring>(const std::string &amp;str, char c)</argsstring>
        <name>ends_with</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/os.h" line="26" column="5" declfile="libs/core/src/core/os.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1add695383542412d0134fbfd0e9dc1f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::join_path</definition>
        <argsstring>(const std::string &amp;left, const std::string &amp;right)</argsstring>
        <name>join_path</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/os.h" line="29" column="5" declfile="libs/core/src/core/os.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a181c2cb141c759306602e690c3a3b502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::get_extension</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>get_extension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/os.h" line="32" column="5" declfile="libs/core/src/core/os.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a563155e62a42f0750030d908b73cd3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::get_file_name_including_extension</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>get_file_name_including_extension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/os.h" line="35" column="5" declfile="libs/core/src/core/os.h" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a06292c02b1da8883e74268f80c023825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::get_file_name_without_extension</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>get_file_name_without_extension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/os.h" line="38" column="5" declfile="libs/core/src/core/os.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a313e87de086384686564322891debc96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::optional&lt; <ref refid="namespaceeuphoria_1_1core_1a18429a488f4a0c6d17b4a84fe0dac703" kindref="member">Recti</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::optional&lt;Recti&gt; &gt; euphoria::core::pack</definition>
        <argsstring>(const Size2i &amp;container, const std::vector&lt; Size2i &gt; &amp;to_pack)</argsstring>
        <name>pack</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" kindref="member">Size2i</ref> &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0d867a75bd4673e7dd7676a2b915d79f" kindref="member">Size2i</ref> &gt; &amp;</type>
          <declname>to_pack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/pack.h" line="14" column="5" declfile="libs/core/src/core/pack.h" declline="14" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa327c34dbdb2f717a71f157ee5c384d4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structeuphoria_1_1core_1_1StaticPalette" kindref="compound">StaticPalette</ref>&lt; sizeof...(T)&gt;</type>
        <definition>constexpr StaticPalette&lt;sizeof...(T)&gt; euphoria::core::make_static_palette</definition>
        <argsstring>(const std::string_view &amp;name, T... colors)</argsstring>
        <name>make_static_palette</name>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T...</type>
          <declname>colors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/palette.h" line="87" column="5" bodyfile="libs/core/src/core/palette.h" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5f3b21172bc7ca795356e2d20c4f4810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &gt;</type>
        <definition>std::vector&lt;Rgbi&gt; euphoria::core::extract_palette_median_cut</definition>
        <argsstring>(const Image &amp;image, int depth, bool middle_split)</argsstring>
        <name>extract_palette_median_cut</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>middle_split</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/palette_extract.h" line="13" column="5" declfile="libs/core/src/core/palette_extract.h" declline="13" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a08bc595de4aeaab19559e41c90b944ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref> &gt;</type>
        <definition>std::vector&lt;Vec2f&gt; euphoria::core::poisson_sample</definition>
        <argsstring>(const Rectf &amp;area, Random *random, float r, float bs=-1.0f, int k=30)</argsstring>
        <name>poisson_sample</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a36217bfc978879cdbc151f5c8759bf86" kindref="member">Rectf</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <param>
          <type>float</type>
          <declname>bs</declname>
          <defval>-1.0f</defval>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
          <defval>30</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/poisson.h" line="47" column="17" declfile="libs/core/src/core/poisson.h" declline="47" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1adaf910bf859ef51da29ebd7cc6f83f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a05bb87e4918e13835245f049556061f1" kindref="member">Unit3f</ref></type>
        <definition>Unit3f euphoria::core::get_random_unit3</definition>
        <argsstring>(Random *random)</argsstring>
        <name>get_random_unit3</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/polarcoord.h" line="26" column="5" declfile="libs/core/src/core/polarcoord.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a98a95d4f1e2faf7f181888c76497e8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::get_string_from_path</definition>
        <argsstring>(const vfs::FilePath &amp;p)</argsstring>
        <name>get_string_from_path</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">vfs::FilePath</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="52" column="5" declfile="libs/core/src/core/proto.h" declline="52" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a258851a77c403c206aa563406884486b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::get_string_from_path_for_debugging</definition>
        <argsstring>(vfs::FileSystem *fs, const vfs::FilePath &amp;p)</argsstring>
        <name>get_string_from_path_for_debugging</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">vfs::FileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">vfs::FilePath</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="55" column="5" declfile="libs/core/src/core/proto.h" declline="55" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aee44040117f96af670652bdfbac44960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; euphoria::core::get_file_contents_or_null</definition>
        <argsstring>(vfs::FileSystem *fs, const vfs::FilePath &amp;file_name)</argsstring>
        <name>get_file_contents_or_null</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">vfs::FileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">vfs::FilePath</ref> &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="58" column="5" declfile="libs/core/src/core/proto.h" declline="58" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae9d82d773a121ba85ff1a961954a9ba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; euphoria::core::read_source_or_get_error_message</definition>
        <argsstring>(const std::string &amp;source, rapidjson::Document *doc)</argsstring>
        <name>read_source_or_get_error_message</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>rapidjson::Document *</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="61" column="5" declfile="libs/core/src/core/proto.h" declline="61" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8ef06befe2e9eeca91cb5d455a810732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::could_be_callback</definition>
        <argsstring>(const std::string &amp;v, const std::vector&lt; std::string &gt; &amp;vv)</argsstring>
        <name>could_be_callback</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>vv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="64" column="5" declfile="libs/core/src/core/proto.h" declline="64" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8a3d6af2d674669ad734b1aad86ef6f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::log_read_error</definition>
        <argsstring>(const ReadErrorFileMissing &amp;)</argsstring>
        <name>log_read_error</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1ReadErrorFileMissing" kindref="compound">ReadErrorFileMissing</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="67" column="5" declfile="libs/core/src/core/proto.h" declline="67" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a75eb2e379826e244f630a5f7a672cdba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::log_read_error</definition>
        <argsstring>(const ReadErrorFileError &amp;)</argsstring>
        <name>log_read_error</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1ReadErrorFileError" kindref="compound">ReadErrorFileError</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="70" column="5" declfile="libs/core/src/core/proto.h" declline="70" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab965243a2b6b90c0765f3e9c4b53466d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; T &gt;</type>
        <definition>std::optional&lt;T&gt; euphoria::core::work_get_optional_and_log_errors</definition>
        <argsstring>(ReadResult&lt; T &gt; &amp;&amp;result, bool log_missing_file)</argsstring>
        <name>work_get_optional_and_log_errors</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a1c291e953f27d604436fdae47ddca0d4" kindref="member">ReadResult</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>log_missing_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="77" column="5" bodyfile="libs/core/src/core/proto.h" bodystart="77" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7ea3a1aae0663a9cebc0b62e9e6a4040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; T &gt;</type>
        <definition>std::optional&lt;T&gt; euphoria::core::get_optional_and_log_errors</definition>
        <argsstring>(ReadResult&lt; T &gt; &amp;&amp;result)</argsstring>
        <name>get_optional_and_log_errors</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a1c291e953f27d604436fdae47ddca0d4" kindref="member">ReadResult</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="127" column="5" bodyfile="libs/core/src/core/proto.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a804a7777438cd526b713da3f532a6bbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; T &gt;</type>
        <definition>std::optional&lt;T&gt; euphoria::core::get_optional_and_log_errors_allow_missing</definition>
        <argsstring>(ReadResult&lt; T &gt; &amp;&amp;result)</argsstring>
        <name>get_optional_and_log_errors_allow_missing</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a1c291e953f27d604436fdae47ddca0d4" kindref="member">ReadResult</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="136" column="5" bodyfile="libs/core/src/core/proto.h" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af85e834f296a688ef6e63150ab691762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::get_default_but_log_errors</definition>
        <argsstring>(ReadResult&lt; T &gt; &amp;&amp;result)</argsstring>
        <name>get_default_but_log_errors</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a1c291e953f27d604436fdae47ddca0d4" kindref="member">ReadResult</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="146" column="5" bodyfile="libs/core/src/core/proto.h" bodystart="146" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa215a7479f5851b8b2336bf07d5f4748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::get_default_ignore_missing_but_log_errors</definition>
        <argsstring>(ReadResult&lt; T &gt; &amp;&amp;result)</argsstring>
        <name>get_default_ignore_missing_but_log_errors</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a1c291e953f27d604436fdae47ddca0d4" kindref="member">ReadResult</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="161" column="5" bodyfile="libs/core/src/core/proto.h" bodystart="161" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac4fcc0f316b9ef8d70f8dbec05d10f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ReadJsonElementFun</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeuphoria_1_1core_1a1c291e953f27d604436fdae47ddca0d4" kindref="member">ReadResult</ref>&lt; T &gt;</type>
        <definition>ReadResult&lt;T&gt; euphoria::core::read_json_source_to_gaf_struct</definition>
        <argsstring>(const std::string &amp;path_to_file, const std::string &amp;source, ReadJsonElementFun read_json_element)</argsstring>
        <name>read_json_source_to_gaf_struct</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path_to_file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>ReadJsonElementFun</type>
          <declname>read_json_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="179" column="5" bodyfile="libs/core/src/core/proto.h" bodystart="180" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae5a8d602ab310286b200aa68255b961f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ReadJsonElementFun</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeuphoria_1_1core_1a1c291e953f27d604436fdae47ddca0d4" kindref="member">ReadResult</ref>&lt; T &gt;</type>
        <definition>ReadResult&lt;T&gt; euphoria::core::read_json_file_to_gaf_struct</definition>
        <argsstring>(vfs::FileSystem *fs, const vfs::FilePath &amp;file_name, ReadJsonElementFun read_json_element)</argsstring>
        <name>read_json_file_to_gaf_struct</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">vfs::FileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">vfs::FilePath</ref> &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>ReadJsonElementFun</type>
          <declname>read_json_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/proto.h" line="233" column="5" bodyfile="libs/core/src/core/proto.h" bodystart="234" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afda80bbedb1aaee42964a8f3490533ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Quat&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="426" column="5" bodyfile="libs/core/src/core/quat.h" bodystart="427" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a362a2720e7cdb79b807cfcd199ab51c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::dot</definition>
        <argsstring>(const Quat&lt; T &gt; &amp;lhs, const Quat&lt; T &gt; &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="436" column="5" bodyfile="libs/core/src/core/quat.h" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa0650baa78f38b4cf4a4f3f437109041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt;</type>
        <definition>Quat&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Quat&lt; T &gt; &amp;lhs, const Quat&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="443" column="10" bodyfile="libs/core/src/core/quat.h" bodystart="443" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a399009f3210ec2ba4ba7c59251927fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt;</type>
        <definition>Quat&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(T scale, const Quat&lt; T &gt; &amp;q)</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="452" column="10" bodyfile="libs/core/src/core/quat.h" bodystart="452" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af928481568bb19768cd69c5dd8238f19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt;</type>
        <definition>Quat&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Quat&lt; T &gt; &amp;q, T scale)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>T</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="461" column="10" bodyfile="libs/core/src/core/quat.h" bodystart="461" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5156c6340c23fafd2ba3360dfa3287db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt;</type>
        <definition>Quat&lt;T&gt; euphoria::core::operator+</definition>
        <argsstring>(const Quat&lt; T &gt; &amp;lhs, const Quat&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="471" column="5" bodyfile="libs/core/src/core/quat.h" bodystart="471" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6a0a79b4f1a5c27ddde10ab78fb74d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt;</type>
        <definition>Quat&lt;T&gt; euphoria::core::operator-</definition>
        <argsstring>(const Quat&lt; T &gt; &amp;lhs, const Quat&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="481" column="5" bodyfile="libs/core/src/core/quat.h" bodystart="481" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3ed28932e1b59f85391afd7cb0d01a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Quat&lt; T &gt; &amp;lhs, const Quat&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Quat" kindref="compound">Quat</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quat.h" line="491" column="5" bodyfile="libs/core/src/core/quat.h" bodystart="491" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3c93ca6065f521a10b4fe5f7ef3c7529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SortFunc</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int euphoria::core::get_hoare_partition</definition>
        <argsstring>(SortFunc sort_func, std::vector&lt; T &gt; &amp;array, int lo, int hi)</argsstring>
        <name>get_hoare_partition</name>
        <param>
          <type>SortFunc</type>
          <declname>sort_func</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quicksort.h" line="15" column="5" bodyfile="libs/core/src/core/quicksort.h" bodystart="15" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a23261a6580e178c0eead7d95fa06c4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SortFunc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void euphoria::core::quicksort_implementation</definition>
        <argsstring>(SortFunc sort_func, std::vector&lt; T &gt; &amp;array, int lo, int hi)</argsstring>
        <name>quicksort_implementation</name>
        <param>
          <type>SortFunc</type>
          <declname>sort_func</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quicksort.h" line="43" column="5" bodyfile="libs/core/src/core/quicksort.h" bodystart="43" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a66808fd36749cd72f60961d90cb37977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SortFunc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void euphoria::core::quicksort</definition>
        <argsstring>(std::vector&lt; T &gt; *array, SortFunc sort_func)</argsstring>
        <name>quicksort</name>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>SortFunc</type>
          <declname>sort_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quicksort.h" line="55" column="5" bodyfile="libs/core/src/core/quicksort.h" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a1fbea435dd9442214b15e59ab1f8d748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SortFunc</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::quicksort</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;arr, SortFunc sort_func)</argsstring>
        <name>quicksort</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>SortFunc</type>
          <declname>sort_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quicksort.h" line="62" column="5" bodyfile="libs/core/src/core/quicksort.h" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a0441ad17faf0fe9aff74de7a4838516e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int euphoria::core::default_sort_function_for_quicksort</definition>
        <argsstring>(const T &amp;lhs, const T &amp;rhs)</argsstring>
        <name>default_sort_function_for_quicksort</name>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quicksort.h" line="71" column="5" bodyfile="libs/core/src/core/quicksort.h" bodystart="71" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a67d6223214648aec718d6ce757781980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::quicksort</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;arr)</argsstring>
        <name>quicksort</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/quicksort.h" line="82" column="5" bodyfile="libs/core/src/core/quicksort.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aef258bb5fc7106a2725027a1728de9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IdExtractor</type>
          </param>
          <param>
            <type>typename Int</type>
          </param>
        </templateparamlist>
        <type>Int</type>
        <definition>Int euphoria::core::get_max</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;arr)</argsstring>
        <name>get_max</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/radix_sort.h" line="74" column="5" bodyfile="libs/core/src/core/radix_sort.h" bodystart="74" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a65a1ab24967c1e6b3734f4a7a3eb2e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IdExtractor</type>
          </param>
          <param>
            <type>typename Bucket</type>
          </param>
          <param>
            <type>typename Int</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::count_sort</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;arr, int exp)</argsstring>
        <name>count_sort</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/radix_sort.h" line="90" column="5" bodyfile="libs/core/src/core/radix_sort.h" bodystart="90" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a79d6f0923a3afe0b94f91d0b7784d7c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IdExtractor</type>
          </param>
          <param>
            <type>typename Bucket</type>
          </param>
          <param>
            <type>typename Int</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void euphoria::core::radix_sort</definition>
        <argsstring>(std::vector&lt; T &gt; *arr)</argsstring>
        <name>radix_sort</name>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/radix_sort.h" line="126" column="5" bodyfile="libs/core/src/core/radix_sort.h" bodystart="126" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5e69655199073f48a5585c4e9410c122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref></type>
        <definition>Vec2f euphoria::core::get_random_point_on_unit_circle_center_focused</definition>
        <argsstring>(Random *r)</argsstring>
        <name>get_random_point_on_unit_circle_center_focused</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="56" column="5" declfile="libs/core/src/core/random.h" declline="56" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aae623b580a4f107819d661442bbbb3a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref></type>
        <definition>Vec2f euphoria::core::get_random_point_on_unit_circle_uniform</definition>
        <argsstring>(Random *r)</argsstring>
        <name>get_random_point_on_unit_circle_uniform</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="59" column="5" declfile="libs/core/src/core/random.h" declline="59" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a044f1c800b84484c8119c1445370eb36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::get_random_in_range</definition>
        <argsstring>(Random *rand, const Range&lt; T &gt; &amp;range)</argsstring>
        <name>get_random_in_range</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="63" column="5" bodyfile="libs/core/src/core/random.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a9e94df9893d1ba91c2c83461e7cd3859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::get_random_in_range</definition>
        <argsstring>(Random *rand, T min, T max)</argsstring>
        <name>get_random_in_range</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>T</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="70" column="5" bodyfile="libs/core/src/core/random.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a88ac960fd2babd83361cdfe8989604d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::get_random_in_range</definition>
        <argsstring>(Random *rand, T max)</argsstring>
        <name>get_random_in_range</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="77" column="5" bodyfile="libs/core/src/core/random.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a88822f78844a33957a2962f7ebcd7c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; euphoria::core::get_random_item_in_vector</definition>
        <argsstring>(Random *r, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>get_random_item_in_vector</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="84" column="5" bodyfile="libs/core/src/core/random.h" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a21c490184304cff8cbffddea9b545882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; euphoria::core::get_random_item_in_vector</definition>
        <argsstring>(Random *r, const ranges::span&lt; T &gt; &amp;v)</argsstring>
        <name>get_random_item_in_vector</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const ranges::span&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="97" column="5" bodyfile="libs/core/src/core/random.h" bodystart="97" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aaf4476cbf98ca659be1ec029aaf3dfc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::get_random_gaussian_float01</definition>
        <argsstring>(Random *rand)</argsstring>
        <name>get_random_gaussian_float01</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="109" column="5" declfile="libs/core/src/core/random.h" declline="109" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac9fff07a4e3c8802f408ae61c4ff3064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::get_random_gaussian</definition>
        <argsstring>(Random *rand, float mean, float std_dev)</argsstring>
        <name>get_random_gaussian</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>float</type>
          <declname>std_dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="112" column="5" declfile="libs/core/src/core/random.h" declline="112" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab5b2d180bb597eeeee7dcbd74ac07598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::get_random_gaussian</definition>
        <argsstring>(Random *rand, float mean, float std_dev, const Range&lt; float &gt; &amp;r)</argsstring>
        <name>get_random_gaussian</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>float</type>
          <declname>std_dev</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; float &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/random.h" line="115" column="5" declfile="libs/core/src/core/random.h" declline="115" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae050a620ef45874fb232860e6384fe78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt;</type>
        <definition>Range&lt;T&gt; euphoria::core::make_range</definition>
        <argsstring>(T min, T max)</argsstring>
        <name>make_range</name>
        <param>
          <type>T</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="45" column="5" bodyfile="libs/core/src/core/range.h" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2b0447e6de6b9bf570d475046a3828d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt;</type>
        <definition>Range&lt;T&gt; euphoria::core::make_range</definition>
        <argsstring>(T max)</argsstring>
        <name>make_range</name>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="52" column="5" bodyfile="libs/core/src/core/range.h" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab722098e4432f02b9426519d079471dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; int &gt;</type>
        <definition>Range&lt;int&gt; euphoria::core::make_range</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>make_range</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="59" column="5" bodyfile="libs/core/src/core/range.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae1a779fb67b2653c79e2401e3fd07c13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::from01f</definition>
        <argsstring>(float lower_bound, float upper_bound, float value)</argsstring>
        <name>from01f</name>
        <param>
          <type>float</type>
          <declname>lower_bound</declname>
        </param>
        <param>
          <type>float</type>
          <declname>upper_bound</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="69" column="5" declfile="libs/core/src/core/range.h" declline="69" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a31d1ccf8454bd62dea5863f5f94b3050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::from01</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, float value)</argsstring>
        <name>from01</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="73" column="5" bodyfile="libs/core/src/core/range.h" bodystart="73" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5d0da6b55e1051d255e1a88cbbba20a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float euphoria::core::from01</definition>
        <argsstring>(const Range&lt; float &gt; &amp;range, float value)</argsstring>
        <name>from01</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; float &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="92" column="5" declfile="libs/core/src/core/range.h" declline="92" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aadec838b8c7b7209240e9d8aeb375b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float euphoria::core::to01</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, T value)</argsstring>
        <name>to01</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="96" column="5" bodyfile="libs/core/src/core/range.h" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a0a16c467d6a2eac00ff54c22ee7973a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::get360_angular</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, float value)</argsstring>
        <name>get360_angular</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="105" column="5" bodyfile="libs/core/src/core/range.h" bodystart="105" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac79c29f9c09a3af7669ffa17811ce174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::remap_to</definition>
        <argsstring>(const Range&lt; F &gt; &amp;from, const Range&lt; T &gt; &amp;to, F value)</argsstring>
        <name>remap_to</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; F &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>F</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="115" column="5" bodyfile="libs/core/src/core/range.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5f61bf6e2a37f15847a668f14e230280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::is_within</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, T value)</argsstring>
        <name>is_within</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="123" column="5" bodyfile="libs/core/src/core/range.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a38b2e3a8790e089c7bf1fdb3cc4b8581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::keep_within</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, T value)</argsstring>
        <name>keep_within</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="131" column="5" bodyfile="libs/core/src/core/range.h" bodystart="131" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8608fd1d423c6d7c90786fe3994f1b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::wrap</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, T value)</argsstring>
        <name>wrap</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/range.h" line="147" column="5" bodyfile="libs/core/src/core/range.h" bodystart="147" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a861bb88438c64ab3833dab6ae3ba5aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; R &gt;</type>
        <definition>Vec2&lt;R&gt; euphoria::core::to01</definition>
        <argsstring>(const Rect&lt; T &gt; &amp;r, const Vec2&lt; R &gt; &amp;from)</argsstring>
        <name>to01</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; R &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rect.h" line="506" column="5" bodyfile="libs/core/src/core/rect.h" bodystart="506" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab679095ba3cb64d66862608a19c503ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; R &gt;</type>
        <definition>Vec2&lt;R&gt; euphoria::core::from01</definition>
        <argsstring>(const Rect&lt; T &gt; &amp;r, const Vec2&lt; R &gt; &amp;from)</argsstring>
        <name>from01</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; R &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rect.h" line="515" column="5" bodyfile="libs/core/src/core/rect.h" bodystart="515" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af1c16037d8d1dd133abcb3caa1194af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::is_within</definition>
        <argsstring>(const Rect&lt; T &gt; &amp;r, const Vec2&lt; T &gt; &amp;p)</argsstring>
        <name>is_within</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rect.h" line="524" column="5" bodyfile="libs/core/src/core/rect.h" bodystart="524" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a688148bbafb644a0c5497587c2ec4eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Rect&lt; T &gt; &amp;lhs, const Rect&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rect.h" line="533" column="5" bodyfile="libs/core/src/core/rect.h" bodystart="533" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a47f5fae7d69ef05e3d36f135b6c244eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>S &amp;</type>
        <definition>S&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(S &amp;s, const Rect&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>S &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rect.h" line="543" column="5" bodyfile="libs/core/src/core/rect.h" bodystart="544" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae0087dd806ee5a9f91dda6aa1124fa8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a0fac06348fb78bf037c7279ac205036c" kindref="member">Vec2f</ref></type>
        <definition>Vec2f euphoria::core::get_random_point</definition>
        <argsstring>(Random *random, const Rect&lt; float &gt; &amp;r)</argsstring>
        <name>get_random_point</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; float &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rect.h" line="555" column="11" declfile="libs/core/src/core/rect.h" declline="555" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5673973fb85647a1f6a75c4f523f89cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref></type>
        <definition>Vec2i euphoria::core::get_random_point</definition>
        <argsstring>(Random *random, const Rect&lt; int &gt; &amp;r)</argsstring>
        <name>get_random_point</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rect" kindref="compound">Rect</ref>&lt; int &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rect.h" line="556" column="11" declfile="libs/core/src/core/rect.h" declline="556" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aff698cc42d4e46617faf7d41d5bd588c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::operator+</definition>
        <argsstring>(const Rgb &amp;lhs, const Rgb &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="111" column="5" declfile="libs/core/src/core/rgb.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a9b34ea1f0ea1e9dc0ca4a9bac8b54b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::operator-</definition>
        <argsstring>(const Rgb &amp;lhs, const Rgb &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="114" column="5" declfile="libs/core/src/core/rgb.h" declline="114" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a0b9471ac945cfffe380cd3dc3e0fe479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::operator*</definition>
        <argsstring>(const Rgb &amp;lhs, const Rgb &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="118" column="5" declfile="libs/core/src/core/rgb.h" declline="118" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afc58291b0b1c787a39d7b7b1bbc21d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::operator/</definition>
        <argsstring>(const Rgb &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="121" column="5" declfile="libs/core/src/core/rgb.h" declline="121" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2e6ff103593598e8a4195421582015fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::operator*</definition>
        <argsstring>(const Rgb &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="124" column="5" declfile="libs/core/src/core/rgb.h" declline="124" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac17f33bb9937a0bb439f0e76ae893a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::operator*</definition>
        <argsstring>(float lhs, const Rgb &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="127" column="5" declfile="libs/core/src/core/rgb.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa24b15d084c31178a1073342f60983ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::dot</definition>
        <argsstring>(const Rgb &amp;lhs, const Rgb &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="130" column="5" declfile="libs/core/src/core/rgb.h" declline="130" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a0afb1f3d3508ec6c5aaab9a04a5bc658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::clamp</definition>
        <argsstring>(const Rgb &amp;r)</argsstring>
        <name>clamp</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="133" column="5" declfile="libs/core/src/core/rgb.h" declline="133" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8bf1c2817dfd81c4f75b14066608979e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl euphoria::core::saturate</definition>
        <argsstring>(const Hsl &amp;ahsl, float amount, IsAbsolute method)</argsstring>
        <name>saturate</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>ahsl</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ab230baada4409e0fcca3d5b1e4e94e31" kindref="member">IsAbsolute</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="165" column="5" declfile="libs/core/src/core/rgb.h" declline="165" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad742cc00d70d30038cbd98c90f963cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl euphoria::core::desaturate</definition>
        <argsstring>(const Hsl &amp;ahsl, float amount, IsAbsolute method)</argsstring>
        <name>desaturate</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>ahsl</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ab230baada4409e0fcca3d5b1e4e94e31" kindref="member">IsAbsolute</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="168" column="5" declfile="libs/core/src/core/rgb.h" declline="168" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aaa8f8a56fe7d7aae0544c6ef75d6b5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl euphoria::core::lighten</definition>
        <argsstring>(const Hsl &amp;ahsl, float amount, IsAbsolute method)</argsstring>
        <name>lighten</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>ahsl</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ab230baada4409e0fcca3d5b1e4e94e31" kindref="member">IsAbsolute</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="171" column="5" declfile="libs/core/src/core/rgb.h" declline="171" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a06575f0141ef972846d6409c7d57b5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl euphoria::core::darken</definition>
        <argsstring>(const Hsl &amp;ahsl, float amount, IsAbsolute method)</argsstring>
        <name>darken</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>ahsl</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1ab230baada4409e0fcca3d5b1e4e94e31" kindref="member">IsAbsolute</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="174" column="5" declfile="libs/core/src/core/rgb.h" declline="174" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a35c53bdd41324fd3b5f1e05517ade6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::shade_color</definition>
        <argsstring>(const Rgb &amp;color, float percentage)</argsstring>
        <name>shade_color</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>float</type>
          <declname>percentage</declname>
        </param>
        <briefdescription>
<para>Makes a color brighter or darker. </para>
        </briefdescription>
        <detaileddescription>
<para>The +1 makes it white, 0% is no change, -1 makes it black. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="180" column="5" declfile="libs/core/src/core/rgb.h" declline="180" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac4fd9ddea85a150509a39f8a2290d63c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Rgbi &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="201" column="5" declfile="libs/core/src/core/rgb.h" declline="201" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3dfa37c148c364639d965207e4b91ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Rgbai &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="204" column="5" declfile="libs/core/src/core/rgb.h" declline="204" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af6a72476041a104bac727ffd50c1fc69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Rgb &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="207" column="5" declfile="libs/core/src/core/rgb.h" declline="207" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a20b4b6c34348fddcc9a0ce79fc06b545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Rgba &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="210" column="5" declfile="libs/core/src/core/rgb.h" declline="210" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aad3210c0c162f2d61696ae418e05ca6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Hsl &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="213" column="5" declfile="libs/core/src/core/rgb.h" declline="213" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa54c938278acc6bc6dc66f0060ef6693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Rgbi &amp;lhs, const Rgbi &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="220" column="5" declfile="libs/core/src/core/rgb.h" declline="220" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae7c38f46b4d6d514c5d669b67ca43384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::operator!=</definition>
        <argsstring>(const Rgbi &amp;lhs, const Rgbi &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="223" column="5" declfile="libs/core/src/core/rgb.h" declline="223" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad6a12e72f7a6bee3725f293fa745d86a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Rgbai &amp;lhs, const Rgbai &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="226" column="5" declfile="libs/core/src/core/rgb.h" declline="226" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a384140eb844b6417cc017b23c812bf00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::operator!=</definition>
        <argsstring>(const Rgbai &amp;lhs, const Rgbai &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="229" column="5" declfile="libs/core/src/core/rgb.h" declline="229" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3bba73907b4a12aceadc4437de2707f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::crgb</definition>
        <argsstring>(const Rgbi &amp;rgb)</argsstring>
        <name>crgb</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="235" column="5" declfile="libs/core/src/core/rgb.h" declline="235" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6e93c99c958ebc4950cd46e99cb1b13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::crgb</definition>
        <argsstring>(const Rgba &amp;rgb)</argsstring>
        <name>crgb</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="238" column="5" declfile="libs/core/src/core/rgb.h" declline="238" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a113b190a40903d6f8930fe5ef0bd08f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::crgb</definition>
        <argsstring>(const Rgbai &amp;rgb)</argsstring>
        <name>crgb</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="241" column="5" declfile="libs/core/src/core/rgb.h" declline="241" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a800d067390889ccd6fa960076396f726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::crgb</definition>
        <argsstring>(const Hsl &amp;c)</argsstring>
        <name>crgb</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="244" column="5" declfile="libs/core/src/core/rgb.h" declline="244" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac5275c9c6a602d8b9eb15ae2513419eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl euphoria::core::chsl</definition>
        <argsstring>(const Rgb &amp;c)</argsstring>
        <name>chsl</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="249" column="5" declfile="libs/core/src/core/rgb.h" declline="249" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6cfe08f768e26cea65e3030bde66df2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref></type>
        <definition>Rgbi euphoria::core::crgbi</definition>
        <argsstring>(const Rgb &amp;rgb)</argsstring>
        <name>crgbi</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="254" column="5" declfile="libs/core/src/core/rgb.h" declline="254" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3714f9d931d2a053baa6af27802e8712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref></type>
        <definition>Rgbi euphoria::core::crgbi</definition>
        <argsstring>(const Rgba &amp;rgb)</argsstring>
        <name>crgbi</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="257" column="5" declfile="libs/core/src/core/rgb.h" declline="257" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a16f9f679801a0cab3661e7204a6eef7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref></type>
        <definition>Rgbi euphoria::core::crgbi</definition>
        <argsstring>(const Rgbai &amp;rgb)</argsstring>
        <name>crgbi</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="260" column="5" declfile="libs/core/src/core/rgb.h" declline="260" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab7cd11b5813cfd4642207a5e2dfbc7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgba" kindref="compound">Rgba</ref></type>
        <definition>Rgba euphoria::core::crgba</definition>
        <argsstring>(const Rgbai &amp;rgb)</argsstring>
        <name>crgba</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="264" column="5" declfile="libs/core/src/core/rgb.h" declline="264" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a587199975f0cb2c7c4692f2b0dd5d6c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref></type>
        <definition>Rgbai euphoria::core::crgbai</definition>
        <argsstring>(const Rgba &amp;rgb)</argsstring>
        <name>crgbai</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="267" column="5" declfile="libs/core/src/core/rgb.h" declline="267" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2ba41009ce237cee5b3c02cee692f591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::to_js_hex_color</definition>
        <argsstring>(const Rgbi &amp;c)</argsstring>
        <name>to_js_hex_color</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="282" column="17" declfile="libs/core/src/core/rgb.h" declline="282" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aacdcb7f882143bc165a80d777d464965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &gt;</type>
        <definition>Result&lt;Rgbi&gt; euphoria::core::crgbi</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>crgbi</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb.h" line="289" column="5" declfile="libs/core/src/core/rgb.h" declline="289" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad265ed209382ef6886b4adc6f31b90c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb euphoria::core::blend</definition>
        <argsstring>(const Rgb &amp;top, const Rgb &amp;bottom, BlendMode mode=BlendMode::normal)</argsstring>
        <name>blend</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>top</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03" kindref="member">BlendMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03afea087517c26fadd409bd4b9dc642555" kindref="member">BlendMode::normal</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb_blend.h" line="37" column="11" declfile="libs/core/src/core/rgb_blend.h" declline="37" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1adcecf10d4e6148aa9341465b89c6d98c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgba" kindref="compound">Rgba</ref></type>
        <definition>Rgba euphoria::core::blend</definition>
        <argsstring>(const Rgba &amp;top, const Rgba &amp;bottom, BlendMode mode=BlendMode::normal)</argsstring>
        <name>blend</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>top</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03" kindref="member">BlendMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03afea087517c26fadd409bd4b9dc642555" kindref="member">BlendMode::normal</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb_blend.h" line="38" column="11" declfile="libs/core/src/core/rgb_blend.h" declline="38" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7bc1da5b1a8a36bbf3f72caefcbfbd82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref></type>
        <definition>Rgbi euphoria::core::blend</definition>
        <argsstring>(const Rgbi &amp;top, const Rgbi &amp;bottom, BlendMode mode=BlendMode::normal)</argsstring>
        <name>blend</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>top</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03" kindref="member">BlendMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03afea087517c26fadd409bd4b9dc642555" kindref="member">BlendMode::normal</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb_blend.h" line="39" column="11" declfile="libs/core/src/core/rgb_blend.h" declline="39" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2b561af39e7b7895a67763ae4bc7def0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref></type>
        <definition>Rgbai euphoria::core::blend</definition>
        <argsstring>(const Rgbai &amp;top, const Rgbai &amp;bottom, BlendMode mode=BlendMode::normal)</argsstring>
        <name>blend</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>top</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03" kindref="member">BlendMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="namespaceeuphoria_1_1core_1a0e04e623955ef5b92d46fd5a63d4bc03afea087517c26fadd409bd4b9dc642555" kindref="member">BlendMode::normal</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/rgb_blend.h" line="40" column="11" declfile="libs/core/src/core/rgb_blend.h" declline="40" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a1818049e8846510ee29c8f45436d7139" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structeuphoria_1_1core_1_1Shufflebag" kindref="compound">Shufflebag</ref>&lt; T &gt;</type>
        <definition>constexpr Shufflebag&lt;T&gt; euphoria::core::create_shuffle_bag</definition>
        <argsstring>(const ranges::span&lt; const T &gt; &amp;items, int amount)</argsstring>
        <name>create_shuffle_bag</name>
        <param>
          <type>const ranges::span&lt; const T &gt; &amp;</type>
          <declname>items</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/shufflebag.h" line="70" column="5" bodyfile="libs/core/src/core/shufflebag.h" bodystart="70" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af45a7d165e270d7c33c813723ca3a0bd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structeuphoria_1_1core_1_1Shufflebag" kindref="compound">Shufflebag</ref>&lt; T &gt;</type>
        <definition>constexpr Shufflebag&lt;T&gt; euphoria::core::create_shuffle_bag</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;items, int amount)</argsstring>
        <name>create_shuffle_bag</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>items</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/shufflebag.h" line="85" column="5" bodyfile="libs/core/src/core/shufflebag.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a13a041dc42c4ab2bc6665900a97a2ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
        <definition>Size2&lt;T&gt; euphoria::core::min</definition>
        <argsstring>(const Size2&lt; T &gt; lhs, const Size2&lt; T &gt; rhs)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="150" column="5" bodyfile="libs/core/src/core/size2.h" bodystart="150" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1acc800f715b901e82d721bb4d64ec071d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
        <definition>Size2&lt;T&gt; euphoria::core::max</definition>
        <argsstring>(const Size2&lt; T &gt; lhs, const Size2&lt; T &gt; rhs)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="158" column="5" bodyfile="libs/core/src/core/size2.h" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a45cab40a736fbc9df4953a908cb1f560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
        <definition>Size2&lt;T&gt; euphoria::core::operator+</definition>
        <argsstring>(const Size2&lt; T &gt; &amp;lhs, const Size2&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="166" column="5" bodyfile="libs/core/src/core/size2.h" bodystart="166" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a474c831575b4abe9eb698e15c6b74dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
        <definition>Size2&lt;T&gt; euphoria::core::operator-</definition>
        <argsstring>(const Size2&lt; T &gt; &amp;lhs, const Size2&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="175" column="5" bodyfile="libs/core/src/core/size2.h" bodystart="175" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afb67b588781f8643076d79bdb71eec36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
        <definition>Size2&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Size2&lt; T &gt; &amp;lhs, const T &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="183" column="11" bodyfile="libs/core/src/core/size2.h" bodystart="183" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa456a234ad6a790f136b66208cec6b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
        <definition>Size2&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const T &amp;lhs, const Size2&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="191" column="11" bodyfile="libs/core/src/core/size2.h" bodystart="191" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a850c2037b79357492f78cb00fa55e2f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt;</type>
        <definition>Size2&lt;T&gt; euphoria::core::operator/</definition>
        <argsstring>(const Size2&lt; T &gt; &amp;lhs, const T &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="200" column="5" bodyfile="libs/core/src/core/size2.h" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a23ec9ac7e929cd0bbb77bda973da9cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>S &amp;</type>
        <definition>S&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(S &amp;s, const Size2&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>S &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Size2" kindref="compound">Size2</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/size2.h" line="208" column="5" bodyfile="libs/core/src/core/size2.h" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2ddcbb8c269fbae542c9d290e1babcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1SphereAndPosition" kindref="compound">SphereAndPosition</ref></type>
        <definition>SphereAndPosition euphoria::core::build_bounding_sphere</definition>
        <argsstring>(const std::vector&lt; Vec3f &gt; &amp;positions)</argsstring>
        <name>build_bounding_sphere</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1abba9338710ab9852b3876cb4a495abab" kindref="member">Vec3f</ref> &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/sphere.builder.h" line="12" column="5" declfile="libs/core/src/core/sphere.builder.h" declline="12" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2de5c25d793092c8ba66f5ef16dc8995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; K &gt;</type>
        <definition>std::vector&lt;K&gt; euphoria::core::get_keys</definition>
        <argsstring>(const std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>get_keys</name>
        <param>
          <type>const std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stdutils.h" line="14" column="5" bodyfile="libs/core/src/core/stdutils.h" bodystart="14" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ace77957dd3b94b7d0c80c25b3e94354f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; K &gt;</type>
        <definition>std::vector&lt;K&gt; euphoria::core::get_sorted</definition>
        <argsstring>(const std::vector&lt; K &gt; &amp;k)</argsstring>
        <name>get_sorted</name>
        <param>
          <type>const std::vector&lt; K &gt; &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stdutils.h" line="26" column="5" bodyfile="libs/core/src/core/stdutils.h" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1adc0fad77ffc15c88bc8907c1e6ece387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::get_keys_as_strings</definition>
        <argsstring>(const std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>get_keys_as_strings</name>
        <param>
          <type>const std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stdutils.h" line="35" column="5" bodyfile="libs/core/src/core/stdutils.h" bodystart="35" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a436bb72e3eafb57479e92472faae50d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::swap_back_and_erase_object</definition>
        <argsstring>(T what, std::vector&lt; T &gt; *from)</argsstring>
        <name>swap_back_and_erase_object</name>
        <param>
          <type>T</type>
          <declname>what</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stdutils.h" line="47" column="5" bodyfile="libs/core/src/core/stdutils.h" bodystart="47" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad9846609c1912a46bd61fdf0e068bd95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TFunc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void euphoria::core::remove_matching</definition>
        <argsstring>(std::vector&lt; T &gt; *v, TFunc condition)</argsstring>
        <name>remove_matching</name>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>TFunc</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stdutils.h" line="68" column="5" bodyfile="libs/core/src/core/stdutils.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3b4bf5522c4b3452a5caa0c60e7577a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TFunc</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;::iterator</type>
        <definition>std::vector&lt;T&gt;::iterator euphoria::core::find_first</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;v, TFunc condition)</argsstring>
        <name>find_first</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>TFunc</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stdutils.h" line="75" column="5" bodyfile="libs/core/src/core/stdutils.h" bodystart="75" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a4cfd6289e860c61f4f20aa8a90443335" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>constexpr std::underlying_type&lt; E &gt;::type</type>
        <definition>constexpr std::underlying_type&lt;E&gt;::type euphoria::core::base_cast</definition>
        <argsstring>(E e) noexcept</argsstring>
        <name>base_cast</name>
        <param>
          <type>E</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stdutils.h" line="93" column="5" bodyfile="libs/core/src/core/stdutils.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gab50f5fe675ce4093d55027482701df4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::is_number</definition>
        <argsstring>(char b)</argsstring>
        <name>is_number</name>
        <param>
          <type>char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="21" column="4" declfile="libs/core/src/core/stringutils.h" declline="21" declcolumn="4"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga26d61218d653c49249bf464d9c057d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::strip_last_string</definition>
        <argsstring>(const std::string &amp;str, char sep)</argsstring>
        <name>strip_last_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="32" column="5" declfile="libs/core/src/core/stringutils.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga5539d1b18d02096141c6a211706c114b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>std::pair&lt;std::string, std::string&gt; euphoria::core::last_strings</definition>
        <argsstring>(const std::string &amp;str, char sep)</argsstring>
        <name>last_strings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="36" column="5" declfile="libs/core/src/core/stringutils.h" declline="36" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga6be8b04bf0610b57ceeeaedf3c69aa21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::first_chars</definition>
        <argsstring>(const std::string &amp;str, std::size_t count)</argsstring>
        <name>first_chars</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="40" column="5" declfile="libs/core/src/core/stringutils.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gae5bc0b33c29ff3b304e0fa6bc6d158e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::first_chars_with_ellipsis</definition>
        <argsstring>(const std::string &amp;str, unsigned int count=10)</argsstring>
        <name>first_chars_with_ellipsis</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="43" column="5" declfile="libs/core/src/core/stringutils.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga24478fe47f06fbbcb7d75a59057a2d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::trim_right</definition>
        <argsstring>(const std::string &amp;string_to_trim, const std::string &amp;trim_characters=space_characters)</argsstring>
        <name>trim_right</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_trim</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trim_characters</declname>
          <defval><ref refid="group__string_1ga6b3b47e71d47e09860a94f43e2e4e443" kindref="member">space_characters</ref></defval>
        </param>
        <briefdescription>
<para>Remove characters from the right, stops at a invalid character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_trim</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to remove characters from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trim_characters</parametername>
</parameternamelist>
<parameterdescription>
<para>the characters to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the trimmed string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="52" column="5" declfile="libs/core/src/core/stringutils.h" declline="52" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gabb15f8b7df7a74973ad1e4bd3394b360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::trim_left</definition>
        <argsstring>(const std::string &amp;string_to_trim, const std::string &amp;trim_characters=space_characters)</argsstring>
        <name>trim_left</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_trim</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trim_characters</declname>
          <defval><ref refid="group__string_1ga6b3b47e71d47e09860a94f43e2e4e443" kindref="member">space_characters</ref></defval>
        </param>
        <briefdescription>
<para>Remove characters from the left, stops at invalid character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_trim</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to remove characters from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trim_characters</parametername>
</parameternamelist>
<parameterdescription>
<para>the characters to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the trimmed string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="61" column="5" declfile="libs/core/src/core/stringutils.h" declline="61" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga8cb4fed283213699726e617f65f0a1ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::trim</definition>
        <argsstring>(const std::string &amp;string_to_trim, const std::string &amp;trim_characters=space_characters)</argsstring>
        <name>trim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_trim</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trim_characters</declname>
          <defval><ref refid="group__string_1ga6b3b47e71d47e09860a94f43e2e4e443" kindref="member">space_characters</ref></defval>
        </param>
        <briefdescription>
<para>Remove characters from both the start and the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_trim</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to remove characters from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trim_characters</parametername>
</parameternamelist>
<parameterdescription>
<para>the characters to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the trimmed string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="70" column="5" declfile="libs/core/src/core/stringutils.h" declline="70" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga814d397c4364b2205e073daabd20edec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::starts_with</definition>
        <argsstring>(const std::string &amp;string_to_test, const std::string &amp;start)</argsstring>
        <name>starts_with</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_test</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Tests if a string starts with another string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_test</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the start of the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the start match, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="79" column="5" declfile="libs/core/src/core/stringutils.h" declline="79" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga5a7f57fadc01161aced52da619c6998e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::ends_with</definition>
        <argsstring>(const std::string &amp;string_to_test, const std::string &amp;end)</argsstring>
        <name>ends_with</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_test</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Tests if a string ends with another string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_test</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the end match, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="88" column="5" declfile="libs/core/src/core/stringutils.h" declline="88" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga7f126530d4c6f7f10fe540d291360217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char euphoria::core::to_lower_char</definition>
        <argsstring>(char b)</argsstring>
        <name>to_lower_char</name>
        <param>
          <type>char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="92" column="5" declfile="libs/core/src/core/stringutils.h" declline="92" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gaff7fc2ad77c5c8e152d588faa0a1f66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char euphoria::core::to_upper_char</definition>
        <argsstring>(char b)</argsstring>
        <name>to_upper_char</name>
        <param>
          <type>char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="95" column="5" declfile="libs/core/src/core/stringutils.h" declline="95" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga0969511cbbc86a70a94662d9e6365200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::to_lower</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>to_lower</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Generate a string containing only lower characters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to lower. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the lowered string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="103" column="5" declfile="libs/core/src/core/stringutils.h" declline="103" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gafa9a0e194dc9cbb578c0368fc06f0045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::to_lower</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;str)</argsstring>
        <name>to_lower</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="107" column="5" declfile="libs/core/src/core/stringutils.h" declline="107" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga67304dafab5cf1cbe5086c10cc105b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::to_upper</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>to_upper</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="111" column="5" declfile="libs/core/src/core/stringutils.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gad4f566f87b9d9904f2618d4b8d7355b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::char_to_string</definition>
        <argsstring>(char c, CharToStringStyle style=CharToStringStyle::smart)</argsstring>
        <name>char_to_string</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="group__string_1ga76be2d19e62a480036566314fba1fb03" kindref="member">CharToStringStyle</ref></type>
          <declname>style</declname>
          <defval><ref refid="group__string_1gga76be2d19e62a480036566314fba1fb03a8c319f28d81d1527a9428e9a5c2195f5" kindref="member">CharToStringStyle::smart</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="121" column="5" declfile="libs/core/src/core/stringutils.h" declline="121" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga3f2cd303af1faf7a4a62fb3a933e83e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string::size_type</type>
        <definition>std::string::size_type euphoria::core::find_first_index_of_mismatch</definition>
        <argsstring>(const std::string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>find_first_index_of_mismatch</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="125" column="5" declfile="libs/core/src/core/stringutils.h" declline="125" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga1393c92069ffb1be8bc58af3e7212c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::replace_all</definition>
        <argsstring>(std::string *string, const std::string &amp;to_find, const std::string &amp;to_replace)</argsstring>
        <name>replace_all</name>
        <param>
          <type>std::string *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_find</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_replace</declname>
        </param>
        <briefdescription>
<para>Replace all occurrences in a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_find</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to find. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_replace</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to replace it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="134" column="5" declfile="libs/core/src/core/stringutils.h" declline="134" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga5aec424acbf5fe24a8ad2566f953986c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::replace_all</definition>
        <argsstring>(const std::string &amp;string, const std::string &amp;to_find, const std::string &amp;to_replace)</argsstring>
        <name>replace_all</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_find</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_replace</declname>
        </param>
        <briefdescription>
<para>Replace all occurrences in a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_find</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to find. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_replace</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to replace it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the modified string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="144" column="5" declfile="libs/core/src/core/stringutils.h" declline="144" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga35252d7e93d1034c45f8fc02ec6ccaca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::replace_with_character</definition>
        <argsstring>(const std::string &amp;string, const std::string &amp;to_find, char to_replace)</argsstring>
        <name>replace_with_character</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_find</declname>
        </param>
        <param>
          <type>char</type>
          <declname>to_replace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="148" column="5" declfile="libs/core/src/core/stringutils.h" declline="148" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gaf2c411eb368e2d2cd7c2486ffe8c70f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::copy</definition>
        <argsstring>(char *dst, const std::string &amp;src, const std::string::size_type &amp;count)</argsstring>
        <name>copy</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string::size_type &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Copy a string to a character buffer, adding null terminator at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of characters to copy (including null terminator) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="158" column="5" declfile="libs/core/src/core/stringutils.h" declline="158" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gae9502e3020dd7a98866d821c41047020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::remove_from_end</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;end)</argsstring>
        <name>remove_from_end</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="161" column="5" declfile="libs/core/src/core/stringutils.h" declline="161" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga8017ea0795ca9ca4d868f667e6aa093e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::to_string_vector</definition>
        <argsstring>(const std::map&lt; Key, Value &gt; &amp;map)</argsstring>
        <name>to_string_vector</name>
        <param>
          <type>const std::map&lt; <ref refid="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710" kindref="member">Key</ref>, <ref refid="structeuphoria_1_1core_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="166" column="5" bodyfile="libs/core/src/core/stringutils.h" bodystart="166" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga223a6d6672fb2d1c6bd56ec0c46394de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::key_to_string_vector</definition>
        <argsstring>(const std::map&lt; Key, Value &gt; &amp;map)</argsstring>
        <name>key_to_string_vector</name>
        <param>
          <type>const std::map&lt; <ref refid="namespaceeuphoria_1_1core_1aa9db03a38fd9999446a4ebf0584cd710" kindref="member">Key</ref>, <ref refid="structeuphoria_1_1core_1_1Value" kindref="compound">Value</ref> &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="181" column="5" bodyfile="libs/core/src/core/stringutils.h" bodystart="181" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga1f4dae4c4ca084ca1c688167915bdb60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::to_string_vector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data)</argsstring>
        <name>to_string_vector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="195" column="5" bodyfile="libs/core/src/core/stringutils.h" bodystart="195" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga1abe1f676616f8aa4f610866a7d60f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::to_string_vector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, C callback)</argsstring>
        <name>to_string_vector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>C</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="210" column="5" bodyfile="libs/core/src/core/stringutils.h" bodystart="210" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gafdeab9a423bfa7d2d9d92557e60917a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::strip</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;ch)</argsstring>
        <name>strip</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="224" column="5" declfile="libs/core/src/core/stringutils.h" declline="224" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga73d3a9771d3a6c8d7bd9e526219f9cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::remove_consecutive</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;ch)</argsstring>
        <name>remove_consecutive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="229" column="5" declfile="libs/core/src/core/stringutils.h" declline="229" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga513fcb2e37d819d2efa8990c63a94943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::split</definition>
        <argsstring>(const std::string &amp;string, char delim)</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="233" column="5" declfile="libs/core/src/core/stringutils.h" declline="233" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga056bafb62ff5e4476efbff39513341f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::split_on_spaces</definition>
        <argsstring>(const std::string &amp;string)</argsstring>
        <name>split_on_spaces</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="237" column="5" declfile="libs/core/src/core/stringutils.h" declline="237" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gac664e9d6a7bc3d57135fa05ca523350c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::optional_string</definition>
        <argsstring>(bool b, const std::string &amp;str)</argsstring>
        <name>optional_string</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="241" column="5" declfile="libs/core/src/core/stringutils.h" declline="241" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gae5e8bde5cfc2903bc3ee7a1e8717f743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::string_compare</definition>
        <argsstring>(const std::string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>string_compare</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/stringutils.h" line="246" column="5" declfile="libs/core/src/core/stringutils.h" declline="246" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa1add8a3ce38110f5544d7d2a10b7272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::calc_column_as_vector</definition>
        <argsstring>(const Table&lt; T &gt; &amp;t, typename Table&lt; T &gt;::I x)</argsstring>
        <name>calc_column_as_vector</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>typename <ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; T &gt;::I</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="212" column="5" bodyfile="libs/core/src/core/table.h" bodystart="212" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2caf8039850e0643911fd5f1d6d9891f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::calc_row_as_vector</definition>
        <argsstring>(const Table&lt; T &gt; &amp;t, typename Table&lt; T &gt;::I y)</argsstring>
        <name>calc_row_as_vector</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>typename <ref refid="structeuphoria_1_1core_1_1Table" kindref="compound">Table</ref>&lt; T &gt;::I</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table.h" line="226" column="5" bodyfile="libs/core/src/core/table.h" bodystart="226" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1abc766420e9c631249ae74109426fba28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::set_white_noise</definition>
        <argsstring>(BoolTable *world, Lrud&lt; BorderSetupRule &gt; border_control, std::function&lt; bool()&gt; rng)</argsstring>
        <name>set_white_noise</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" kindref="member">BoolTable</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1acb9120f582881616e08787e08654e252" kindref="member">BorderSetupRule</ref> &gt;</type>
          <declname>border_control</declname>
        </param>
        <param>
          <type>std::function&lt; bool()&gt;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="28" column="5" declfile="libs/core/src/core/table_bool.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a0aa42971cbe1c95237dbfa6f11e82ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::count_walls_manhattan</definition>
        <argsstring>(const BoolTable &amp;world, Lrud&lt; OutsideRule &gt; outside_rule, int cx, int cy, int step, bool include_self)</argsstring>
        <name>count_walls_manhattan</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" kindref="member">BoolTable</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430" kindref="member">OutsideRule</ref> &gt;</type>
          <declname>outside_rule</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="46" column="5" declfile="libs/core/src/core/table_bool.h" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a9f2e5041a77648bccc2739a54fd7aab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::count_walls_plus</definition>
        <argsstring>(const BoolTable &amp;world, Lrud&lt; OutsideRule &gt; outside_rule, int cx, int cy, int step, bool include_self)</argsstring>
        <name>count_walls_plus</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" kindref="member">BoolTable</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430" kindref="member">OutsideRule</ref> &gt;</type>
          <declname>outside_rule</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="60" column="5" declfile="libs/core/src/core/table_bool.h" declline="60" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3efb1a250a4840caad86546f453302bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int euphoria::core::count_walls_box</definition>
        <argsstring>(const BoolTable &amp;world, Lrud&lt; OutsideRule &gt; outside_rule, int cx, int cy, int step, bool include_self)</argsstring>
        <name>count_walls_box</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" kindref="member">BoolTable</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430" kindref="member">OutsideRule</ref> &gt;</type>
          <declname>outside_rule</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="74" column="5" declfile="libs/core/src/core/table_bool.h" declline="74" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a2cbb8344138478aacc923fe444136565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::smooth_map</definition>
        <argsstring>(BoolTable *world, Lrud&lt; OutsideRule &gt; outside_rule, std::function&lt; std::optional&lt; bool &gt;(bool, const WallCounter &amp;)&gt; smooth_function)</argsstring>
        <name>smooth_map</name>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" kindref="member">BoolTable</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430" kindref="member">OutsideRule</ref> &gt;</type>
          <declname>outside_rule</declname>
        </param>
        <param>
          <type>std::function&lt; std::optional&lt; bool &gt;(bool, const <ref refid="structeuphoria_1_1core_1_1WallCounter" kindref="compound">WallCounter</ref> &amp;)&gt;</type>
          <declname>smooth_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="118" column="5" declfile="libs/core/src/core/table_bool.h" declline="118" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a97ee9e9ee840f9c76b82218e3565e70f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &gt;</type>
        <definition>std::vector&lt;Vec2i&gt; euphoria::core::find_empty_blocks</definition>
        <argsstring>(const BoolTable &amp;world)</argsstring>
        <name>find_empty_blocks</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" kindref="member">BoolTable</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="131" column="5" declfile="libs/core/src/core/table_bool.h" declline="131" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8ed8ebe41f035249c1fd168ad48e579c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &gt;</type>
        <definition>std::vector&lt;Vec2i&gt; euphoria::core::find_flood_fill_items</definition>
        <argsstring>(const BoolTable &amp;world, const Vec2i &amp;start, bool allow_diagonals)</argsstring>
        <name>find_flood_fill_items</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" kindref="member">BoolTable</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_diagonals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="134" column="5" declfile="libs/core/src/core/table_bool.h" declline="134" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3be668ae08d2ddd9dc0ccc3bcacecc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;Vec2i&gt; &gt; euphoria::core::find_empty_regions</definition>
        <argsstring>(const BoolTable &amp;world, bool allow_diagonals)</argsstring>
        <name>find_empty_regions</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" kindref="member">BoolTable</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_diagonals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="142" column="5" declfile="libs/core/src/core/table_bool.h" declline="142" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a1bb578b66fda67f420879ab2cc8814a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref></type>
        <definition>Image euphoria::core::draw</definition>
        <argsstring>(const BoolTable &amp;world, Rgbai wall_color, Rgbai space_color, int scale, std::optional&lt; BorderSettings &gt; border)</argsstring>
        <name>draw</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1aff3502411f32d5f6edb01ab92f9016aa" kindref="member">BoolTable</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref></type>
          <declname>wall_color</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Rgbai" kindref="compound">Rgbai</ref></type>
          <declname>space_color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="structeuphoria_1_1core_1_1BorderSettings" kindref="compound">BorderSettings</ref> &gt;</type>
          <declname>border</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_bool.h" line="155" column="5" declfile="libs/core/src/core/table_bool.h" declline="155" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8faf92d2866e17a8034c2508fe1903c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a51bbf4c8bfd3a69ac3c1bf95b58ba5ca" kindref="member">StringTable</ref></type>
        <definition>StringTable euphoria::core::table_from_csv</definition>
        <argsstring>(const std::string &amp;data, const CsvParserOptions &amp;options=CsvParserOptions())</argsstring>
        <name>table_from_csv</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1CsvParserOptions" kindref="compound">CsvParserOptions</ref> &amp;</type>
          <declname>options</declname>
          <defval><ref refid="structeuphoria_1_1core_1_1CsvParserOptions" kindref="compound">CsvParserOptions</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_string.h" line="77" column="5" declfile="libs/core/src/core/table_string.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a5b981aa64b4a67758a94b9fea52847f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::print_table_simple</definition>
        <argsstring>(std::ostream &amp;out, const StringTable &amp;table)</argsstring>
        <name>print_table_simple</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a51bbf4c8bfd3a69ac3c1bf95b58ba5ca" kindref="member">StringTable</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_string.h" line="93" column="5" declfile="libs/core/src/core/table_string.h" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a6841ec9b3fe3441e4c6e00c3be424f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::print_table_grid</definition>
        <argsstring>(std::ostream &amp;out, const StringTable &amp;table)</argsstring>
        <name>print_table_grid</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a51bbf4c8bfd3a69ac3c1bf95b58ba5ca" kindref="member">StringTable</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/table_string.h" line="106" column="5" declfile="libs/core/src/core/table_string.h" declline="106" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a600146103db748d996eecd1d9f52811c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; euphoria::core::perform_table_layout</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;pieces, T total_size, T zero=0)</argsstring>
        <name>perform_table_layout</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>pieces</declname>
        </param>
        <param>
          <type>T</type>
          <declname>total_size</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zero</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Calculates a table layout based on the input layout. </para>
        </briefdescription>
        <detaileddescription>
<para>Since rows and columns are handled the same, this functions only handled 1d tables.</para>
<para>Positive values in the array mean absolute pixel size Zero values are invalid. Negative values indicate the scaling size and the exact ration will be proportional to the rest of the scaling values.</para>
<para>If available size &lt; min_size scaling areas will have &quot;zero&quot; and absolute areas will be resized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/tablelayout.h" line="22" column="5" bodyfile="libs/core/src/core/tablelayout.h" bodystart="22" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a05915493fe83484dcce9bb7156240b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TextBoxStyle" kindref="compound">TextBoxStyle</ref></type>
        <definition>TextBoxStyle euphoria::core::terminal_style</definition>
        <argsstring>()</argsstring>
        <name>terminal_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="37" column="5" declfile="libs/core/src/core/textbox.h" declline="37" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa7b14bf60ad9963b7b83fcc532811514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TextBoxStyle" kindref="compound">TextBoxStyle</ref></type>
        <definition>TextBoxStyle euphoria::core::utf8_straight_style</definition>
        <argsstring>()</argsstring>
        <name>utf8_straight_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="40" column="5" declfile="libs/core/src/core/textbox.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a99f0f18fc86a9caf100de238cf25c121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TextBoxStyle" kindref="compound">TextBoxStyle</ref></type>
        <definition>TextBoxStyle euphoria::core::utf8_rounded_style</definition>
        <argsstring>()</argsstring>
        <name>utf8_rounded_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="43" column="5" declfile="libs/core/src/core/textbox.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aea08ef325c7dd920460e5c1a9bde0773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TextBoxStyle" kindref="compound">TextBoxStyle</ref></type>
        <definition>TextBoxStyle euphoria::core::utf_8double_line_style</definition>
        <argsstring>()</argsstring>
        <name>utf_8double_line_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="46" column="5" declfile="libs/core/src/core/textbox.h" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1add8a0085eb2b52e30469a79fc164051b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1TextBoxStyle" kindref="compound">TextBoxStyle</ref></type>
        <definition>TextBoxStyle euphoria::core::ascii_style</definition>
        <argsstring>()</argsstring>
        <name>ascii_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textbox.h" line="49" column="5" declfile="libs/core/src/core/textbox.h" declline="49" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aded4d4a4ba49f34ea452a873c289b41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::is_ident_start</definition>
        <argsstring>(char c)</argsstring>
        <name>is_ident_start</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/textfileparser.h" line="48" column="5" declfile="libs/core/src/core/textfileparser.h" declline="48" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad45f0136fd1c951b4958b7d95cb15ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a41020bc8b8bbff3320d0f2f637cb0288" kindref="member">TimePoint</ref></type>
        <definition>TimePoint euphoria::core::time_point_now</definition>
        <argsstring>()</argsstring>
        <name>time_point_now</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/timepoint.h" line="11" column="5" declfile="libs/core/src/core/timepoint.h" declline="11" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a1b25ff4404e21793b3c174495dee427d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::get_seconds_between</definition>
        <argsstring>(const TimePoint &amp;start, const TimePoint &amp;end)</argsstring>
        <name>get_seconds_between</name>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a41020bc8b8bbff3320d0f2f637cb0288" kindref="member">TimePoint</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a41020bc8b8bbff3320d0f2f637cb0288" kindref="member">TimePoint</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/timepoint.h" line="14" column="5" declfile="libs/core/src/core/timepoint.h" declline="14" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a0db9800e07c5d137f8b82939eb4d8aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename String</type>
          </param>
          <param>
            <type>typename OnCodepoint</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::utf8_to_codepoints</definition>
        <argsstring>(const String &amp;string, OnCodepoint on_codepoint)</argsstring>
        <name>utf8_to_codepoints</name>
        <param>
          <type>const String &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>OnCodepoint</type>
          <declname>on_codepoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/utf8.h" line="11" column="10" bodyfile="libs/core/src/core/utf8.h" bodystart="11" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae59af018249db154be922bca4442f603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
        <definition>Vec2&lt;T&gt; euphoria::core::operator+</definition>
        <argsstring>(const Vec2&lt; T &gt; &amp;lhs, const Vec2&lt; O &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; O &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Math operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="244" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="244" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1add3e52723eecfec645d13ffe11b59c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
        <definition>Vec2&lt;T&gt; euphoria::core::operator-</definition>
        <argsstring>(const Vec2&lt; T &gt; &amp;lhs, const Vec2&lt; O &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; O &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="253" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="253" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a9a90cde318ea2fb2639088764e757dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Vec2&lt; T &gt; &amp;lhs, const Vec2&lt; O &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; O &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="262" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="262" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3ae9de242b30fa9007af0ce1b34aea32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator!=</definition>
        <argsstring>(const Vec2&lt; T &gt; &amp;lhs, const Vec2&lt; O &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; O &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="272" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afcab8487eb7d6d9f9e0a6ce38e478339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
        <definition>Vec2&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Vec2&lt; T &gt; &amp;lhs, const O &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const O &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="278" column="10" bodyfile="libs/core/src/core/vec2.h" bodystart="278" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1affe8fa2256822cf25d1a48e4691ef123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
        <definition>Vec2&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const O &amp;lhs, const Vec2&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const O &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="286" column="10" bodyfile="libs/core/src/core/vec2.h" bodystart="286" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1abd9df82380287414d0b636d8ab8da5fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
        <definition>Vec2&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Unit2&lt; T &gt; &amp;lhs, const O &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Unit2" kindref="compound">Unit2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const O &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="294" column="10" bodyfile="libs/core/src/core/vec2.h" bodystart="294" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a3df7325311139e7d5fe66c1aabf755e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
        <definition>Vec2&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const O &amp;lhs, const Unit2&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const O &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Unit2" kindref="compound">Unit2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="302" column="10" bodyfile="libs/core/src/core/vec2.h" bodystart="302" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab97972e0566bffdb72284a217a6a2b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename O</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
        <definition>Vec2&lt;T&gt; euphoria::core::operator/</definition>
        <argsstring>(const Vec2&lt; T &gt; &amp;lhs, const O &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const O &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="311" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="311" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ae69fd077021d83b02b58438667ddf6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt;</type>
        <definition>Vec2&lt;T&gt; euphoria::core::component_multiply</definition>
        <argsstring>(const Vec2&lt; T &gt; &amp;lhs, const Vec2&lt; T &gt; &amp;rhs)</argsstring>
        <name>component_multiply</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="320" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a65e85d334bfc56fef1d010f58e2a0309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Vec2&lt; T &gt; &amp;lhs, const Vec2&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="331" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ab0c3340d50015b75b9a736fb015974ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Unit2&lt; T &gt; &amp;lhs, const Unit2&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Unit2" kindref="compound">Unit2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Unit2" kindref="compound">Unit2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="338" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a78e226e43a22202292fd7e07eaab197d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::dot</definition>
        <argsstring>(const Vec2&lt; T &gt; &amp;lhs, const Vec2&lt; T &gt; &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="349" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afb328087b90af83ce1f6205f72ca8e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>S &amp;</type>
        <definition>S&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(S &amp;s, const Vec2&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>S &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec2" kindref="compound">Vec2</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Printing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="376" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="377" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a20597d2661e8c532a9679d57dd4209b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>S &amp;</type>
        <definition>S&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(S &amp;s, const Unit2&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>S &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Unit2" kindref="compound">Unit2</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="384" column="5" bodyfile="libs/core/src/core/vec2.h" bodystart="385" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a07aaa3c15a16c9a1e9736a731812d52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeuphoria_1_1core_1a3d30e5ea309cd81baf38b43901c3d581" kindref="member">Unit2f</ref></type>
        <definition>Unit2f euphoria::core::create_random_unit</definition>
        <argsstring>(Random *random)</argsstring>
        <name>create_random_unit</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec2.h" line="405" column="12" declfile="libs/core/src/core/vec2.h" declline="405" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1aa93f967e91d02188a544ed6014b035ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt;T&gt; euphoria::core::operator+</definition>
        <argsstring>(const Vec3&lt; T &gt; &amp;lhs, const Vec3&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Math operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="276" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="276" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a358241a8b5c8eb7dd0362e1e4db7e68c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt;T&gt; euphoria::core::operator-</definition>
        <argsstring>(const Vec3&lt; T &gt; &amp;lhs, const Vec3&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="285" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="285" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a36be7115f5428ac1ca78292f3641cfe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(T lhs, const Vec3&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="293" column="10" bodyfile="libs/core/src/core/vec3.h" bodystart="293" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a596c20ed89b9bd8509f603791695bc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt;T&gt; euphoria::core::operator*</definition>
        <argsstring>(const Vec3&lt; T &gt; &amp;lhs, T rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="301" column="10" bodyfile="libs/core/src/core/vec3.h" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a46e76f28a86d76f5d143f69b51570194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt;T&gt; euphoria::core::operator/</definition>
        <argsstring>(const Vec3&lt; T &gt; &amp;lhs, T rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="310" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="310" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a95bd0d269503ee3ced076fcf5eba435d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt;T&gt; euphoria::core::operator/</definition>
        <argsstring>(T lhs, const Vec3&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>T</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="319" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="319" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a117e6254d9d3efc80d37763114a5b02f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt;T&gt; euphoria::core::component_multiply</definition>
        <argsstring>(const Vec3&lt; T &gt; &amp;lhs, const Vec3&lt; T &gt; &amp;rhs)</argsstring>
        <name>component_multiply</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="327" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad56c3a577678c28a1f7bf69e0b086097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename K</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Vec3&lt; T &gt; &amp;lhs, const Vec3&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="337" column="10" bodyfile="libs/core/src/core/vec3.h" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a63455b6e7263b96893722be3eaa3fe33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename K</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Unit3&lt; T &gt; &amp;lhs, const Unit3&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Unit3" kindref="compound">Unit3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Unit3" kindref="compound">Unit3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="343" column="10" bodyfile="libs/core/src/core/vec3.h" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1af89679eb304e9eb1ace4f97fcbd4d443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename K</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Scale3&lt; T &gt; &amp;lhs, const Scale3&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Scale3" kindref="compound">Scale3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Scale3" kindref="compound">Scale3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="349" column="10" bodyfile="libs/core/src/core/vec3.h" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a65ee3463d2cc505ec17f215676f5c0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T euphoria::core::dot</definition>
        <argsstring>(const Vec3&lt; T &gt; &amp;lhs, const Vec3&lt; T &gt; &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="360" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ac835baed65357585550aa43b5f430a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt;T&gt; euphoria::core::cross</definition>
        <argsstring>(const Vec3&lt; T &gt; &amp;v, const Vec3&lt; T &gt; u)</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="367" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="367" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1adce56aff780ca418f0e1469aee121173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Vec3&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Transformations. </para>
        </briefdescription>
        <detaileddescription>
<para>Printing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="386" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a1367801d1362739dbb1d04f45d1934f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Unit3&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Unit3" kindref="compound">Unit3</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="393" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="394" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a34a5055297ce70f1753cbae221f68638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Scale3&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Scale3" kindref="compound">Scale3</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec3.h" line="400" column="5" bodyfile="libs/core/src/core/vec3.h" bodystart="401" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a7e0d7ac931537fe7a2a8ab6d26b7749f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::core::operator==</definition>
        <argsstring>(const Vec4&lt; T &gt; &amp;lhs, const Vec4&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec4.h" line="69" column="5" bodyfile="libs/core/src/core/vec4.h" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a1f0c72c975d9e46295dd06fb884c9df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::core::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Vec4&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec4.h" line="76" column="5" bodyfile="libs/core/src/core/vec4.h" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1afc08284570ede5fac73ca62241e1856a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; T &gt;</type>
        <definition>Vec4&lt;T&gt; euphoria::core::component_multiply</definition>
        <argsstring>(const Vec4&lt; T &gt; &amp;lhs, const Vec4&lt; T &gt; &amp;rhs)</argsstring>
        <name>component_multiply</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Vec4" kindref="compound">Vec4</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vec4.h" line="85" column="5" bodyfile="libs/core/src/core/vec4.h" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1ad33b1db5055186494b0723e65b2e56b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Ray3f" kindref="compound">Ray3f</ref></type>
        <definition>Ray3f euphoria::core::mouse_to_ray</definition>
        <argsstring>(const CompiledCamera3 &amp;camera, const Viewport &amp;viewport, const Vec2i &amp;position)</argsstring>
        <name>mouse_to_ray</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1CompiledCamera3" kindref="compound">CompiledCamera3</ref> &amp;</type>
          <declname>camera</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Viewport" kindref="compound">Viewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/viewport.h" line="24" column="11" declfile="libs/core/src/core/viewport.h" declline="24" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a8b7019f0f23829affc2a36f1ca9d4e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1UnitRay3f" kindref="compound">UnitRay3f</ref></type>
        <definition>UnitRay3f euphoria::core::mouse_to_unit_ray</definition>
        <argsstring>(const CompiledCamera3 &amp;camera, const Viewport &amp;viewport, const Vec2i &amp;position)</argsstring>
        <name>mouse_to_unit_ray</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1CompiledCamera3" kindref="compound">CompiledCamera3</ref> &amp;</type>
          <declname>camera</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Viewport" kindref="compound">Viewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceeuphoria_1_1core_1a0cb40771b3579f3c7f3c2134fe4db2e9" kindref="member">Vec2i</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/viewport.h" line="31" column="15" declfile="libs/core/src/core/viewport.h" declline="31" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1a78ee0507372ffc4a8e169633a19f0eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::word_wrap</definition>
        <argsstring>(const std::string &amp;str, std::function&lt; bool(const std::string &amp;)&gt; measure)</argsstring>
        <name>word_wrap</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const std::string &amp;)&gt;</type>
          <declname>measure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/wordwrap.h" line="11" column="5" declfile="libs/core/src/core/wordwrap.h" declline="11" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/aabb.h" line="9" column="1"/>
  </compounddef>
</doxygen>

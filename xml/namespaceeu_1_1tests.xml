<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceeu_1_1tests" kind="namespace" language="C++">
    <compoundname>eu::tests</compoundname>
    <innerclass refid="structeu_1_1tests_1_1ApproxData" prot="public">eu::tests::ApproxData</innerclass>
    <innernamespace refid="namespaceeu_1_1tests_1_1custom">eu::tests::custom</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeu_1_1tests_1a429f06a337ab5eca77d8f680617bbb3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(const T &amp;lhs, const T &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <qualifiedname>eu::tests::is_approximately_equal</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1R" kindref="compound">T</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1R" kindref="compound">T</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="23" column="5" declfile="libs/tests/src/tests/approx.h" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1af345ce71ac050b0e3ecdf61c8bbb060d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(float const &amp;lhs, float const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <qualifiedname>eu::tests::is_approximately_equal</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">float</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">float</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="28" column="5" declfile="libs/tests/src/tests/approx.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1af709b49e5d6bd250c6bc5fadbe98dcaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; eu::tests::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const custom::Approx&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>eu::tests::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1custom_1_1Approx" kindref="compound">custom::Approx</ref>&lt; <ref refid="structeu_1_1R" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="114" column="5" bodyfile="libs/tests/src/tests/approx.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a64576baee16640d9d585f9e8508e9ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1tests_1_1custom_1_1Approx" kindref="compound">custom::Approx</ref>&lt; <ref refid="structeu_1_1R" kindref="compound">T</ref> &gt;</type>
        <definition>custom::Approx&lt; T &gt; eu::tests::approx</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>approx</name>
        <qualifiedname>eu::tests::approx</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">T</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="125" column="5" bodyfile="libs/tests/src/tests/approx.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1aa6a9f3d10ed999c310b7754e3fbbed7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(v2 const &amp;lhs, v2 const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <qualifiedname>eu::tests::is_approximately_equal</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.h" line="15" column="5" declfile="libs/tests/src/tests/approx_equal.h" declline="15" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1ae6f8fee0830865aa57bf975d60cb5c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(n2 const &amp;lhs, n2 const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <qualifiedname>eu::tests::is_approximately_equal</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1n2" kindref="compound">n2</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1n2" kindref="compound">n2</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.h" line="22" column="5" declfile="libs/tests/src/tests/approx_equal.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a6fc2935563b7eb53a45df4f07fc00ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(v3 const &amp;lhs, v3 const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <qualifiedname>eu::tests::is_approximately_equal</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1v3" kindref="compound">v3</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1v3" kindref="compound">v3</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.h" line="29" column="5" declfile="libs/tests/src/tests/approx_equal.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1ad6b9776427e5e68d4a5b5520a9c892c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(v4 const &amp;lhs, v4 const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <qualifiedname>eu::tests::is_approximately_equal</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1v4" kindref="compound">v4</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1v4" kindref="compound">v4</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.h" line="36" column="5" declfile="libs/tests/src/tests/approx_equal.h" declline="36" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a8625a5c60ac58efeb4f0b35d380eb5e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(n3 const &amp;lhs, n3 const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <qualifiedname>eu::tests::is_approximately_equal</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1n3" kindref="compound">n3</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1n3" kindref="compound">n3</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.h" line="43" column="5" declfile="libs/tests/src/tests/approx_equal.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a1d81d87b4c3e1cc42b4788a8e8c49f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(Q const &amp;lhs, Q const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <qualifiedname>eu::tests::is_approximately_equal</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.h" line="50" column="5" declfile="libs/tests/src/tests/approx_equal.h" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a8ec13d4ff8a062c1e11223fdae314383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(AA const &amp;lhs, AA const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <qualifiedname>eu::tests::is_approximately_equal</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1AA" kindref="compound">AA</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1AA" kindref="compound">AA</ref> <ref refid="structeu_1_1R" kindref="compound">const</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.h" line="57" column="5" declfile="libs/tests/src/tests/approx_equal.h" declline="57" declcolumn="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/tests/src/tests/approx.h" line="10" column="1"/>
  </compounddef>
</doxygen>

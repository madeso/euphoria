<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceeu_1_1tests" kind="namespace" language="C++">
    <compoundname>eu::tests</compoundname>
    <innerclass refid="structeu_1_1tests_1_1ApproxData" prot="public">eu::tests::ApproxData</innerclass>
    <innerclass refid="structeu_1_1tests_1_1FalseString" prot="public">eu::tests::FalseString</innerclass>
    <innernamespace refid="namespaceeu_1_1tests_1_1custom">eu::tests::custom</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeu_1_1tests_1af345ce71ac050b0e3ecdf61c8bbb060d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(float const &amp;lhs, float const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type>float const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.cc" line="19" column="5" bodyfile="libs/tests/src/tests/approx.cc" bodystart="20" bodyend="46" declfile="libs/tests/src/tests/approx.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a429f06a337ab5eca77d8f680617bbb3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(const T &amp;lhs, const T &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="23" column="5" declfile="libs/tests/src/tests/approx.h" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1afa0999b9bfbdab97b21eaae368471724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; eu::tests::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const custom::Approx&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1custom_1_1Approx" kindref="compound">custom::Approx</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="117" column="5" bodyfile="libs/tests/src/tests/approx.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a4b0aba80b59059e6bb077580be52f819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1tests_1_1custom_1_1Approx" kindref="compound">custom::Approx</ref>&lt; T &gt;</type>
        <definition>custom::Approx&lt;T&gt; eu::tests::approx</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>approx</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="128" column="5" bodyfile="libs/tests/src/tests/approx.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1ad1779ec1241adec7990ffaad2a6db8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal_xyz</definition>
        <argsstring>(T const &amp;lhs, T const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal_xyz</name>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="7" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="7" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a530eae83c0beb3b7032d54d97ce90eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(vec3f const &amp;lhs, vec3f const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="16" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="16" bodyend="22" declfile="libs/tests/src/tests/approx_equal.h" declline="15" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1aecb539dd14f5c5d64a75c8e234b69783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(vec4f const &amp;lhs, vec4f const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type><ref refid="structeu_1_1vec4f" kindref="compound">vec4f</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1vec4f" kindref="compound">vec4f</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="26" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="26" bodyend="36" declfile="libs/tests/src/tests/approx_equal.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a187bc6bacf77cbbdf4cb8dd5ee4df75d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(Rgb const &amp;lhs, Rgb const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="40" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="40" bodyend="48" declfile="libs/tests/src/tests/approx_equal.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a85e87035d9200eddb645e161e5103594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(Hsl const &amp;lhs, Hsl const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type><ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="52" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="52" bodyend="60" declfile="libs/tests/src/tests/approx_equal.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1af74f4364a4a7486cc406a8bd9b4eb1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(unit3f const &amp;lhs, unit3f const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type><ref refid="structeu_1_1unit3f" kindref="compound">unit3f</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1unit3f" kindref="compound">unit3f</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="64" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="64" bodyend="70" declfile="libs/tests/src/tests/approx_equal.h" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1ad715452c6df4d6266a9102adff2b733e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(Rgba const &amp;lhs, Rgba const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type><ref refid="structeu_1_1Rgba" kindref="compound">Rgba</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1Rgba" kindref="compound">Rgba</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="74" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="74" bodyend="83" declfile="libs/tests/src/tests/approx_equal.h" declline="36" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a6a7426293aa88c8b7f58b45348808d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(quatf const &amp;lhs, quatf const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="88" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="88" bodyend="94" declfile="libs/tests/src/tests/approx_equal.h" declline="57" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1ad830165614f5e51d9c5d936f593a582e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(AxisAngle const &amp;lhs, AxisAngle const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type><ref refid="structeu_1_1AxisAngle" kindref="compound">AxisAngle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1AxisAngle" kindref="compound">AxisAngle</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="98" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="98" bodyend="121" declfile="libs/tests/src/tests/approx_equal.h" declline="64" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1aa18eb13078e5d12971ae73982cd50039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::tests::is_approximately_equal</definition>
        <argsstring>(mat4f const &amp;lhs, mat4f const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>is_approximately_equal</name>
        <param>
          <type><ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="126" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="126" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a8fd2f73b23ff07027fc254f2c8ed915b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; eu::tests::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;s, const FalseString &amp;f)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1tests_1_1FalseString" kindref="compound">FalseString</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/falsestring.cc" line="25" column="5" bodyfile="libs/tests/src/tests/falsestring.cc" bodystart="26" bodyend="37" declfile="libs/tests/src/tests/falsestring.h" declline="19" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a1d2a6c9bfd7efc4f4a472b41184ba889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1tests_1_1FalseString" kindref="compound">FalseString</ref></type>
        <definition>FalseString eu::tests::is_string_equal</definition>
        <argsstring>(const std::string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>is_string_equal</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/stringeq.cc" line="24" column="5" bodyfile="libs/tests/src/tests/stringeq.cc" bodystart="24" bodyend="47" declfile="libs/tests/src/tests/stringeq.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1ad7e978e859cd47730b3c654f073cd5c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1tests_1_1FalseString" kindref="compound">FalseString</ref></type>
        <definition>FalseString eu::tests::is_string_equal</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;lhs, const std::vector&lt; std::string &gt; &amp;rhs)</argsstring>
        <name>is_string_equal</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/stringeq.cc" line="51" column="5" bodyfile="libs/tests/src/tests/stringeq.cc" bodystart="51" bodyend="101" declfile="libs/tests/src/tests/stringeq.h" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a1ec620443f8af47cdc278fffe8d1a3f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TToString</type>
          </param>
          <param>
            <type>typename TCompare</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1tests_1_1FalseString" kindref="compound">FalseString</ref></type>
        <definition>FalseString eu::tests::is_vector_equal</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;lhs, const std::vector&lt; T &gt; &amp;rhs, TToString to_string_functor, TCompare compare_functor)</argsstring>
        <name>is_vector_equal</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>TToString</type>
          <declname>to_string_functor</declname>
        </param>
        <param>
          <type>TCompare</type>
          <declname>compare_functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/vectorequals.h" line="23" column="5" bodyfile="libs/tests/src/tests/vectorequals.h" bodystart="24" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a8a4aebead962bcb0ff2d3a8dab3d74c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TConverter</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string eu::tests::from_vector_to_string_impl</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v, bool one_line, TConverter converter)</argsstring>
        <name>from_vector_to_string_impl</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>one_line</declname>
        </param>
        <param>
          <type>TConverter</type>
          <declname>converter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/vectortostring.h" line="14" column="5" bodyfile="libs/tests/src/tests/vectortostring.h" bodystart="15" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a395026b52975360623821c3dbbcfaecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TConverter</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::string, bool &gt;</type>
        <definition>std::pair&lt;std::string, bool&gt; eu::tests::from_vector_to_string_ex</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v, TConverter converter)</argsstring>
        <name>from_vector_to_string_ex</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>TConverter</type>
          <declname>converter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/vectortostring.h" line="49" column="5" bodyfile="libs/tests/src/tests/vectortostring.h" bodystart="49" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1tests_1a6a1ce9e6480f3f263330f6910813399e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TConverter</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string eu::tests::from_vector_to_string</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v, TConverter converter)</argsstring>
        <name>from_vector_to_string</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>TConverter</type>
          <declname>converter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/vectortostring.h" line="72" column="5" bodyfile="libs/tests/src/tests/vectortostring.h" bodystart="72" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/tests/src/tests/approx.cc" line="15" column="1"/>
  </compounddef>
</doxygen>

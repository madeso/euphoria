<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceeu_1_1assertlib" kind="namespace" language="C++">
    <compoundname>eu::assertlib</compoundname>
    <innerclass refid="structeu_1_1assertlib_1_1AssertArgumentValue" prot="private">eu::assertlib::AssertArgumentValue</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeu_1_1assertlib_1a7ca844c158bbf7e734f29b4312c6db01" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1R" kindref="compound">void</ref></type>
        <definition>void eu::assertlib::begin_throwing</definition>
        <argsstring>()</argsstring>
        <name>begin_throwing</name>
        <qualifiedname>eu::assertlib::begin_throwing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="123" column="5" declfile="libs/assert/src/assert/assert.h" declline="123" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1assertlib_1a0edb7b21ba4d86e980bd40b0f63a0c2e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::assertlib::is_throwing</definition>
        <argsstring>()</argsstring>
        <name>is_throwing</name>
        <qualifiedname>eu::assertlib::is_throwing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="127" column="5" declfile="libs/assert/src/assert/assert.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1assertlib_1adc0b8ea0bf3e97d51c38156ad5484a67" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1R" kindref="compound">void</ref></type>
        <definition>void eu::assertlib::on_assert</definition>
        <argsstring>(const char *expression, int line, const char *file, const char *argstr, const std::vector&lt; AssertArgumentValue &gt; &amp;arguments, const char *function)</argsstring>
        <name>on_assert</name>
        <qualifiedname>eu::assertlib::on_assert</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1R" kindref="compound">char</ref> *</type>
          <declname>expression</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">int</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1R" kindref="compound">char</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1R" kindref="compound">char</ref> *</type>
          <declname>argstr</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> std::vector&lt; AssertArgumentValue &gt; &amp;</type>
          <declname>arguments</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1R" kindref="compound">char</ref> *</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="131" column="5" declfile="libs/assert/src/assert/assert.h" declline="131" declcolumn="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/assert/src/assert/assert.h" line="108" column="1"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::vfs::FileSystem</compoundname>
    <includes refid="vfs_8h" local="no">vfs.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1af1e75f61356399ea496ceaea4707ddef" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1vfs_1_1ReadRoot" kindref="compound">ReadRoot</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;ReadRoot&gt; &gt; euphoria::core::vfs::FileSystem::read_roots</definition>
        <argsstring></argsstring>
        <name>read_roots</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="113" column="21" bodyfile="libs/core/src/core/vfs.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a284f39519a5d33d137db1e1519090e2a" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1vfs_1_1WriteRoot" kindref="compound">vfs::WriteRoot</ref> &gt;</type>
        <definition>std::shared_ptr&lt;vfs::WriteRoot&gt; euphoria::core::vfs::FileSystem::write_root</definition>
        <argsstring></argsstring>
        <name>write_root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="114" column="25" bodyfile="libs/core/src/core/vfs.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a7a60f6a96f32969a7794e682a1f2d7a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::vfs::FileSystem::FileSystem</definition>
        <argsstring>()</argsstring>
        <name>FileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="77" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a3be7cfac12356772b488f532e192de68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::vfs::FileSystem::~FileSystem</definition>
        <argsstring>()</argsstring>
        <name>~FileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="78" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a296ac9bd5112918482a1bbe845d76017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::vfs::FileSystem::FileSystem</definition>
        <argsstring>(const FileSystem &amp;)=delete</argsstring>
        <name>FileSystem</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">FileSystem</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="80" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1ac92bff5a6c9ffe1a41227f9314d2a4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::vfs::FileSystem::FileSystem</definition>
        <argsstring>(FileSystem &amp;&amp;)=delete</argsstring>
        <name>FileSystem</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">FileSystem</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="81" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a95543bd754c5e16be957fe9c3b82131b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::vfs::FileSystem::operator=</definition>
        <argsstring>(const FileSystem &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">FileSystem</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="82" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1ad1f3542bd09a441c65b8ff8e39e4d62d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::vfs::FileSystem::operator=</definition>
        <argsstring>(FileSystem &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">FileSystem</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="83" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1aecf4a0a6048b1ea6d87d692f08ef84ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::vfs::FileSystem::add_read_root</definition>
        <argsstring>(const std::shared_ptr&lt; ReadRoot &gt; &amp;root)</argsstring>
        <name>add_read_root</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1vfs_1_1ReadRoot" kindref="compound">ReadRoot</ref> &gt; &amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="86" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1adb569d43813d28da1828324dc456ce44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::vfs::FileSystem::set_write_root</definition>
        <argsstring>(const std::shared_ptr&lt; vfs::WriteRoot &gt; &amp;root)</argsstring>
        <name>set_write_root</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1vfs_1_1WriteRoot" kindref="compound">vfs::WriteRoot</ref> &gt; &amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="89" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a2004537b10bbaed6e0858e93fc03e00e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> &gt;</type>
        <definition>std::shared_ptr&lt;MemoryChunk&gt; euphoria::core::vfs::FileSystem::read_file</definition>
        <argsstring>(const FilePath &amp;path)</argsstring>
        <name>read_file</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="92" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a50e20024f030ffcd0237a14111af52cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::vfs::FileSystem::write_file</definition>
        <argsstring>(const FilePath &amp;path, std::shared_ptr&lt; MemoryChunk &gt; data)</argsstring>
        <name>write_file</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="95" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a854600d3a2ebc8cd06ca157754ec8b73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structeuphoria_1_1core_1_1vfs_1_1ListedFile" kindref="compound">ListedFile</ref> &gt;</type>
        <definition>std::vector&lt;ListedFile&gt; euphoria::core::vfs::FileSystem::list_files</definition>
        <argsstring>(const DirPath &amp;path)</argsstring>
        <name>list_files</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="98" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1ab9ec2c44ee534fe5bd1b7727a36a541a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::vfs::FileSystem::get_roots_as_string</definition>
        <argsstring>()</argsstring>
        <name>get_roots_as_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="101" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1aa55d85f3c41cdcddc95b5b9361779b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::vfs::FileSystem::read_file_to_string</definition>
        <argsstring>(const FilePath &amp;path, std::string *source)</argsstring>
        <name>read_file_to_string</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs.h" line="105" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/vfs.h" line="76" column="1" bodyfile="libs/core/src/core/vfs.h" bodystart="75" bodyend="115"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1aecf4a0a6048b1ea6d87d692f08ef84ba" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>add_read_root</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a7a60f6a96f32969a7794e682a1f2d7a4" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>FileSystem</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a296ac9bd5112918482a1bbe845d76017" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>FileSystem</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1ac92bff5a6c9ffe1a41227f9314d2a4a4" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>FileSystem</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1ab9ec2c44ee534fe5bd1b7727a36a541a" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>get_roots_as_string</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a854600d3a2ebc8cd06ca157754ec8b73" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>list_files</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a95543bd754c5e16be957fe9c3b82131b" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>operator=</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1ad1f3542bd09a441c65b8ff8e39e4d62d" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>operator=</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a2004537b10bbaed6e0858e93fc03e00e" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>read_file</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1aa55d85f3c41cdcddc95b5b9361779b06" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>read_file_to_string</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1af1e75f61356399ea496ceaea4707ddef" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>read_roots</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1adb569d43813d28da1828324dc456ce44" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>set_write_root</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a50e20024f030ffcd0237a14111af52cf" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>write_file</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a284f39519a5d33d137db1e1519090e2a" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>write_root</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem_1a3be7cfac12356772b488f532e192de68" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FileSystem</scope><name>~FileSystem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

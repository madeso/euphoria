<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structeuphoria_1_1core_1_1generator_1_1CellularAutomata" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::generator::CellularAutomata</compoundname>
    <includes refid="generator__cell_8h" local="no">generator_cell.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1a9f2e28ba6e7556490b41fa190191199f" prot="public" static="no" mutable="no">
        <type><ref refid="structeuphoria_1_1core_1_1generator_1_1Rules" kindref="compound">generator::Rules</ref> *</type>
        <definition>generator::Rules* euphoria::core::generator::CellularAutomata::rules</definition>
        <argsstring></argsstring>
        <name>rules</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/generator_cell.h" line="45" column="26" bodyfile="libs/core/src/core/generator_cell.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1ad8a2118204ba80d7b9c81fbf21db735a" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceeuphoria_1_1core_1_1generator_1ae38b984f0569b05ec4cbc147ae02852a" kindref="member">generator::World</ref> *</type>
        <definition>generator::World* euphoria::core::generator::CellularAutomata::world</definition>
        <argsstring></argsstring>
        <name>world</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/generator_cell.h" line="46" column="26" bodyfile="libs/core/src/core/generator_cell.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1a649ca23b8295b307fdeb1c1d2ec75849" prot="public" static="no" mutable="no">
        <type><ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430" kindref="member">core::OutsideRule</ref> &gt;</type>
        <definition>Lrud&lt;core::OutsideRule&gt; euphoria::core::generator::CellularAutomata::outside_rule</definition>
        <argsstring></argsstring>
        <name>outside_rule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/generator_cell.h" line="47" column="14" bodyfile="libs/core/src/core/generator_cell.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1a31e9c09b4c09c599408491392dcb35a7" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int euphoria::core::generator::CellularAutomata::iteration</definition>
        <argsstring></argsstring>
        <name>iteration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/generator_cell.h" line="48" column="13" bodyfile="libs/core/src/core/generator_cell.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1afd8141dfb11ef6ad7b9c1b3b346ae52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::generator::CellularAutomata::CellularAutomata</definition>
        <argsstring>(generator::Rules *r, generator::World *w, const Lrud&lt; core::OutsideRule &gt; &amp;fw)</argsstring>
        <name>CellularAutomata</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1generator_1_1Rules" kindref="compound">generator::Rules</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceeuphoria_1_1core_1_1generator_1ae38b984f0569b05ec4cbc147ae02852a" kindref="member">generator::World</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Lrud" kindref="compound">Lrud</ref>&lt; <ref refid="namespaceeuphoria_1_1core_1a61c5ab965bff972d561587baef8ef430" kindref="member">core::OutsideRule</ref> &gt; &amp;</type>
          <declname>fw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/generator_cell.h" line="50" column="9" bodyfile="libs/core/src/core/generator_cell.cc" bodystart="183" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1a72893b03d00bb3eda12ee3ab72347fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::generator::CellularAutomata::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/generator_cell.h" line="52" column="14" bodyfile="libs/core/src/core/generator_cell.cc" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1aadd17e0e91478b40333b04d3e39ae550" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::core::generator::CellularAutomata::is_done</definition>
        <argsstring>() const</argsstring>
        <name>is_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/generator_cell.h" line="54" column="15" bodyfile="libs/core/src/core/generator_cell.cc" bodystart="197" bodyend="200"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>euphoria::core::Lrud&lt; core::OutsideRule &gt;</label>
        <link refid="structeuphoria_1_1core_1_1Lrud"/>
      </node>
      <node id="2">
        <label>euphoria::core::Table&lt; T &gt;</label>
        <link refid="structeuphoria_1_1core_1_1Table"/>
      </node>
      <node id="3">
        <label>euphoria::core::generator::Rules</label>
        <link refid="structeuphoria_1_1core_1_1generator_1_1Rules"/>
      </node>
      <node id="1">
        <label>euphoria::core::generator::CellularAutomata</label>
        <link refid="structeuphoria_1_1core_1_1generator_1_1CellularAutomata"/>
        <childnode refid="2" relation="usage">
          <edgelabel>world</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>rules</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>outside_rule</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libs/core/src/core/generator_cell.h" line="44" column="1" bodyfile="libs/core/src/core/generator_cell.h" bodystart="43" bodyend="55"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1afd8141dfb11ef6ad7b9c1b3b346ae52e" prot="public" virt="non-virtual"><scope>euphoria::core::generator::CellularAutomata</scope><name>CellularAutomata</name></member>
      <member refid="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1aadd17e0e91478b40333b04d3e39ae550" prot="public" virt="non-virtual"><scope>euphoria::core::generator::CellularAutomata</scope><name>is_done</name></member>
      <member refid="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1a31e9c09b4c09c599408491392dcb35a7" prot="public" virt="non-virtual"><scope>euphoria::core::generator::CellularAutomata</scope><name>iteration</name></member>
      <member refid="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1a649ca23b8295b307fdeb1c1d2ec75849" prot="public" virt="non-virtual"><scope>euphoria::core::generator::CellularAutomata</scope><name>outside_rule</name></member>
      <member refid="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1a9f2e28ba6e7556490b41fa190191199f" prot="public" virt="non-virtual"><scope>euphoria::core::generator::CellularAutomata</scope><name>rules</name></member>
      <member refid="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1a72893b03d00bb3eda12ee3ab72347fff" prot="public" virt="non-virtual"><scope>euphoria::core::generator::CellularAutomata</scope><name>update</name></member>
      <member refid="structeuphoria_1_1core_1_1generator_1_1CellularAutomata_1ad8a2118204ba80d7b9c81fbf21db735a" prot="public" virt="non-virtual"><scope>euphoria::core::generator::CellularAutomata</scope><name>world</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

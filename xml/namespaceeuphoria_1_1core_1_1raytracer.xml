<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceeuphoria_1_1core_1_1raytracer" kind="namespace" language="C++">
    <compoundname>euphoria::core::raytracer</compoundname>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1Camera" prot="public">euphoria::core::raytracer::Camera</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1Collision" prot="public">euphoria::core::raytracer::Collision</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1DielectricMaterial" prot="public">euphoria::core::raytracer::DielectricMaterial</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1DiffuseMaterial" prot="public">euphoria::core::raytracer::DiffuseMaterial</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1Material" prot="public">euphoria::core::raytracer::Material</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1MetalMaterial" prot="public">euphoria::core::raytracer::MetalMaterial</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1Object" prot="public">euphoria::core::raytracer::Object</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1ScatterResult" prot="public">euphoria::core::raytracer::ScatterResult</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1Scene" prot="public">euphoria::core::raytracer::Scene</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1raytracer_1_1SphereObject" prot="public">euphoria::core::raytracer::SphereObject</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1abfd5a9b761d81e0ebaf7341827ee23af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1raytracer_1_1Object" kindref="compound">Object</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Object&gt; euphoria::core::raytracer::create_sphere</definition>
        <argsstring>(const Sphere &amp;sphere, const vec3f &amp;position, std::shared_ptr&lt; raytracer::Material &gt; material)</argsstring>
        <name>create_sphere</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Sphere" kindref="compound">Sphere</ref> &amp;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1raytracer_1_1Material" kindref="compound">raytracer::Material</ref> &gt;</type>
          <declname>material</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="80" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="81" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1ab7db55bd0459487e48ca52676ad41e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1rgb" kindref="compound">rgb</ref></type>
        <definition>rgb euphoria::core::raytracer::to_rgb</definition>
        <argsstring>(const unit3f &amp;normal)</argsstring>
        <name>to_rgb</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1unit3f" kindref="compound">unit3f</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="125" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="125" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1af41790f8067ed78ebfe5f6c3b7636779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f euphoria::core::raytracer::get_random_vec3_in_unit_sphere</definition>
        <argsstring>(Random *random)</argsstring>
        <name>get_random_vec3_in_unit_sphere</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="136" column="11" bodyfile="libs/core/src/core/raytracer.cc" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1a2182bcc3d71753ef14ccc1bbe71604b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f euphoria::core::raytracer::get_reflected</definition>
        <argsstring>(const vec3f &amp;v, const unit3f &amp;normal)</argsstring>
        <name>get_reflected</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1unit3f" kindref="compound">unit3f</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="171" column="11" bodyfile="libs/core/src/core/raytracer.cc" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1ae4bf750032f4351c84688ab2388a24c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeuphoria_1_1core_1_1vec3f" kindref="compound">vec3f</ref> &gt;</type>
        <definition>std::optional&lt;vec3f&gt; euphoria::core::raytracer::get_refracted</definition>
        <argsstring>(const unit3f &amp;uv, const unit3f &amp;normal, float ni)</argsstring>
        <name>get_refracted</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1unit3f" kindref="compound">unit3f</ref> &amp;</type>
          <declname>uv</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1unit3f" kindref="compound">unit3f</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ni</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="227" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="228" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1a29dc6138ccbbf3ec335e905fbca9523f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euphoria::core::raytracer::calc_fresnel_factor</definition>
        <argsstring>(float cosine, float ref_idx)</argsstring>
        <name>calc_fresnel_factor</name>
        <param>
          <type>float</type>
          <declname>cosine</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ref_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="248" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="248" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1afaa38b089e3fc39a69ba2bb7dcc1c33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1raytracer_1_1Material" kindref="compound">Material</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Material &gt; euphoria::core::raytracer::create_diffuse_material</definition>
        <argsstring>(const rgb &amp;albedo)</argsstring>
        <name>create_diffuse_material</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1rgb" kindref="compound">rgb</ref> &amp;</type>
          <declname>albedo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="328" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="329" bodyend="337" declfile="libs/core/src/core/raytracer.h" declline="90" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1a256bb53fc6724684e0766eb5532ec568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1raytracer_1_1Material" kindref="compound">Material</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Material &gt; euphoria::core::raytracer::create_metal_material</definition>
        <argsstring>(const rgb &amp;albedo, float fuzz)</argsstring>
        <name>create_metal_material</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1rgb" kindref="compound">rgb</ref> &amp;</type>
          <declname>albedo</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fuzz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="341" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="342" bodyend="352" declfile="libs/core/src/core/raytracer.h" declline="96" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1a40e7ae3408e08ce84920c293bc646a04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1raytracer_1_1Material" kindref="compound">Material</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Material &gt; euphoria::core::raytracer::create_dielectric_material</definition>
        <argsstring>(const rgb &amp;albedo, float refractive_index)</argsstring>
        <name>create_dielectric_material</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1rgb" kindref="compound">rgb</ref> &amp;</type>
          <declname>albedo</declname>
        </param>
        <param>
          <type>float</type>
          <declname>refractive_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="356" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="357" bodyend="367" declfile="libs/core/src/core/raytracer.h" declline="104" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1a286dfbfda49ede1c12ab66c9f7a3edca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1rgb" kindref="compound">rgb</ref></type>
        <definition>rgb euphoria::core::raytracer::get_color</definition>
        <argsstring>(const Scene &amp;scene, const UnitRay3f &amp;ray, Random *random, int depth)</argsstring>
        <name>get_color</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1raytracer_1_1Scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1UnitRay3f" kindref="compound">UnitRay3f</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="371" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="372" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1ab36e790cfeb1c8bda167f7cc9b113e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1rgb" kindref="compound">rgb</ref></type>
        <definition>rgb euphoria::core::raytracer::correct_color_using_gamma2</definition>
        <argsstring>(rgb color)</argsstring>
        <name>correct_color_using_gamma2</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1rgb" kindref="compound">rgb</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="460" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="460" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1a634651f16fd3b82293a2cf1ac367ca5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::raytracer::raytrace</definition>
        <argsstring>(Image *aimage, const raytracer::Scene &amp;scene, int number_of_samples)</argsstring>
        <name>raytrace</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>aimage</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1raytracer_1_1Scene" kindref="compound">raytracer::Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.cc" line="466" column="5" bodyfile="libs/core/src/core/raytracer.cc" bodystart="466" bodyend="495" declfile="libs/core/src/core/raytracer.h" declline="121" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1raytracer_1aeaef9bf1f1d66a4dba5443bf2b9f2c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1raytracer_1_1Object" kindref="compound">Object</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Object&gt; euphoria::core::raytracer::create_sphere</definition>
        <argsstring>(const Sphere &amp;sphere, const vec3f &amp;position, std::shared_ptr&lt; Material &gt; material)</argsstring>
        <name>create_sphere</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Sphere" kindref="compound">Sphere</ref> &amp;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structeuphoria_1_1core_1_1raytracer_1_1Material" kindref="compound">Material</ref> &gt;</type>
          <declname>material</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/raytracer.h" line="82" column="25" declfile="libs/core/src/core/raytracer.h" declline="82" declcolumn="25"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/raytracer.cc" line="16" column="1"/>
  </compounddef>
</doxygen>

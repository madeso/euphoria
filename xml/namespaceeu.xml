<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceeu" kind="namespace" language="C++">
    <compoundname>eu</compoundname>
    <innerclass refid="structeu_1_1Aabb" prot="public">eu::Aabb</innerclass>
    <innerclass refid="structeu_1_1Angle" prot="public">eu::Angle</innerclass>
    <innerclass refid="structeu_1_1AxisAngle" prot="public">eu::AxisAngle</innerclass>
    <innerclass refid="structeu_1_1InterpolateDefault" prot="public">eu::InterpolateDefault</innerclass>
    <innerclass refid="structeu_1_1MatchedEnum" prot="public">eu::MatchedEnum</innerclass>
    <innerclass refid="structeu_1_1EnumToStringImplementation" prot="public">eu::EnumToStringImplementation</innerclass>
    <innerclass refid="structeu_1_1Lrud" prot="public">eu::Lrud</innerclass>
    <innerclass refid="structeu_1_1StringParser_3_01Lrud_3_01T_01_4_01_4" prot="public">eu::StringParser&lt; Lrud&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structeu_1_1mat2f" prot="public">eu::mat2f</innerclass>
    <innerclass refid="structeu_1_1mat3f" prot="public">eu::mat3f</innerclass>
    <innerclass refid="structeu_1_1mat4f" prot="public">eu::mat4f</innerclass>
    <innerclass refid="structeu_1_1MemoryChunk" prot="public">eu::MemoryChunk</innerclass>
    <innerclass refid="structeu_1_1MemoryChunkFile" prot="public">eu::MemoryChunkFile</innerclass>
    <innerclass refid="structeu_1_1DirectoryListing" prot="public">eu::DirectoryListing</innerclass>
    <innerclass refid="structeu_1_1Plane" prot="public">eu::Plane</innerclass>
    <innerclass refid="structeu_1_1PolarCoordinate" prot="public">eu::PolarCoordinate</innerclass>
    <innerclass refid="structeu_1_1quatf" prot="public">eu::quatf</innerclass>
    <innerclass refid="structeu_1_1Random" prot="public">eu::Random</innerclass>
    <innerclass refid="structeu_1_1Range" prot="public">eu::Range</innerclass>
    <innerclass refid="structeu_1_1UnitRay3f" prot="public">eu::UnitRay3f</innerclass>
    <innerclass refid="structeu_1_1Ray2f" prot="public">eu::Ray2f</innerclass>
    <innerclass refid="structeu_1_1Ray3f" prot="public">eu::Ray3f</innerclass>
    <innerclass refid="structeu_1_1Rectf" prot="public">eu::Rectf</innerclass>
    <innerclass refid="structeu_1_1Recti" prot="public">eu::Recti</innerclass>
    <innerclass refid="structeu_1_1Result" prot="public">eu::Result</innerclass>
    <innerclass refid="structeu_1_1Rgbi" prot="public">eu::Rgbi</innerclass>
    <innerclass refid="structeu_1_1Rgbai" prot="public">eu::Rgbai</innerclass>
    <innerclass refid="structeu_1_1Rgb" prot="public">eu::Rgb</innerclass>
    <innerclass refid="structeu_1_1Hsl" prot="public">eu::Hsl</innerclass>
    <innerclass refid="structeu_1_1Rgba" prot="public">eu::Rgba</innerclass>
    <innerclass refid="structeu_1_1StringParser_3_01Rgbi_01_4" prot="public">eu::StringParser&lt; Rgbi &gt;</innerclass>
    <innerclass refid="structeu_1_1size2f" prot="public">eu::size2f</innerclass>
    <innerclass refid="structeu_1_1size2i" prot="public">eu::size2i</innerclass>
    <innerclass refid="structeu_1_1StringParser_3_01size2f_01_4" prot="public">eu::StringParser&lt; size2f &gt;</innerclass>
    <innerclass refid="structeu_1_1StringParser_3_01size2i_01_4" prot="public">eu::StringParser&lt; size2i &gt;</innerclass>
    <innerclass refid="structeu_1_1StringParser" prot="public">eu::StringParser</innerclass>
    <innerclass refid="structeu_1_1StringBuilder" prot="public">eu::StringBuilder</innerclass>
    <innerclass refid="structeu_1_1StringMerger" prot="public">eu::StringMerger</innerclass>
    <innerclass refid="structeu_1_1NormalizedAndLength" prot="public">eu::NormalizedAndLength</innerclass>
    <innerclass refid="structeu_1_1vec2f" prot="public">eu::vec2f</innerclass>
    <innerclass refid="structeu_1_1vec2i" prot="public">eu::vec2i</innerclass>
    <innerclass refid="structeu_1_1unit2f" prot="public">eu::unit2f</innerclass>
    <innerclass refid="structeu_1_1Scale2f" prot="public">eu::Scale2f</innerclass>
    <innerclass refid="structeu_1_1Scale3f" prot="public">eu::Scale3f</innerclass>
    <innerclass refid="structeu_1_1vec3f" prot="public">eu::vec3f</innerclass>
    <innerclass refid="structeu_1_1unit3f" prot="public">eu::unit3f</innerclass>
    <innerclass refid="structeu_1_1vec4f" prot="public">eu::vec4f</innerclass>
    <innernamespace refid="namespaceeu_1_1assertlib">eu::assertlib</innernamespace>
    <innernamespace refid="namespaceeu_1_1colorutil">eu::colorutil</innernamespace>
    <innernamespace refid="namespaceeu_1_1common">eu::common</innernamespace>
    <innernamespace refid="namespaceeu_1_1convert">eu::convert</innernamespace>
    <innernamespace refid="namespaceeu_1_1core">eu::core</innernamespace>
    <innernamespace refid="namespaceeu_1_1files">eu::files</innernamespace>
    <innernamespace refid="namespaceeu_1_1gui">eu::gui</innernamespace>
    <innernamespace refid="namespaceeu_1_1io">eu::io</innernamespace>
    <innernamespace refid="namespaceeu_1_1log">eu::log</innernamespace>
    <innernamespace refid="namespaceeu_1_1minsynth">eu::minsynth</innernamespace>
    <innernamespace refid="namespaceeu_1_1render">eu::render</innernamespace>
    <innernamespace refid="namespaceeu_1_1search">eu::search</innernamespace>
    <innernamespace refid="namespaceeu_1_1string__mergers">eu::string_mergers</innernamespace>
    <innernamespace refid="namespaceeu_1_1tests">eu::tests</innernamespace>
    <innernamespace refid="namespaceeu_1_1window">eu::window</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58" prot="public" static="no" strong="yes">
        <type></type>
        <name>NamedColor</name>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58ad508fe45cecaf653904a0e774084bb5c" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a770e427f6a16eb64e2ece9585ba9d193" prot="public">
          <name>light_gray</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58acda7a650c5856cf2f6738072447d7825" prot="public">
          <name>gray</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a49dba686026a18435dd23b5e83eb5cfd" prot="public">
          <name>dark_gray</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a1ffd9e753c8054cc61456ac7fac1ac89" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58abda9643ac6601722a28f238714274da4" prot="public">
          <name>red</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a5fc7f488aaf8c4cef723d8307dab63c1" prot="public">
          <name>pure_red</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a48d6215903dff56238e52e8891380c8f" prot="public">
          <name>blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a75876b1759fd5c3d70b379e382a21201" prot="public">
          <name>pure_blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a61a2783898a9df78bb27edc33f768e6e" prot="public">
          <name>light_blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a852926ebcf39a1bde6fe55ea859c9fd8" prot="public">
          <name>normal_blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58abc432826c5179d5332c28e32f2ff58a0" prot="public">
          <name>cornflower_blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a9f27410725ab8cc8854a2769c7a516b8" prot="public">
          <name>green</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a433237595a9697d0a94f13e50c46ce6a" prot="public">
          <name>pure_green</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58ac10bddadd1786a8a12f96ae7db5bafb8" prot="public">
          <name>light_green</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58ad487dd0b55dfcacdd920ccbdaeafa351" prot="public">
          <name>yellow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a89cfe30ed9b2b04acad740f2e7a204ae" prot="public">
          <name>pure_yellow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58afe01d67a002dfa0f3ac084298142eccd" prot="public">
          <name>orange</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a490ebe2773b07005137e4d6a1d988ebf" prot="public">
          <name>pure_orange</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a6ff47afa5dc7daa42cc705a03fca8a9b" prot="public">
          <name>brown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58ac88392c295fdf3d0c14b78f2d7de42f3" prot="public">
          <name>pure_brown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58abb7aedfa61007447dd6efaf9f37641e3" prot="public">
          <name>purple</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a20743bde01784dc88194746154b5a2c0" prot="public">
          <name>pure_purple</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a4a0b0dcedd48f780778d1cd1bb8f9877" prot="public">
          <name>pink</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a67ff8501543ab43e2471efaacf5cebbb" prot="public">
          <name>pure_pink</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a74d216a5e8b72d8926453fcd1505ecc3" prot="public">
          <name>pure_beige</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a5b2d4484498235e80d61a233a7c04991" prot="public">
          <name>tan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58afddb285d45dfa29d3163a3e7c2cc66d0" prot="public">
          <name>pure_tan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a6411532ba4971f378391776a9db629d3" prot="public">
          <name>cyan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a63a55e8bfd2f95d74e0007d5200f7e58a88e7d4d79a6178f203b2fc9556e5f1c0" prot="public">
          <name>pure_cyan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/colors.h" line="11" column="5" bodyfile="libs/base/src/base/colors.h" bodystart="12" bodyend="156"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeu_1a26400b8eec39edffdab76655a42e1dd0" prot="public" static="no" strong="yes">
        <type></type>
        <name>BangWongPalette</name>
        <enumvalue id="namespaceeu_1a26400b8eec39edffdab76655a42e1dd0a1ffd9e753c8054cc61456ac7fac1ac89" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a26400b8eec39edffdab76655a42e1dd0aa522e513b3069ef2fef4205d1aa89db1" prot="public">
          <name>organge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a26400b8eec39edffdab76655a42e1dd0aac3f9198492afd06eb5095cada0f3504" prot="public">
          <name>blue_sky</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a26400b8eec39edffdab76655a42e1dd0a396d1a02f78aeeef2b1488b9675f6486" prot="public">
          <name>green_bluish</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a26400b8eec39edffdab76655a42e1dd0ad487dd0b55dfcacdd920ccbdaeafa351" prot="public">
          <name>yellow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a26400b8eec39edffdab76655a42e1dd0a48d6215903dff56238e52e8891380c8f" prot="public">
          <name>blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a26400b8eec39edffdab76655a42e1dd0a27d5aea5874274c92fb55326db30f5a1" prot="public">
          <name>red_vermillion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a26400b8eec39edffdab76655a42e1dd0ab4285db5f1f456f1237d877baab59b4e" prot="public">
          <name>purple_redish</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/colors.h" line="162" column="5" bodyfile="libs/base/src/base/colors.h" bodystart="163" bodyend="187"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceeu_1a79f30860364ae543e1f272377f116931" prot="public" static="no" strong="yes">
        <type></type>
        <name>IsAbsolute</name>
        <enumvalue id="namespaceeu_1a79f30860364ae543e1f272377f116931aa6105c0a611b41b08f1209506350279e" prot="public">
          <name>yes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1a79f30860364ae543e1f272377f116931a7fa3b767c460b54a2be4d49030b349c7" prot="public">
          <name>no</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.h" line="119" column="5" bodyfile="libs/base/src/base/rgb.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="enum" id="group__string_1ga20491245288871dc76aabddb7437225f" prot="public" static="no" strong="yes">
        <type></type>
        <name>CharToStringStyle</name>
        <enumvalue id="group__string_1gga20491245288871dc76aabddb7437225fa8c319f28d81d1527a9428e9a5c2195f5" prot="public">
          <name>smart</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__string_1gga20491245288871dc76aabddb7437225fafa2f1c8dc686b38506663647e5242622" prot="public">
          <name>include_hex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.h" line="112" column="5" bodyfile="libs/base/src/base/stringutils.h" bodystart="113" bodyend="115"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceeu_1a51f3cf55562ab46dbe987c89293242d2" prot="public" static="no">
        <type>std::int64_t</type>
        <definition>using eu::I64 = typedef std::int64_t</definition>
        <argsstring></argsstring>
        <name>I64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="7" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a3f086b3a574824463b1e1eec01c660bd" prot="public" static="no">
        <type>std::int32_t</type>
        <definition>using eu::I32 = typedef std::int32_t</definition>
        <argsstring></argsstring>
        <name>I32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="8" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1aa7a3f12191cbdeb21f83f76d36566a68" prot="public" static="no">
        <type>std::int16_t</type>
        <definition>using eu::I16 = typedef std::int16_t</definition>
        <argsstring></argsstring>
        <name>I16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="9" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a48aa058de332e8af6f40bcd3cd7096f1" prot="public" static="no">
        <type>std::int8_t</type>
        <definition>using eu::I8 = typedef std::int8_t</definition>
        <argsstring></argsstring>
        <name>I8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="10" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1ac4791a29620a564f20a57ac1f705d39f" prot="public" static="no">
        <type>std::uint64_t</type>
        <definition>using eu::U64 = typedef std::uint64_t</definition>
        <argsstring></argsstring>
        <name>U64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="12" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a4906aa2bac1ba15d71b5b473ee9dfcd4" prot="public" static="no">
        <type>std::uint32_t</type>
        <definition>using eu::U32 = typedef std::uint32_t</definition>
        <argsstring></argsstring>
        <name>U32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="13" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a403a203901e0e2a2cdf05404b80c10f9" prot="public" static="no">
        <type>std::uint16_t</type>
        <definition>using eu::U16 = typedef std::uint16_t</definition>
        <argsstring></argsstring>
        <name>U16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="14" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a7bb0af5256676c7db8a48a8ec6da2622" prot="public" static="no">
        <type>std::uint8_t</type>
        <definition>using eu::U8 = typedef std::uint8_t</definition>
        <argsstring></argsstring>
        <name>U8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="15" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceeu_1a38f22299b51db4687ecd7c0b05e13651" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr Angle eu::one_turn</definition>
        <argsstring></argsstring>
        <name>one_turn</name>
        <initializer>= <ref refid="structeu_1_1Angle_1ab9802112540d204c98ea0c746fb22cab" kindref="member">Angle::from_radians</ref>(<ref refid="namespaceeu_1a25eb222abfe7c9e7f34d6f19ed40c1a0" kindref="member">pi</ref> * 2.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="87" column="21" bodyfile="libs/base/src/base/angle.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a307b4e369fadf7e8cab854726cb1521b" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr Angle eu::half_turn</definition>
        <argsstring></argsstring>
        <name>half_turn</name>
        <initializer>= <ref refid="structeu_1_1Angle_1ab9802112540d204c98ea0c746fb22cab" kindref="member">Angle::from_radians</ref>(<ref refid="namespaceeu_1a25eb222abfe7c9e7f34d6f19ed40c1a0" kindref="member">pi</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="88" column="21" bodyfile="libs/base/src/base/angle.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a12efa545ff4a811ef348298950604e10" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr Angle eu::quarter_turn</definition>
        <argsstring></argsstring>
        <name>quarter_turn</name>
        <initializer>= <ref refid="structeu_1_1Angle_1ab9802112540d204c98ea0c746fb22cab" kindref="member">Angle::from_radians</ref>(<ref refid="namespaceeu_1a25eb222abfe7c9e7f34d6f19ed40c1a0" kindref="member">pi</ref> / 2.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="89" column="21" bodyfile="libs/base/src/base/angle.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a3b9fd0a50b9a17fe196a7577dd2f5e6e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr Angle eu::no_rotation</definition>
        <argsstring></argsstring>
        <name>no_rotation</name>
        <initializer>= <ref refid="structeu_1_1Angle_1ab9802112540d204c98ea0c746fb22cab" kindref="member">Angle::from_radians</ref>(0.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="90" column="21" bodyfile="libs/base/src/base/angle.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1ac8626ea7d20b9d527125295c315ee26e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref></type>
        <definition>constexpr mat2f eu::m2_identity</definition>
        <argsstring></argsstring>
        <name>m2_identity</name>
        <initializer>= <ref refid="structeu_1_1mat2f_1a0ef65a97f3abfa8ae9f9453aec427966" kindref="member">mat2f::from_scalar</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat2.h" line="75" column="21" bodyfile="libs/base/src/base/mat2.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1afe5ebebe8f92dfb3e5d234d6c3e866f5" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref></type>
        <definition>constexpr mat3f eu::m3_identity</definition>
        <argsstring></argsstring>
        <name>m3_identity</name>
        <initializer>= <ref refid="structeu_1_1mat3f_1a82862debbef9b9a8173f698f9a65e1b0" kindref="member">mat3f::from_scalar</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat3.h" line="97" column="21" bodyfile="libs/base/src/base/mat3.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a08e9e74288f56457448859faa07aeee0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref></type>
        <definition>constexpr mat4f eu::m4_identity</definition>
        <argsstring></argsstring>
        <name>m4_identity</name>
        <initializer>= <ref refid="structeu_1_1mat4f_1a13332ffe72e0fea2ec48f59126674e40" kindref="member">mat4f::from_scalar</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.h" line="118" column="21" bodyfile="libs/base/src/base/mat4.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a25eb222abfe7c9e7f34d6f19ed40c1a0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float eu::pi</definition>
        <argsstring></argsstring>
        <name>pi</name>
        <initializer>= 3.1415926535897932384626433832795f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="127" column="21" bodyfile="libs/base/src/base/numeric.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a3ca3b5e1b7b0ab10423719113ff875be" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char eu::path_separator</definition>
        <argsstring></argsstring>
        <name>path_separator</name>
        <initializer>= &apos;/&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/os.h" line="23" column="20" bodyfile="libs/base/src/base/os.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a168787042231fd75574792ef12be530d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        <definition>constexpr quatf eu::q_identity</definition>
        <argsstring></argsstring>
        <name>q_identity</name>
        <initializer>= <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref>(1, <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref>(0, 0, 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="71" column="21" bodyfile="libs/base/src/base/quat.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1abb3f2260d267fda207e4cbb285f90998" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; float &gt;</type>
        <definition>constexpr Range&lt;float&gt; eu::r01</definition>
        <argsstring></argsstring>
        <name>r01</name>
        <initializer>= { 0.0f, 1.0f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="57" column="21" bodyfile="libs/base/src/base/range.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1ad3f5c4dd7e4d7cf1252f63a5dd8366e8" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; float &gt;</type>
        <definition>constexpr Range&lt;float&gt; eu::r11</definition>
        <argsstring></argsstring>
        <name>r11</name>
        <initializer>= { -1.0f, 1.0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="58" column="21" bodyfile="libs/base/src/base/range.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__string_1ga15da2155ca42b256f31ead0dcf4f212d" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string eu::space_characters</definition>
        <argsstring></argsstring>
        <name>space_characters</name>
        <initializer>= &quot; \n\r\t&quot;</initializer>
        <briefdescription>
<para>Space characters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the space characters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.h" line="24" column="23" bodyfile="libs/base/src/base/stringutils.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a0e7c9aad856ffd16ad97ae64df63ab4e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>constexpr vec2f eu::zero2f</definition>
        <argsstring></argsstring>
        <name>zero2f</name>
        <initializer>= <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref>{ 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="68" column="21" bodyfile="libs/base/src/base/vec2.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a1b61de673bf9e0248a03112202ce30a4" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref></type>
        <definition>constexpr vec2i eu::zero2i</definition>
        <argsstring></argsstring>
        <name>zero2i</name>
        <initializer>= <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref>{ 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="99" column="21" bodyfile="libs/base/src/base/vec2.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1ae6904cdb3f5a821f19253d26980406fd" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>constexpr vec3f eu::zero3f</definition>
        <argsstring></argsstring>
        <name>zero3f</name>
        <initializer>= <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref>{ 0.0f, 0.0f, 0.0f }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="95" column="21" bodyfile="libs/base/src/base/vec3.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeu_1a8028946918a3de84eb06dbee446c0316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Aabb &amp;a)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Aabb" kindref="compound">Aabb</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/aabb.cc" line="110" column="5" bodyfile="libs/base/src/base/aabb.cc" bodystart="110" bodyend="113" declfile="libs/base/src/base/aabb.h" declline="37" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aff86557c37017938c1ee3fd97c913249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f eu::get_random_point</definition>
        <argsstring>(Random *rand, const Aabb &amp;a)</argsstring>
        <name>get_random_point</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Aabb" kindref="compound">Aabb</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/aabb.cc" line="116" column="5" bodyfile="libs/base/src/base/aabb.cc" bodystart="116" bodyend="123" declfile="libs/base/src/base/aabb.h" declline="38" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac289bda2ea11c030f0813fb0fb60c8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::get_random_angle</definition>
        <argsstring>(::eu::Random *random)</argsstring>
        <name>get_random_angle</name>
        <param>
          <type>::<ref refid="structeu_1_1Random" kindref="compound">eu::Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="12" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="12" bodyend="15" declfile="libs/base/src/base/angle.h" declline="92" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aca78dba63a28d6e87e705f3f09960a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::sin</definition>
        <argsstring>(const Angle &amp;ang)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="61" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="61" bodyend="64" declfile="libs/base/src/base/angle.h" declline="95" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a9b1d8ca75a7658f3f361475191b71912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::cos</definition>
        <argsstring>(const Angle &amp;ang)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="68" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="68" bodyend="71" declfile="libs/base/src/base/angle.h" declline="96" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a638a925ff24a903a48a9dd83b7dcf6f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::tan</definition>
        <argsstring>(const Angle &amp;ang)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="75" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="75" bodyend="78" declfile="libs/base/src/base/angle.h" declline="97" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a447b534d9cfdf0039c832d40b7a0d7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::asin</definition>
        <argsstring>(float v)</argsstring>
        <name>asin</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="82" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="82" bodyend="87" declfile="libs/base/src/base/angle.h" declline="98" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a186d8c0bfc19958c5efcffcd8d1d8bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::acos</definition>
        <argsstring>(float v)</argsstring>
        <name>acos</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="91" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="91" bodyend="96" declfile="libs/base/src/base/angle.h" declline="99" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa548598221289780061f93b70046a165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::atan</definition>
        <argsstring>(float v)</argsstring>
        <name>atan</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="100" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="100" bodyend="103" declfile="libs/base/src/base/angle.h" declline="100" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a23e6035e556f3a5109f183de61dd1eb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::atan2</definition>
        <argsstring>(float y, float x)</argsstring>
        <name>atan2</name>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="107" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="107" bodyend="110" declfile="libs/base/src/base/angle.h" declline="101" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0f26b2f5215f64fd7753410b36d2ed40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::operator+</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="123" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="123" bodyend="128" declfile="libs/base/src/base/angle.h" declline="103" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a313a2aa80887cfb3c9ef71cbc2b136ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::operator-</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="132" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="132" bodyend="137" declfile="libs/base/src/base/angle.h" declline="104" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a378c4e208a075433eb6b79ff1d37ac45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::operator/</definition>
        <argsstring>(const Angle &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="141" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="141" bodyend="146" declfile="libs/base/src/base/angle.h" declline="106" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad8db85497bbda3078a4b20f66bdb5b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::operator*</definition>
        <argsstring>(const Angle &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="149" column="11" bodyfile="libs/base/src/base/angle.cc" bodystart="149" bodyend="154" declfile="libs/base/src/base/angle.h" declline="105" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a28fd8ac0c2e01367a5727671670fc84e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::operator*</definition>
        <argsstring>(float rhs, const Angle &amp;lhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="156" column="11" bodyfile="libs/base/src/base/angle.cc" bodystart="156" bodyend="159" declfile="libs/base/src/base/angle.h" declline="107" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa542af8138ef5d5a6d189f930a307013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Angle &amp;a)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="162" column="17" bodyfile="libs/base/src/base/angle.cc" bodystart="162" bodyend="163" declfile="libs/base/src/base/angle.h" declline="109" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad0980fedfeba0f10b266f81201213074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator&lt;</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="166" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="167" bodyend="170" declfile="libs/base/src/base/angle.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1afebadcbc758added22f9e71b09a9a76b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator&lt;=</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="173" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="174" bodyend="177" declfile="libs/base/src/base/angle.h" declline="112" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1adb583e46e3f948a681b988bba27dc244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator&gt;</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="181" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="181" bodyend="184" declfile="libs/base/src/base/angle.h" declline="113" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa337311fc35735e687b7f1c0a9b4c727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator&gt;=</definition>
        <argsstring>(const Angle &amp;lhs, const Angle &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="188" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="188" bodyend="191" declfile="libs/base/src/base/angle.h" declline="114" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7866b7832f7e604469afe0328520d641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle eu::lerp_angle</definition>
        <argsstring>(const Angle &amp;from, float v, const Angle &amp;to)</argsstring>
        <name>lerp_angle</name>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="194" column="11" bodyfile="libs/base/src/base/angle.cc" bodystart="194" bodyend="207" declfile="libs/base/src/base/angle.h" declline="116" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a99324b3e6fa7bebebe6bea130b40f033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eu::DEFAULT_INTERPOLATE</definition>
        <argsstring>(Angle, lerp_angle)</argsstring>
        <name>DEFAULT_INTERPOLATE</name>
        <param>
          <type><ref refid="structeu_1_1Angle" kindref="compound">Angle</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceeu_1a7866b7832f7e604469afe0328520d641" kindref="member">lerp_angle</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="118" column="5" declfile="libs/base/src/base/angle.h" declline="118" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac63c715fd08b2adbad224c32eb3cb378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const AxisAngle &amp;aa)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1AxisAngle" kindref="compound">AxisAngle</ref> &amp;</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/axisangle.cc" line="21" column="5" bodyfile="libs/base/src/base/axisangle.cc" bodystart="21" bodyend="24" declfile="libs/base/src/base/axisangle.h" declline="25" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a175a9253ebea7fa874013257344e2a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::c_sizet_to_int</definition>
        <argsstring>(size_t t)</argsstring>
        <name>c_sizet_to_int</name>
        <param>
          <type>size_t</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.cc" line="11" column="5" bodyfile="libs/base/src/base/cint.cc" bodystart="11" bodyend="15" declfile="libs/base/src/base/cint.h" declline="11" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa83f7621e40670af5136fa49e22755b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::c_unsigned_int_to_int</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>c_unsigned_int_to_int</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.cc" line="19" column="5" bodyfile="libs/base/src/base/cint.cc" bodystart="19" bodyend="23" declfile="libs/base/src/base/cint.h" declline="15" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae08d27f1cc9cab262d4c0af72d13c967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int eu::c_int_to_unsigned_int</definition>
        <argsstring>(int i)</argsstring>
        <name>c_int_to_unsigned_int</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.cc" line="27" column="5" bodyfile="libs/base/src/base/cint.cc" bodystart="27" bodyend="31" declfile="libs/base/src/base/cint.h" declline="19" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a36a24bdd3f414af0c9d8c95ec8815991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t eu::c_int_to_sizet</definition>
        <argsstring>(int i)</argsstring>
        <name>c_int_to_sizet</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.cc" line="35" column="5" bodyfile="libs/base/src/base/cint.cc" bodystart="35" bodyend="39" declfile="libs/base/src/base/cint.h" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a62edc421c9c3e061a05866b92a898942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1a7bb0af5256676c7db8a48a8ec6da2622" kindref="member">U8</ref></type>
        <definition>U8 eu::c_int_to_u8</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>c_int_to_u8</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.cc" line="42" column="5" bodyfile="libs/base/src/base/cint.cc" bodystart="42" bodyend="46" declfile="libs/base/src/base/cint.h" declline="27" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1ad26d02cd6cd78b1ed7779d5839931e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::c_u64_to_int</definition>
        <argsstring>(U64 u)</argsstring>
        <name>c_u64_to_int</name>
        <param>
          <type><ref refid="namespaceeu_1ac4791a29620a564f20a57ac1f705d39f" kindref="member">U64</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.cc" line="49" column="5" bodyfile="libs/base/src/base/cint.cc" bodystart="49" bodyend="53" declfile="libs/base/src/base/cint.h" declline="31" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3774923d7b347df1605c63a510864518" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr int</type>
        <definition>constexpr int eu::c_float_to_int</definition>
        <argsstring>(float f)</argsstring>
        <name>c_float_to_int</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.h" line="36" column="5" bodyfile="libs/base/src/base/cint.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0bf6f3d026ddfbf012b2f738691c0091" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float eu::c_sizet_to_float</definition>
        <argsstring>(std::size_t f)</argsstring>
        <name>c_sizet_to_float</name>
        <param>
          <type>std::size_t</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.h" line="43" column="5" bodyfile="libs/base/src/base/cint.h" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a818c2206be78d8ee004918bc5fae777e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float eu::c_int_to_float</definition>
        <argsstring>(int i)</argsstring>
        <name>c_int_to_float</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.h" line="50" column="5" bodyfile="libs/base/src/base/cint.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a243381476e611067b6f5b6df2dbbc47c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float eu::c_u64_to_float</definition>
        <argsstring>(U64 i)</argsstring>
        <name>c_u64_to_float</name>
        <param>
          <type><ref refid="namespaceeu_1ac4791a29620a564f20a57ac1f705d39f" kindref="member">U64</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.h" line="57" column="5" bodyfile="libs/base/src/base/cint.h" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3e1ec707286b49487eb42f5e369cb0e6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespaceeu_1a4906aa2bac1ba15d71b5b473ee9dfcd4" kindref="member">U32</ref></type>
        <definition>constexpr U32 eu::c_bit_signed_to_unsigned</definition>
        <argsstring>(I32 i)</argsstring>
        <name>c_bit_signed_to_unsigned</name>
        <param>
          <type><ref refid="namespaceeu_1a3f086b3a574824463b1e1eec01c660bd" kindref="member">I32</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.h" line="64" column="5" bodyfile="libs/base/src/base/cint.h" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a9b547b8fa4e0a3950061628048d7629f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double eu::c_float_to_double</definition>
        <argsstring>(float f)</argsstring>
        <name>c_float_to_double</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.h" line="73" column="5" bodyfile="libs/base/src/base/cint.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a159eda382388f22d302070e1416afe81" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float eu::c_double_to_float</definition>
        <argsstring>(double f)</argsstring>
        <name>c_double_to_float</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/cint.h" line="80" column="5" bodyfile="libs/base/src/base/cint.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1add71b08a7cd52763751fec61d0f24040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::default_interpolate</definition>
        <argsstring>(const T &amp;from, float t, const T &amp;to)</argsstring>
        <name>default_interpolate</name>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/default_interpolate.h" line="14" column="3" bodyfile="libs/base/src/base/default_interpolate.h" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a61b8f7b7fb28bf474606550d3c09279b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::add_quotes_and_combine_with_english_or</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;matches)</argsstring>
        <name>add_quotes_and_combine_with_english_or</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>matches</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/default_parse.cc" line="10" column="5" bodyfile="libs/base/src/base/default_parse.cc" bodystart="10" bodyend="20" declfile="libs/base/src/base/default_parse.h" declline="11" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7f62f918a255d51da88a2a3605fda424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; StringParser&lt; T &gt;::value !=0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt; T &gt; eu::default_parse_function</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>default_parse_function</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/default_parse.h" line="20" column="5" bodyfile="libs/base/src/base/default_parse.h" bodystart="21" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aac597dc3282a8b054fccc67542ccb0d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_enum&lt; T &gt;::value==false, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt; std::string &gt; eu::default_describe</definition>
        <argsstring>()</argsstring>
        <name>default_describe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/default_parse.h" line="107" column="5" bodyfile="libs/base/src/base/default_parse.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a924266058b065205c65e7ce37aff1e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; StringParser&lt; T &gt;::value !=0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string eu::from_default_value_to_string</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>from_default_value_to_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/default_parse.h" line="137" column="5" bodyfile="libs/base/src/base/default_parse.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1afa6c8e77e7bd6872619a926ce0d5a894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::calc_edit_distance</definition>
        <argsstring>(const std::string &amp;source, const std::string &amp;target)</argsstring>
        <name>calc_edit_distance</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/editdistance.cc" line="14" column="5" bodyfile="libs/base/src/base/editdistance.cc" bodystart="14" bodyend="83" declfile="libs/base/src/base/editdistance.h" declline="12" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab2f47b63a33a6d3853f54665ba055b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::calc_edit_distance_fast</definition>
        <argsstring>(const std::string &amp;the_row, const std::string &amp;the_col)</argsstring>
        <name>calc_edit_distance_fast</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>the_row</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>the_col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/editdistance.cc" line="86" column="5" bodyfile="libs/base/src/base/editdistance.cc" bodystart="86" bodyend="130" declfile="libs/base/src/base/editdistance.h" declline="18" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0b8d588d453700c598332e67ce51f264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string eu::from_enum_to_string</definition>
        <argsstring>(T t)</argsstring>
        <name>from_enum_to_string</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/enumtostring.h" line="116" column="18" bodyfile="libs/base/src/base/enumtostring.h" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1afa25fd5bc135d5c624876948c5aa47c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1EnumToStringImplementation" kindref="compound">EnumToStringImplementation</ref>&lt; T &gt;</type>
        <definition>EnumToStringImplementation&lt;T&gt; eu::get_enum_to_string_implementation_from_enum</definition>
        <argsstring>()</argsstring>
        <name>get_enum_to_string_implementation_from_enum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/enumtostring.h" line="123" column="5" bodyfile="libs/base/src/base/enumtostring.h" bodystart="123" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a931f6c529f77f32d2b308e098b4a43f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1MatchedEnum" kindref="compound">MatchedEnum</ref>&lt; T &gt;</type>
        <definition>MatchedEnum&lt;T&gt; eu::from_string_to_enum</definition>
        <argsstring>(const std::string &amp;input, size_t max_size=5)</argsstring>
        <name>from_string_to_enum</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_size</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/enumtostring.h" line="139" column="5" bodyfile="libs/base/src/base/enumtostring.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a06b2e1e7fdb04aba16dbbd3ec379ce11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; eu::from_enum_to_string</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts)</argsstring>
        <name>from_enum_to_string</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/enumtostring.h" line="147" column="5" bodyfile="libs/base/src/base/enumtostring.h" bodystart="147" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1afc81a01d2a9b3523b4602cdfd2754d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; eu::get_all_names_from_enum</definition>
        <argsstring>()</argsstring>
        <name>get_all_names_from_enum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/enumtostring.h" line="160" column="5" bodyfile="libs/base/src/base/enumtostring.h" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab3ab6a75e7765eac435bd19dee9f6f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; eu::get_all_values_from_enum</definition>
        <argsstring>()</argsstring>
        <name>get_all_values_from_enum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/enumtostring.h" line="167" column="5" bodyfile="libs/base/src/base/enumtostring.h" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a70bdf9fe42beb00691f28215741f29be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::pair&lt; A, B &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;A, B&gt; &gt; eu::zip</definition>
        <argsstring>(const std::vector&lt; A &gt; &amp;as, const std::vector&lt; B &gt; &amp;bs)</argsstring>
        <name>zip</name>
        <param>
          <type>const std::vector&lt; A &gt; &amp;</type>
          <declname>as</declname>
        </param>
        <param>
          <type>const std::vector&lt; B &gt; &amp;</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/functional.h" line="19" column="5" bodyfile="libs/base/src/base/functional.h" bodystart="19" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a175501e62b5378f378e409236ed056ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::pair&lt; A, B &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;A, B&gt; &gt; eu::zip_longest</definition>
        <argsstring>(const std::vector&lt; A &gt; &amp;as, const std::vector&lt; B &gt; &amp;bs, A da=A(), B db=B())</argsstring>
        <name>zip_longest</name>
        <param>
          <type>const std::vector&lt; A &gt; &amp;</type>
          <declname>as</declname>
        </param>
        <param>
          <type>const std::vector&lt; B &gt; &amp;</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>A</type>
          <declname>da</declname>
          <defval>A()</defval>
        </param>
        <param>
          <type>B</type>
          <declname>db</declname>
          <defval>B()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/functional.h" line="33" column="5" bodyfile="libs/base/src/base/functional.h" bodystart="34" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6507a8ec64647f0a38e1bd35499f073b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; eu::map</definition>
        <argsstring>(const std::vector&lt; F &gt; &amp;fs, C convert)</argsstring>
        <name>map</name>
        <param>
          <type>const std::vector&lt; F &gt; &amp;</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>C</type>
          <declname>convert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/functional.h" line="56" column="5" bodyfile="libs/base/src/base/functional.h" bodystart="56" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a9d77d46b5904b314de84290ac4a15bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; eu::map</definition>
        <argsstring>(const std::map&lt; K, V &gt; &amp;fs, C convert)</argsstring>
        <name>map</name>
        <param>
          <type>const std::map&lt; K, V &gt; &amp;</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>C</type>
          <declname>convert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/functional.h" line="70" column="5" bodyfile="libs/base/src/base/functional.h" bodystart="70" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad9f1c4e8fcbe15f6db7c7576868d0493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; eu::filter</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts, C check)</argsstring>
        <name>filter</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>C</type>
          <declname>check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/functional.h" line="86" column="5" bodyfile="libs/base/src/base/functional.h" bodystart="86" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1956c93ce39188f20c4f35d097c619f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::all</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts, C check)</argsstring>
        <name>all</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>C</type>
          <declname>check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/functional.h" line="105" column="5" bodyfile="libs/base/src/base/functional.h" bodystart="105" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad9b77a383d49915450bfd82b3a8e0a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::any</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts, C check)</argsstring>
        <name>any</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>C</type>
          <declname>check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/functional.h" line="122" column="5" bodyfile="libs/base/src/base/functional.h" bodystart="122" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0885bc2c8931deca30b7a0df512954c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename R</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>R eu::fold</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;ts, C concat, R zero)</argsstring>
        <name>fold</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>C</type>
          <declname>concat</declname>
        </param>
        <param>
          <type>R</type>
          <declname>zero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/functional.h" line="147" column="5" bodyfile="libs/base/src/base/functional.h" bodystart="147" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a142f5028b510a8908bb2f9ae53f286ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::operator==</definition>
        <argsstring>(const Lrud&lt; T &gt; &amp;lhs, const Lrud&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeu_1_1Lrud" kindref="compound">Lrud</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Lrud" kindref="compound">Lrud</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/lrud.h" line="75" column="5" bodyfile="libs/base/src/base/lrud.h" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8c10bdf229e9108df113c8f396d55513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::operator!=</definition>
        <argsstring>(const Lrud&lt; T &gt; &amp;lhs, const Lrud&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeu_1_1Lrud" kindref="compound">Lrud</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Lrud" kindref="compound">Lrud</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/lrud.h" line="88" column="5" bodyfile="libs/base/src/base/lrud.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0c6a849bab8abb2e1c6c3cb24527ad39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const mat2f &amp;m)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat2.cc" line="107" column="17" bodyfile="libs/base/src/base/mat2.cc" bodystart="107" bodyend="110" declfile="libs/base/src/base/mat2.h" declline="78" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aebd5b426c9bb54f2acc7e9e65ac68325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref></type>
        <definition>mat2f eu::operator+</definition>
        <argsstring>(const mat2f &amp;lhs, const mat2f &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat2.cc" line="114" column="5" bodyfile="libs/base/src/base/mat2.cc" bodystart="114" bodyend="119" declfile="libs/base/src/base/mat2.h" declline="80" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1abf6a5e1e20b126357cb178eb98845601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref></type>
        <definition>mat2f eu::operator-</definition>
        <argsstring>(const mat2f &amp;lhs, const mat2f &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat2.cc" line="123" column="5" bodyfile="libs/base/src/base/mat2.cc" bodystart="123" bodyend="128" declfile="libs/base/src/base/mat2.h" declline="81" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af2589a875179fa12df625a7be4326dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::get_component_multiply_sum</definition>
        <argsstring>(const vec2f &amp;lhs, const vec2f &amp;rhs)</argsstring>
        <name>get_component_multiply_sum</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat2.cc" line="131" column="5" bodyfile="libs/base/src/base/mat2.cc" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a06bf1756d937cee83d068371f376f194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref></type>
        <definition>mat2f eu::operator*</definition>
        <argsstring>(const mat2f &amp;lhs, const mat2f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat2.cc" line="138" column="11" bodyfile="libs/base/src/base/mat2.cc" bodystart="138" bodyend="148" declfile="libs/base/src/base/mat2.h" declline="82" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a867ca8ed882771553149e32cdf06f82c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::operator*</definition>
        <argsstring>(const mat2f &amp;lhs, const vec2f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1mat2f" kindref="compound">mat2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat2.cc" line="151" column="11" bodyfile="libs/base/src/base/mat2.cc" bodystart="151" bodyend="156" declfile="libs/base/src/base/mat2.h" declline="83" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af1a75781bd439871792485242d1dd924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const mat3f &amp;m)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat3.cc" line="257" column="17" bodyfile="libs/base/src/base/mat3.cc" bodystart="257" bodyend="260" declfile="libs/base/src/base/mat3.h" declline="99" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab9edb1a6455993650bd59dcc57d2aa9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref></type>
        <definition>mat3f eu::operator+</definition>
        <argsstring>(const mat3f &amp;lhs, const mat3f &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat3.cc" line="264" column="5" bodyfile="libs/base/src/base/mat3.cc" bodystart="264" bodyend="269" declfile="libs/base/src/base/mat3.h" declline="100" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa88662b970c3d419bd511565c73f9e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref></type>
        <definition>mat3f eu::operator-</definition>
        <argsstring>(const mat3f &amp;lhs, const mat3f &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat3.cc" line="273" column="5" bodyfile="libs/base/src/base/mat3.cc" bodystart="273" bodyend="278" declfile="libs/base/src/base/mat3.h" declline="101" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1afc12a3b52d8e0327260b56711f889d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::get_component_multiply_sum</definition>
        <argsstring>(const vec3f &amp;lhs, const vec3f &amp;rhs)</argsstring>
        <name>get_component_multiply_sum</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat3.cc" line="281" column="5" bodyfile="libs/base/src/base/mat3.cc" bodystart="281" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a722e55718d6a04ad9d65c4db7ac37465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref></type>
        <definition>mat3f eu::operator*</definition>
        <argsstring>(const mat3f &amp;lhs, const mat3f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat3.cc" line="290" column="11" bodyfile="libs/base/src/base/mat3.cc" bodystart="290" bodyend="301" declfile="libs/base/src/base/mat3.h" declline="102" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a29b12fc1f8e582b48adec50e2efa4cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f eu::operator*</definition>
        <argsstring>(const mat3f &amp;lhs, const vec3f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1mat3f" kindref="compound">mat3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat3.cc" line="304" column="11" bodyfile="libs/base/src/base/mat3.cc" bodystart="304" bodyend="309" declfile="libs/base/src/base/mat3.h" declline="103" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7cebedaf6e78f7c52b5e6339b7c50f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const mat4f &amp;m)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="477" column="17" bodyfile="libs/base/src/base/mat4.cc" bodystart="477" bodyend="480" declfile="libs/base/src/base/mat4.h" declline="121" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab3e0482aa99f7601a96810af9b04fbf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref></type>
        <definition>mat4f eu::operator+</definition>
        <argsstring>(const mat4f &amp;lhs, const mat4f &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="484" column="5" bodyfile="libs/base/src/base/mat4.cc" bodystart="484" bodyend="489" declfile="libs/base/src/base/mat4.h" declline="123" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a02eff32dbcc2fd834770c038533d217f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref></type>
        <definition>mat4f eu::operator-</definition>
        <argsstring>(const mat4f &amp;lhs, const mat4f &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="493" column="5" bodyfile="libs/base/src/base/mat4.cc" bodystart="493" bodyend="498" declfile="libs/base/src/base/mat4.h" declline="124" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7467ff3469b29d1c3d5e2a7935517025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::get_component_multiply_sum</definition>
        <argsstring>(const vec4f &amp;lhs, const vec4f &amp;rhs)</argsstring>
        <name>get_component_multiply_sum</name>
        <param>
          <type>const <ref refid="structeu_1_1vec4f" kindref="compound">vec4f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec4f" kindref="compound">vec4f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="501" column="5" bodyfile="libs/base/src/base/mat4.cc" bodystart="501" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae6fd106a9d054324250b19751ed6081b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref></type>
        <definition>mat4f eu::operator*</definition>
        <argsstring>(const mat4f &amp;lhs, const mat4f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="510" column="11" bodyfile="libs/base/src/base/mat4.cc" bodystart="510" bodyend="523" declfile="libs/base/src/base/mat4.h" declline="125" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a68f5ef9db074730eb3c98f35587a401a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec4f" kindref="compound">vec4f</ref></type>
        <definition>vec4f eu::operator*</definition>
        <argsstring>(const mat4f &amp;lhs, const vec4f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1mat4f" kindref="compound">mat4f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec4f" kindref="compound">vec4f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="526" column="11" bodyfile="libs/base/src/base/mat4.cc" bodystart="526" bodyend="534" declfile="libs/base/src/base/mat4.h" declline="126" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af07da73403a6887bdc97b0ad4ed130db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eu::copy_to_memory</definition>
        <argsstring>(MemoryChunk *memory, const void *src)</argsstring>
        <name>copy_to_memory</name>
        <param>
          <type><ref refid="structeu_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/memorychunk.cc" line="60" column="5" bodyfile="libs/base/src/base/memorychunk.cc" bodystart="60" bodyend="63" declfile="libs/base/src/base/memorychunk.h" declline="28" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aaa5de64e566a349dbf805e4e78173f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeu_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> &gt;</type>
        <definition>std::shared_ptr&lt; MemoryChunk &gt; eu::create_memory_chunk_from_string</definition>
        <argsstring>(const std::string &amp;content)</argsstring>
        <name>create_memory_chunk_from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>content</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/memorychunk.cc" line="66" column="5" bodyfile="libs/base/src/base/memorychunk.cc" bodystart="66" bodyend="74" declfile="libs/base/src/base/memorychunk.h" declline="30" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7aad32573ab554e2fca0a37e8564987e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>count</declname>
            <defname>count</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TExtract</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::array&lt; T, count &gt;, std::array&lt; T, count &gt; &gt;</type>
        <definition>std::pair&lt;std::array&lt;T, count&gt;, std::array&lt;T, count&gt; &gt; eu::find_min_max_ranges</definition>
        <argsstring>(const TContainer &amp;ts, TExtract extract)</argsstring>
        <name>find_min_max_ranges</name>
        <param>
          <type>const TContainer &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>TExtract</type>
          <declname>extract</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/minmax.h" line="19" column="5" bodyfile="libs/base/src/base/minmax.h" bodystart="20" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a5e304f334376e448c2f8c3548e957ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TExtract</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt;</type>
        <definition>Range&lt;T&gt; eu::find_min_max_range</definition>
        <argsstring>(const TContainer &amp;ts, TExtract extract)</argsstring>
        <name>find_min_max_range</name>
        <param>
          <type>const TContainer &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>TExtract</type>
          <declname>extract</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/minmax.h" line="55" column="5" bodyfile="libs/base/src/base/minmax.h" bodystart="56" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3d56c6838c675f3e3cf4b9393747edae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TMinFunc</type>
          </param>
          <param>
            <type>typename TMaxFunc</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; T, T &gt;</type>
        <definition>std::tuple&lt;T, T&gt; eu::find_min_max</definition>
        <argsstring>(const TContainer &amp;ts, TMinFunc min_func, TMaxFunc max_func)</argsstring>
        <name>find_min_max</name>
        <param>
          <type>const TContainer &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>TMinFunc</type>
          <declname>min_func</declname>
        </param>
        <param>
          <type>TMaxFunc</type>
          <declname>max_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/minmax.h" line="86" column="5" bodyfile="libs/base/src/base/minmax.h" bodystart="87" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a84234ac42f340bb5b38c0a34f4cd0e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::is_equal</definition>
        <argsstring>(int lhs, int rhs)</argsstring>
        <name>is_equal</name>
        <param>
          <type>int</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="13" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="13" bodyend="16" declfile="libs/base/src/base/numeric.h" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4cd8cf9bbadd516833a572bfd4abc3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::is_zero</definition>
        <argsstring>(int r)</argsstring>
        <name>is_zero</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="20" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="20" bodyend="23" declfile="libs/base/src/base/numeric.h" declline="33" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a18b5929af6c64c2b319d0f5709430afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::clamp_zero</definition>
        <argsstring>(float r)</argsstring>
        <name>clamp_zero</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="27" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="27" bodyend="31" declfile="libs/base/src/base/numeric.h" declline="36" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac953ee0edbaff0e5063d4d697c66f627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::floor</definition>
        <argsstring>(float v)</argsstring>
        <name>floor</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="35" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="35" bodyend="38" declfile="libs/base/src/base/numeric.h" declline="39" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a82a16bae768ee6881fb591fddd27c507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::ceil</definition>
        <argsstring>(float v)</argsstring>
        <name>ceil</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="42" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="42" bodyend="45" declfile="libs/base/src/base/numeric.h" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af2fbc53ac0f3d3a135f913bf0e55abde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::floor_to_int</definition>
        <argsstring>(float v)</argsstring>
        <name>floor_to_int</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="49" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="49" bodyend="52" declfile="libs/base/src/base/numeric.h" declline="45" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae3fafe9e7e4edf309c645464e089d0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::ceil_to_int</definition>
        <argsstring>(float v)</argsstring>
        <name>ceil_to_int</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="56" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="56" bodyend="59" declfile="libs/base/src/base/numeric.h" declline="48" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8f52df7e071a1911e8ccdfe482a4558f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::get_sign</definition>
        <argsstring>(float r)</argsstring>
        <name>get_sign</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Calculates the sign as a positive or a negative int. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if r is greater than 0, -1 if not. </para>
</simplesect>
<simplesect kind="see"><para>Abs() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="63" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="63" bodyend="67" declfile="libs/base/src/base/numeric.h" declline="56" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad04118a0cac718a871b8917afbd44450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::get_sign</definition>
        <argsstring>(int r)</argsstring>
        <name>get_sign</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="71" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="71" bodyend="75" declfile="libs/base/src/base/numeric.h" declline="60" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1df61f8b3dbd8de93e41fb60b93db4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::get_sign</definition>
        <argsstring>(bool b)</argsstring>
        <name>get_sign</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns either 1 or -1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="79" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="79" bodyend="83" declfile="libs/base/src/base/numeric.h" declline="65" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3bd12ab44428ae8a36fd69bd74afef85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::lerp_float</definition>
        <argsstring>(float f, float scale, float t)</argsstring>
        <name>lerp_float</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="87" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="87" bodyend="90" declfile="libs/base/src/base/numeric.h" declline="69" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a692b7283c3a58ab27de56366b3fadbd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::square</definition>
        <argsstring>(float r)</argsstring>
        <name>square</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="94" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="94" bodyend="97" declfile="libs/base/src/base/numeric.h" declline="74" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a066452fba287c9fcb6a0188ea8424760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::sqrt</definition>
        <argsstring>(float r)</argsstring>
        <name>sqrt</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="101" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="101" bodyend="105" declfile="libs/base/src/base/numeric.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7d43cf27d1afca3da4e04b3b8451c9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::mod</definition>
        <argsstring>(float numer, float denumer)</argsstring>
        <name>mod</name>
        <param>
          <type>float</type>
          <declname>numer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>denumer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="109" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="109" bodyend="112" declfile="libs/base/src/base/numeric.h" declline="113" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a502ba547bcbe1c6035ed180e732cd80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::is_within_inclusive_as_int</definition>
        <argsstring>(int min, int c, int max)</argsstring>
        <name>is_within_inclusive_as_int</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="116" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="116" bodyend="119" declfile="libs/base/src/base/numeric.h" declline="116" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7ef41a3ef0020cdf027febcf7cb38db3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::round</definition>
        <argsstring>(float num, float gran)</argsstring>
        <name>round</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gran</declname>
        </param>
        <briefdescription>
<para>Rounds a value to the nearest nice value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the granularity is 1 the function rounds to the closest integer, at .5 the closest half integer, at 2 even integers etc... <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>the number to round </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gran</parametername>
</parameternamelist>
<parameterdescription>
<para>the granularity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="140" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="140" bodyend="154" declfile="libs/base/src/base/numeric.h" declline="125" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6124e8a8479a4359c8aec7feee2651de" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float eu::abs</definition>
        <argsstring>(float r)</argsstring>
        <name>abs</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="8" column="21" bodyfile="libs/base/src/base/numeric.h" bodystart="8" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a63cd526bac84ee9b0d7550d6c73657d5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool eu::is_zero</definition>
        <argsstring>(float r)</argsstring>
        <name>is_zero</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="17" column="20" bodyfile="libs/base/src/base/numeric.h" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8e2e7f88b7732924df89619f76286878" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool eu::is_equal</definition>
        <argsstring>(float lhs, float rhs)</argsstring>
        <name>is_equal</name>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="24" column="5" bodyfile="libs/base/src/base/numeric.h" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aaeb3957939ed66035cda54f8bfaa63bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eu::DEFAULT_INTERPOLATE</definition>
        <argsstring>(float, lerp_float)</argsstring>
        <name>DEFAULT_INTERPOLATE</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type><ref refid="namespaceeu_1a3bd12ab44428ae8a36fd69bd74afef85" kindref="member">lerp_float</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="71" column="5" declfile="libs/base/src/base/numeric.h" declline="71" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::get_default_if_close_to_zero</definition>
        <argsstring>(T value, T def, T epsilon)</argsstring>
        <name>get_default_if_close_to_zero</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T</type>
          <declname>def</declname>
        </param>
        <param>
          <type>T</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="132" column="5" bodyfile="libs/base/src/base/numeric.h" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a5d5dc7f4ea7cac8493e9006180e9a657" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool eu::is_each_nth</definition>
        <argsstring>(I i, I each)</argsstring>
        <name>is_each_nth</name>
        <param>
          <type>I</type>
          <declname>i</declname>
        </param>
        <param>
          <type>I</type>
          <declname>each</declname>
        </param>
        <briefdescription>
<para>returns true for a index each Nth loop. </para>
        </briefdescription>
        <detaileddescription>
<para>pass zero to always return false useful for example adding a newline each 10th or 15th line </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="142" column="5" bodyfile="libs/base/src/base/numeric.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1adf684320d839b7ad7cf6163853ec9411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; int &gt;</type>
        <definition>std::optional&lt; int &gt; eu::locale_parse_int</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>locale_parse_int</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numparse.cc" line="10" column="15" bodyfile="libs/base/src/base/numparse.cc" bodystart="10" bodyend="21" declfile="libs/base/src/base/numparse.h" declline="9" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0b1057fd5242b0a4ba9271fbbc0cadfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; float &gt;</type>
        <definition>std::optional&lt; float &gt; eu::locale_parse_float</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>locale_parse_float</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numparse.cc" line="25" column="15" bodyfile="libs/base/src/base/numparse.cc" bodystart="25" bodyend="31" declfile="libs/base/src/base/numparse.h" declline="10" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0792cdc560d8001f2d6ac55f2df699df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; bool &gt;</type>
        <definition>std::optional&lt; bool &gt; eu::locale_parse_bool</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>locale_parse_bool</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numparse.cc" line="35" column="15" bodyfile="libs/base/src/base/numparse.cc" bodystart="35" bodyend="44" declfile="libs/base/src/base/numparse.h" declline="11" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4a137245341f97f23913f187bc0da6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; T &gt;</type>
        <definition>std::optional&lt;T&gt; eu::locale_parse_generic</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>locale_parse_generic</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numparse.h" line="17" column="1" declfile="libs/base/src/base/numparse.h" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1ea41c93d809a2e9ae6ca65e3a03eedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::get_current_directory</definition>
        <argsstring>()</argsstring>
        <name>get_current_directory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/os.cc" line="35" column="5" bodyfile="libs/base/src/base/os.cc" bodystart="35" bodyend="50" declfile="libs/base/src/base/os.h" declline="10" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1afd8c9110b5643d53fbf0ebd237a05261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1DirectoryListing" kindref="compound">DirectoryListing</ref></type>
        <definition>DirectoryListing eu::list_directory</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>list_directory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/os.cc" line="95" column="5" bodyfile="libs/base/src/base/os.cc" bodystart="95" bodyend="134" declfile="libs/base/src/base/os.h" declline="21" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a5c6d0f6da6365a54b442d80a1fc93e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::ends_with</definition>
        <argsstring>(const std::string &amp;str, char c)</argsstring>
        <name>ends_with</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/os.cc" line="139" column="5" bodyfile="libs/base/src/base/os.cc" bodystart="139" bodyend="149" declfile="libs/base/src/base/os.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8aac0f6d240fed6e952ac16cb92e6379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::join_path</definition>
        <argsstring>(const std::string &amp;left, const std::string &amp;right)</argsstring>
        <name>join_path</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/os.cc" line="152" column="5" bodyfile="libs/base/src/base/os.cc" bodystart="152" bodyend="162" declfile="libs/base/src/base/os.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a38ccdf740a6252ff460d18f353d47a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::get_extension</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>get_extension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/os.cc" line="165" column="5" bodyfile="libs/base/src/base/os.cc" bodystart="165" bodyend="168" declfile="libs/base/src/base/os.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a69883171877eaa656ec28f13f39deb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::get_file_name_including_extension</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>get_file_name_including_extension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/os.cc" line="171" column="5" bodyfile="libs/base/src/base/os.cc" bodystart="171" bodyend="183" declfile="libs/base/src/base/os.h" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab915433d195017cc02947489d6c8b356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::get_file_name_without_extension</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>get_file_name_without_extension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/os.cc" line="186" column="5" bodyfile="libs/base/src/base/os.cc" bodystart="186" bodyend="189" declfile="libs/base/src/base/os.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8bd59933f4b28ba2f7de1eeb578d5df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1unit3f" kindref="compound">unit3f</ref></type>
        <definition>unit3f eu::get_random_unit3</definition>
        <argsstring>(Random *random)</argsstring>
        <name>get_random_unit3</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/polarcoord.cc" line="42" column="5" bodyfile="libs/base/src/base/polarcoord.cc" bodystart="42" bodyend="45" declfile="libs/base/src/base/polarcoord.h" declline="23" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a66eb0c3eaa651f8be9b3403b3522af1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        <definition>quatf eu::lerp_quatf</definition>
        <argsstring>(const quatf &amp;f, const float scale, const quatf &amp;t)</argsstring>
        <name>lerp_quatf</name>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="214" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="214" bodyend="217" declfile="libs/base/src/base/quat.h" declline="73" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a38937a718ee289d51ad5972e883d4f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        <definition>quatf eu::slerp_fast</definition>
        <argsstring>(const quatf &amp;qa, const float t, const quatf &amp;qb)</argsstring>
        <name>slerp_fast</name>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>qa</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>qb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="221" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="221" bodyend="254" declfile="libs/base/src/base/quat.h" declline="74" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aaca0d00791a888537fd17406e6c7ae88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        <definition>quatf eu::slerp_shortway</definition>
        <argsstring>(const quatf &amp;from, const float scale, const quatf &amp;to)</argsstring>
        <name>slerp_shortway</name>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="258" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="258" bodyend="268" declfile="libs/base/src/base/quat.h" declline="75" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7d52baa17f1e27e830d1facb23c27d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const quatf &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="356" column="17" bodyfile="libs/base/src/base/quat.cc" bodystart="356" bodyend="359" declfile="libs/base/src/base/quat.h" declline="81" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1adc7077ea64fcc6ba21fa0cf7fee70d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::dot</definition>
        <argsstring>(const quatf &amp;lhs, const quatf &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="363" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="363" bodyend="366" declfile="libs/base/src/base/quat.h" declline="79" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a29457947467faa1477cee1829fc89846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        <definition>quatf eu::operator*</definition>
        <argsstring>(const quatf &amp;lhs, const quatf &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="369" column="11" bodyfile="libs/base/src/base/quat.cc" bodystart="369" bodyend="374" declfile="libs/base/src/base/quat.h" declline="83" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7c89a91c7d3c6b5848365f3c1a364ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        <definition>quatf eu::operator*</definition>
        <argsstring>(float scale, const quatf &amp;q)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="377" column="11" bodyfile="libs/base/src/base/quat.cc" bodystart="377" bodyend="382" declfile="libs/base/src/base/quat.h" declline="84" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1c83902bcc56340a823090158fa69133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        <definition>quatf eu::operator*</definition>
        <argsstring>(const quatf &amp;q, float scale)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="385" column="11" bodyfile="libs/base/src/base/quat.cc" bodystart="385" bodyend="390" declfile="libs/base/src/base/quat.h" declline="85" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1abc680621d9b15ffd418f75f85d47551b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        <definition>quatf eu::operator+</definition>
        <argsstring>(const quatf &amp;lhs, const quatf &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="394" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="394" bodyend="399" declfile="libs/base/src/base/quat.h" declline="86" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a699ab486c5e231d4f19f3bdde7ed8ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        <definition>quatf eu::operator-</definition>
        <argsstring>(const quatf &amp;lhs, const quatf &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1quatf" kindref="compound">quatf</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="403" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="403" bodyend="408" declfile="libs/base/src/base/quat.h" declline="87" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a308e15bbc2704f9b2bf5009d231d22d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eu::DEFAULT_INTERPOLATE</definition>
        <argsstring>(quatf, slerp_shortway)</argsstring>
        <name>DEFAULT_INTERPOLATE</name>
        <param>
          <type><ref refid="structeu_1_1quatf" kindref="compound">quatf</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aaca0d00791a888537fd17406e6c7ae88" kindref="member">slerp_shortway</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="77" column="5" declfile="libs/base/src/base/quat.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3b58d2764c39ae5868cfef488dfae32f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::get_random_gaussian_float01</definition>
        <argsstring>(Random *rand)</argsstring>
        <name>get_random_gaussian_float01</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.cc" line="84" column="5" bodyfile="libs/base/src/base/random.cc" bodystart="84" bodyend="101" declfile="libs/base/src/base/random.h" declline="91" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad6fd068325f34358a2513b5fb2ce68f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::get_random_gaussian</definition>
        <argsstring>(Random *rand, float mean, float std_dev)</argsstring>
        <name>get_random_gaussian</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>float</type>
          <declname>std_dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.cc" line="104" column="5" bodyfile="libs/base/src/base/random.cc" bodystart="104" bodyend="107" declfile="libs/base/src/base/random.h" declline="92" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa0f38d5df06aa601a01cc927e44db866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::get_random_gaussian</definition>
        <argsstring>(Random *rand, float mean, float std_dev, const Range&lt; float &gt; &amp;r)</argsstring>
        <name>get_random_gaussian</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>float</type>
          <declname>std_dev</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; float &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.cc" line="110" column="5" bodyfile="libs/base/src/base/random.cc" bodystart="110" bodyend="118" declfile="libs/base/src/base/random.h" declline="93" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8692b150eb4eee006f58a146fb247da3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::get_random_point_on_unit_circle_center_focused</definition>
        <argsstring>(Random *r)</argsstring>
        <name>get_random_point_on_unit_circle_center_focused</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.cc" line="133" column="5" bodyfile="libs/base/src/base/random.cc" bodystart="133" bodyend="139" declfile="libs/base/src/base/random.h" declline="45" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aedafaac95899fcf7abc3ed70c35ef70b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::get_random_point_on_unit_circle_uniform</definition>
        <argsstring>(Random *r)</argsstring>
        <name>get_random_point_on_unit_circle_uniform</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.cc" line="142" column="5" bodyfile="libs/base/src/base/random.cc" bodystart="142" bodyend="149" declfile="libs/base/src/base/random.h" declline="47" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a68ad5e0880da804b584c4ab7ed4cd551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::get_random_in_range</definition>
        <argsstring>(Random *rand, const Range&lt; T &gt; &amp;range)</argsstring>
        <name>get_random_in_range</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.h" line="50" column="7" bodyfile="libs/base/src/base/random.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a379f8761e860805cce5ff954edb3335e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::get_random_in_range</definition>
        <argsstring>(Random *rand, T min, T max)</argsstring>
        <name>get_random_in_range</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>T</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.h" line="56" column="7" bodyfile="libs/base/src/base/random.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab40cc4a4a614e2f011d6f8f7679fb235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::get_random_in_range</definition>
        <argsstring>(Random *rand, T max)</argsstring>
        <name>get_random_in_range</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.h" line="62" column="7" bodyfile="libs/base/src/base/random.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a83fdd3c3f01182d1274bdffde7f2871f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; eu::get_random_item_in_vector</definition>
        <argsstring>(Random *r, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>get_random_item_in_vector</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.h" line="68" column="13" bodyfile="libs/base/src/base/random.h" bodystart="68" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2e0ac273a7b8644647b102861511e8bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; eu::get_random_item_in_vector</definition>
        <argsstring>(Random *r, const ranges::span&lt; T &gt; &amp;v)</argsstring>
        <name>get_random_item_in_vector</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const ranges::span&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/random.h" line="80" column="13" bodyfile="libs/base/src/base/random.h" bodystart="80" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1d52a91adaa565513eb90b8d2dce2df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::from_01f</definition>
        <argsstring>(float lower_bound, float upper_bound, float value)</argsstring>
        <name>from_01f</name>
        <param>
          <type>float</type>
          <declname>lower_bound</declname>
        </param>
        <param>
          <type>float</type>
          <declname>upper_bound</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.cc" line="6" column="5" bodyfile="libs/base/src/base/range.cc" bodystart="6" bodyend="9" declfile="libs/base/src/base/range.h" declline="60" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a9a3978efa912b6fa277d7a04d86343b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float eu::from_01</definition>
        <argsstring>(const Range&lt; float &gt; &amp;range, float value)</argsstring>
        <name>from_01</name>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; float &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.cc" line="13" column="5" bodyfile="libs/base/src/base/range.cc" bodystart="13" bodyend="21" declfile="libs/base/src/base/range.h" declline="81" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a585f62351a364646d20d6a5a8a3d02b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt;</type>
        <definition>Range&lt;T&gt; eu::make_range</definition>
        <argsstring>(T min, T max)</argsstring>
        <name>make_range</name>
        <param>
          <type>T</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="39" column="11" bodyfile="libs/base/src/base/range.h" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa9d127020fc2c57993a5af83c95e66a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt;</type>
        <definition>Range&lt;T&gt; eu::make_range</definition>
        <argsstring>(T max)</argsstring>
        <name>make_range</name>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="45" column="11" bodyfile="libs/base/src/base/range.h" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a04e64daaa61f9647ef7e92816d44f98c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; int &gt;</type>
        <definition>Range&lt;int&gt; eu::make_range</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>make_range</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="51" column="11" bodyfile="libs/base/src/base/range.h" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a62e6335b7e10ac2e10defeb72ec6d0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::from_01</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, float value)</argsstring>
        <name>from_01</name>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="63" column="7" bodyfile="libs/base/src/base/range.h" bodystart="63" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a57d7cc3919022e61afa4b99f0adefcf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float eu::to01</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, T value)</argsstring>
        <name>to01</name>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="84" column="11" bodyfile="libs/base/src/base/range.h" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af2b461d314dcf9ca9b7a8040b268b37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::get360_angular</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, float value)</argsstring>
        <name>get360_angular</name>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="92" column="7" bodyfile="libs/base/src/base/range.h" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7e8aaccd2f627203128e4d4944fafe20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::remap_to</definition>
        <argsstring>(const Range&lt; F &gt; &amp;from, const Range&lt; T &gt; &amp;to, F value)</argsstring>
        <name>remap_to</name>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; F &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>F</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="101" column="7" bodyfile="libs/base/src/base/range.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1acd03216e0720fbf7f2f67f7f619d0fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::is_within</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, T value)</argsstring>
        <name>is_within</name>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="108" column="10" bodyfile="libs/base/src/base/range.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a039ba0b543cf5dbb5b2a61bf6c5efb71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::keep_within</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, T value)</argsstring>
        <name>keep_within</name>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="115" column="7" bodyfile="libs/base/src/base/range.h" bodystart="115" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a88d590b8dd7bd3e9e64ecf886d94e382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::wrap</definition>
        <argsstring>(const Range&lt; T &gt; &amp;range, T value)</argsstring>
        <name>wrap</name>
        <param>
          <type>const <ref refid="structeu_1_1Range" kindref="compound">Range</ref>&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="130" column="7" bodyfile="libs/base/src/base/range.h" bodystart="130" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a82ac31d7263bb75fb94563b2dc22d0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::to01</definition>
        <argsstring>(const Rectf &amp;r, const vec2f &amp;from)</argsstring>
        <name>to01</name>
        <param>
          <type>const <ref refid="structeu_1_1Rectf" kindref="compound">Rectf</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="944" column="5" bodyfile="libs/base/src/base/rect.cc" bodystart="944" bodyend="949" declfile="libs/base/src/base/rect.h" declline="222" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab368317d30f7a1a4a4f7ab3fffe5c378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::from_01</definition>
        <argsstring>(const Rectf &amp;r, const vec2f &amp;from)</argsstring>
        <name>from_01</name>
        <param>
          <type>const <ref refid="structeu_1_1Rectf" kindref="compound">Rectf</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="952" column="5" bodyfile="libs/base/src/base/rect.cc" bodystart="952" bodyend="957" declfile="libs/base/src/base/rect.h" declline="224" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae4207b4cc1738a159d2f75794821f401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::is_within</definition>
        <argsstring>(const Rectf &amp;r, const vec2f &amp;p)</argsstring>
        <name>is_within</name>
        <param>
          <type>const <ref refid="structeu_1_1Rectf" kindref="compound">Rectf</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="960" column="5" bodyfile="libs/base/src/base/rect.cc" bodystart="960" bodyend="965" declfile="libs/base/src/base/rect.h" declline="231" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a16d4005677d6b165ce1f8a1b5ce98f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Rectf &amp;r)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Rectf" kindref="compound">Rectf</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="967" column="17" bodyfile="libs/base/src/base/rect.cc" bodystart="967" bodyend="970" declfile="libs/base/src/base/rect.h" declline="237" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8acab5b125d2fbdefadca3f94447eacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::to01</definition>
        <argsstring>(const Recti &amp;r, const vec2i &amp;from)</argsstring>
        <name>to01</name>
        <param>
          <type>const <ref refid="structeu_1_1Recti" kindref="compound">Recti</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="973" column="5" bodyfile="libs/base/src/base/rect.cc" bodystart="973" bodyend="986" declfile="libs/base/src/base/rect.h" declline="223" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6d091cb90f1a177f177838e4f9d0f2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref></type>
        <definition>vec2i eu::from_01</definition>
        <argsstring>(const Recti &amp;r, const vec2f &amp;from)</argsstring>
        <name>from_01</name>
        <param>
          <type>const <ref refid="structeu_1_1Recti" kindref="compound">Recti</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="989" column="5" bodyfile="libs/base/src/base/rect.cc" bodystart="989" bodyend="994" declfile="libs/base/src/base/rect.h" declline="225" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6632d79ff03a42beacf0468056ad795a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::is_within</definition>
        <argsstring>(const Recti &amp;r, const vec2i &amp;p)</argsstring>
        <name>is_within</name>
        <param>
          <type>const <ref refid="structeu_1_1Recti" kindref="compound">Recti</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="997" column="5" bodyfile="libs/base/src/base/rect.cc" bodystart="997" bodyend="1002" declfile="libs/base/src/base/rect.h" declline="232" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1abd1c70d2bf77464694f37e31fff41214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator==</definition>
        <argsstring>(const Recti &amp;lhs, const Recti &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeu_1_1Recti" kindref="compound">Recti</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Recti" kindref="compound">Recti</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="1005" column="5" bodyfile="libs/base/src/base/rect.cc" bodystart="1005" bodyend="1012" declfile="libs/base/src/base/rect.h" declline="240" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3c34be9ef3ba5cb305ace118ef48aebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Recti &amp;r)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Recti" kindref="compound">Recti</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="1014" column="17" bodyfile="libs/base/src/base/rect.cc" bodystart="1014" bodyend="1017" declfile="libs/base/src/base/rect.h" declline="238" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7c00f03c7ac69e18659a704c3c3fb55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::get_random_point</definition>
        <argsstring>(Random *random, const Rectf &amp;r)</argsstring>
        <name>get_random_point</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rectf" kindref="compound">Rectf</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="1023" column="5" bodyfile="libs/base/src/base/rect.cc" bodystart="1023" bodyend="1028" declfile="libs/base/src/base/rect.h" declline="234" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad27742014249195fff32ad4024b200c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref></type>
        <definition>vec2i eu::get_random_point</definition>
        <argsstring>(Random *random, const Recti &amp;r)</argsstring>
        <name>get_random_point</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Recti" kindref="compound">Recti</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rect.cc" line="1031" column="11" bodyfile="libs/base/src/base/rect.cc" bodystart="1031" bodyend="1036" declfile="libs/base/src/base/rect.h" declline="235" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4e21ce2617e96144d9710251cf01a577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::operator+</definition>
        <argsstring>(const Rgb &amp;lhs, const Rgb &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="89" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="89" bodyend="94" declfile="libs/base/src/base/rgb.h" declline="88" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a235f8de7332fe24a7697585cb1f15311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::operator-</definition>
        <argsstring>(const Rgb &amp;lhs, const Rgb &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="97" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="97" bodyend="102" declfile="libs/base/src/base/rgb.h" declline="89" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a092eb862dca85a99a27581d26ed6400a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::operator*</definition>
        <argsstring>(const Rgb &amp;lhs, const Rgb &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="105" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="105" bodyend="110" declfile="libs/base/src/base/rgb.h" declline="92" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac79c84ccfcab6d4b464b44454c695d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::operator/</definition>
        <argsstring>(const Rgb &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="113" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="113" bodyend="118" declfile="libs/base/src/base/rgb.h" declline="93" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a360cd0ea893d2585c9efaa2185730f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::operator*</definition>
        <argsstring>(const Rgb &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="122" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="122" bodyend="125" declfile="libs/base/src/base/rgb.h" declline="94" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac803021ac3262a5ee73a22388e200126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::operator*</definition>
        <argsstring>(float lhs, const Rgb &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="129" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="129" bodyend="132" declfile="libs/base/src/base/rgb.h" declline="95" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a24b05943cc8105a4fc87758679c2ce08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::dot</definition>
        <argsstring>(const Rgb &amp;lhs, const Rgb &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="138" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="138" bodyend="141" declfile="libs/base/src/base/rgb.h" declline="96" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae7fe598e846acc061eedf71bfeb579e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::clamp</definition>
        <argsstring>(const Rgb &amp;c)</argsstring>
        <name>clamp</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="144" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="144" bodyend="152" declfile="libs/base/src/base/rgb.h" declline="97" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae0ef29461a06b35e97ca6491d3e8122e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Rgbi &amp;c)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="170" column="17" bodyfile="libs/base/src/base/rgb.cc" bodystart="170" bodyend="173" declfile="libs/base/src/base/rgb.h" declline="157" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aed67a4f64ece7792408622284525daf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Rgbai &amp;c)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="175" column="17" bodyfile="libs/base/src/base/rgb.cc" bodystart="175" bodyend="178" declfile="libs/base/src/base/rgb.h" declline="158" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aac3fbf16a7d1c6058a968a8ce672d179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Rgb &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="180" column="17" bodyfile="libs/base/src/base/rgb.cc" bodystart="180" bodyend="183" declfile="libs/base/src/base/rgb.h" declline="159" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a65da5eb3813ba21a5d46bced09266f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Rgba &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="185" column="17" bodyfile="libs/base/src/base/rgb.cc" bodystart="185" bodyend="188" declfile="libs/base/src/base/rgb.h" declline="160" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a045c02ce2201c5128a7f4385b387834f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Hsl &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="190" column="17" bodyfile="libs/base/src/base/rgb.cc" bodystart="190" bodyend="193" declfile="libs/base/src/base/rgb.h" declline="161" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad2e4d63fbc9b58e161b8fbb195e7713e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator==</definition>
        <argsstring>(const Rgbi &amp;lhs, const Rgbi &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="200" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="200" bodyend="203" declfile="libs/base/src/base/rgb.h" declline="167" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7f511db8bad8cc892d22ff43445b93ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator!=</definition>
        <argsstring>(const Rgbi &amp;lhs, const Rgbi &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="207" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="207" bodyend="210" declfile="libs/base/src/base/rgb.h" declline="168" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a17f8c93dfdc0a33a545b1d2ab3aaa9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator==</definition>
        <argsstring>(const Rgbai &amp;lhs, const Rgbai &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="214" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="214" bodyend="217" declfile="libs/base/src/base/rgb.h" declline="170" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2c21d4a5de353a07dbd754c10f45a623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator!=</definition>
        <argsstring>(const Rgbai &amp;lhs, const Rgbai &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="221" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="221" bodyend="224" declfile="libs/base/src/base/rgb.h" declline="171" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a5dc1c1ab8b94544d08db0d25acc1a716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::to_rgb</definition>
        <argsstring>(const Rgbi &amp;c)</argsstring>
        <name>to_rgb</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="229" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="229" bodyend="237" declfile="libs/base/src/base/rgb.h" declline="176" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6155926b298401611f943bec55c5b22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::to_rgb</definition>
        <argsstring>(const Rgba &amp;c)</argsstring>
        <name>to_rgb</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="240" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="240" bodyend="243" declfile="libs/base/src/base/rgb.h" declline="177" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1f218b775491e0620bce56b96ce5c8f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::to_rgb</definition>
        <argsstring>(const Rgbai &amp;c)</argsstring>
        <name>to_rgb</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="246" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="246" bodyend="254" declfile="libs/base/src/base/rgb.h" declline="178" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a03176488fa9539ee25bf06e5e48fb568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::to_rgb</definition>
        <argsstring>(const Hsl &amp;hsl)</argsstring>
        <name>to_rgb</name>
        <param>
          <type>const <ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>hsl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="257" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="257" bodyend="286" declfile="libs/base/src/base/rgb.h" declline="179" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a88f6cf95c25ecec7d49fa6f993bd6910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl eu::to_hsl</definition>
        <argsstring>(const Rgb &amp;c)</argsstring>
        <name>to_hsl</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="291" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="291" bodyend="347" declfile="libs/base/src/base/rgb.h" declline="183" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a231d9fcc4517de14390ea7070ed2b1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref></type>
        <definition>Rgbi eu::to_rgbi</definition>
        <argsstring>(const Rgb &amp;c)</argsstring>
        <name>to_rgbi</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="352" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="352" bodyend="360" declfile="libs/base/src/base/rgb.h" declline="187" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3498f67675996f690e317c9829d03e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref></type>
        <definition>Rgbi eu::to_rgbi</definition>
        <argsstring>(const Rgba &amp;c)</argsstring>
        <name>to_rgbi</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="363" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="363" bodyend="371" declfile="libs/base/src/base/rgb.h" declline="188" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4a351877801fb7c647da67e1b10375dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref></type>
        <definition>Rgbi eu::to_rgbi</definition>
        <argsstring>(const Rgbai &amp;c)</argsstring>
        <name>to_rgbi</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="374" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="374" bodyend="377" declfile="libs/base/src/base/rgb.h" declline="189" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aafb1d66b6dcb6d956147c03ae1585223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgba" kindref="compound">Rgba</ref></type>
        <definition>Rgba eu::to_rgba</definition>
        <argsstring>(const Rgbai &amp;c)</argsstring>
        <name>to_rgba</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbai" kindref="compound">Rgbai</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="381" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="381" bodyend="392" declfile="libs/base/src/base/rgb.h" declline="192" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0f17cf2fcf59151b23b17e4133641e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgbai" kindref="compound">Rgbai</ref></type>
        <definition>Rgbai eu::to_rgbai</definition>
        <argsstring>(const Rgba &amp;c)</argsstring>
        <name>to_rgbai</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgba" kindref="compound">Rgba</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="395" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="395" bodyend="406" declfile="libs/base/src/base/rgb.h" declline="193" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab4d0f6c95e9c78187eabef8af23ba4af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::lerp_rgb</definition>
        <argsstring>(const Rgb &amp;from, float v, const Rgb &amp;to)</argsstring>
        <name>lerp_rgb</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="410" column="9" bodyfile="libs/base/src/base/rgb.cc" bodystart="410" bodyend="418" declfile="libs/base/src/base/rgb.h" declline="199" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac6e04b2552ce654675d38a3e5aa4489c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_js_hex_color</definition>
        <argsstring>(const Rgbi &amp;c)</argsstring>
        <name>to_js_hex_color</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="422" column="17" bodyfile="libs/base/src/base/rgb.cc" bodystart="422" bodyend="425" declfile="libs/base/src/base/rgb.h" declline="203" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a60a4812b2f88f80d7b131756baa39138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_html_rgb</definition>
        <argsstring>(const Rgbi &amp;c)</argsstring>
        <name>to_html_rgb</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="427" column="17" bodyfile="libs/base/src/base/rgb.cc" bodystart="427" bodyend="430" declfile="libs/base/src/base/rgb.h" declline="204" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a31588c06b608e9c149b192cfc8399ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl eu::get_saturated</definition>
        <argsstring>(const Hsl &amp;ahsl, float amount, IsAbsolute method)</argsstring>
        <name>get_saturated</name>
        <param>
          <type>const <ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>ahsl</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1a79f30860364ae543e1f272377f116931" kindref="member">IsAbsolute</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="435" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="435" bodyend="449" declfile="libs/base/src/base/rgb.h" declline="128" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af3987ed6a8d630ed4da1a949ae60da9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl eu::get_desaturated</definition>
        <argsstring>(const Hsl &amp;ahsl, float amount, IsAbsolute method)</argsstring>
        <name>get_desaturated</name>
        <param>
          <type>const <ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>ahsl</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1a79f30860364ae543e1f272377f116931" kindref="member">IsAbsolute</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="452" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="452" bodyend="466" declfile="libs/base/src/base/rgb.h" declline="129" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a49e4a46502c856a4b881349d0801fbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl eu::get_lightened</definition>
        <argsstring>(const Hsl &amp;ahsl, float amount, IsAbsolute method)</argsstring>
        <name>get_lightened</name>
        <param>
          <type>const <ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>ahsl</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1a79f30860364ae543e1f272377f116931" kindref="member">IsAbsolute</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="469" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="469" bodyend="483" declfile="libs/base/src/base/rgb.h" declline="130" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab649c4f956c3728fcba1f96aa2f37e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref></type>
        <definition>Hsl eu::get_darkened</definition>
        <argsstring>(const Hsl &amp;ahsl, float amount, IsAbsolute method)</argsstring>
        <name>get_darkened</name>
        <param>
          <type>const <ref refid="structeu_1_1Hsl" kindref="compound">Hsl</ref> &amp;</type>
          <declname>ahsl</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1a79f30860364ae543e1f272377f116931" kindref="member">IsAbsolute</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="486" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="486" bodyend="500" declfile="libs/base/src/base/rgb.h" declline="131" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a918492e43cb67eccba05ef2d8b970b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        <definition>Rgb eu::get_shaded_color</definition>
        <argsstring>(const Rgb &amp;color, float percentage)</argsstring>
        <name>get_shaded_color</name>
        <param>
          <type>const <ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>float</type>
          <declname>percentage</declname>
        </param>
        <briefdescription>
<para>Makes a color brighter or darker. </para>
        </briefdescription>
        <detaileddescription>
<para>The +1 makes it white, 0% is no change, -1 makes it black. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="503" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="503" bodyend="512" declfile="libs/base/src/base/rgb.h" declline="136" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a9455601a2d2bd65d6d4f168c46bd3bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="structeu_1_1Rgbi" kindref="compound">Rgbi</ref> &gt;</type>
        <definition>Result&lt; Rgbi &gt; eu::to_rgbi</definition>
        <argsstring>(const std::string &amp;original_value)</argsstring>
        <name>to_rgbi</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>original_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.cc" line="637" column="5" bodyfile="libs/base/src/base/rgb.cc" bodystart="637" bodyend="663" declfile="libs/base/src/base/rgb.h" declline="209" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2172e10309a938a2851cfbcc1def35dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eu::DEFAULT_INTERPOLATE</definition>
        <argsstring>(Rgb, lerp_rgb)</argsstring>
        <name>DEFAULT_INTERPOLATE</name>
        <param>
          <type><ref refid="structeu_1_1Rgb" kindref="compound">Rgb</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceeu_1ab4d0f6c95e9c78187eabef8af23ba4af" kindref="member">lerp_rgb</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/rgb.h" line="425" column="5" declfile="libs/base/src/base/rgb.h" declline="425" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aaf1a3950938da15ce8c4835ab92ee46a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
        <definition>size2f eu::min</definition>
        <argsstring>(const size2f lhs, const size2f rhs)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="140" column="5" bodyfile="libs/base/src/base/size2.cc" bodystart="140" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad137346d069927fe29916ab42905f177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
        <definition>size2f eu::max</definition>
        <argsstring>(const size2f lhs, const size2f rhs)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="149" column="5" bodyfile="libs/base/src/base/size2.cc" bodystart="149" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad1cf981ed687f71578469315ae45498a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
        <definition>size2f eu::operator+</definition>
        <argsstring>(const size2f &amp;lhs, const size2f &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="158" column="5" bodyfile="libs/base/src/base/size2.cc" bodystart="158" bodyend="163" declfile="libs/base/src/base/size2.h" declline="80" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a69fd26cccb6e9ffc339b9c924fcc2768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
        <definition>size2f eu::operator-</definition>
        <argsstring>(const size2f &amp;lhs, const size2f &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="166" column="5" bodyfile="libs/base/src/base/size2.cc" bodystart="166" bodyend="171" declfile="libs/base/src/base/size2.h" declline="82" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a82b3f23cfe59a2df417ff87eb5ee1790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
        <definition>size2f eu::operator*</definition>
        <argsstring>(const size2f &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="173" column="12" bodyfile="libs/base/src/base/size2.cc" bodystart="173" bodyend="178" declfile="libs/base/src/base/size2.h" declline="85" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ada225ae5296210a4b7e3d4c5b18867ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
        <definition>size2f eu::operator*</definition>
        <argsstring>(float lhs, const size2f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="180" column="12" bodyfile="libs/base/src/base/size2.cc" bodystart="180" bodyend="185" declfile="libs/base/src/base/size2.h" declline="87" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2f274ef437473d7ec1b02b7f9e12a872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
        <definition>size2f eu::operator/</definition>
        <argsstring>(const size2f &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="188" column="5" bodyfile="libs/base/src/base/size2.cc" bodystart="188" bodyend="193" declfile="libs/base/src/base/size2.h" declline="90" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1adc21015d1c4d7dc2144250e4d42e678e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const size2f &amp;r)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="195" column="17" bodyfile="libs/base/src/base/size2.cc" bodystart="195" bodyend="198" declfile="libs/base/src/base/size2.h" declline="92" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa16217083c29edbfba50968a35b41c53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
        <definition>size2i eu::min</definition>
        <argsstring>(const size2i lhs, const size2i rhs)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="309" column="5" bodyfile="libs/base/src/base/size2.cc" bodystart="309" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2c4998ac6f22f4a335f3c2c1e651dd45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
        <definition>size2i eu::max</definition>
        <argsstring>(const size2i lhs, const size2i rhs)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="318" column="5" bodyfile="libs/base/src/base/size2.cc" bodystart="318" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3d7f84a44cd6df67c715824cd9b3f54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
        <definition>size2i eu::operator+</definition>
        <argsstring>(const size2i &amp;lhs, const size2i &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="327" column="5" bodyfile="libs/base/src/base/size2.cc" bodystart="327" bodyend="332" declfile="libs/base/src/base/size2.h" declline="81" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a33fd6bc18516eee210c77ae166ba5796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
        <definition>size2i eu::operator-</definition>
        <argsstring>(const size2i &amp;lhs, const size2i &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="335" column="5" bodyfile="libs/base/src/base/size2.cc" bodystart="335" bodyend="340" declfile="libs/base/src/base/size2.h" declline="83" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a81822271eb212499bd9287750d258eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
        <definition>size2i eu::operator*</definition>
        <argsstring>(const size2i &amp;lhs, int rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="342" column="12" bodyfile="libs/base/src/base/size2.cc" bodystart="342" bodyend="347" declfile="libs/base/src/base/size2.h" declline="86" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a34fa872b2847a24522ef1cf188e2d88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
        <definition>size2i eu::operator*</definition>
        <argsstring>(int lhs, const size2i &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="349" column="12" bodyfile="libs/base/src/base/size2.cc" bodystart="349" bodyend="354" declfile="libs/base/src/base/size2.h" declline="88" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa5cd1c0162d56faee9abc25863eaa302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const size2i &amp;r)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.cc" line="356" column="17" bodyfile="libs/base/src/base/size2.cc" bodystart="356" bodyend="359" declfile="libs/base/src/base/size2.h" declline="93" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1acda5d737263f574be74b16698dd0af2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
        <definition>size2f eu::min</definition>
        <argsstring>(const size2f &amp;lhs, const size2f &amp;rhs)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.h" line="75" column="12" declfile="libs/base/src/base/size2.h" declline="75" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a423071dfd5e7467c845881a6fe83bcb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
        <definition>size2i eu::min</definition>
        <argsstring>(const size2i &amp;lhs, const size2i &amp;rhs)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.h" line="76" column="12" declfile="libs/base/src/base/size2.h" declline="76" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a869a49f93addf981bc09b4405fe09f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2f" kindref="compound">size2f</ref></type>
        <definition>size2f eu::max</definition>
        <argsstring>(const size2f &amp;lhs, const size2f &amp;rhs)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2f" kindref="compound">size2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.h" line="77" column="12" declfile="libs/base/src/base/size2.h" declline="77" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8421d1db2ee1ff31bebcb52d484a5418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1size2i" kindref="compound">size2i</ref></type>
        <definition>size2i eu::max</definition>
        <argsstring>(const size2i &amp;lhs, const size2i &amp;rhs)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1size2i" kindref="compound">size2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/size2.h" line="78" column="12" declfile="libs/base/src/base/size2.h" declline="78" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1adcd3567dd191ebe2579751cc89b1f18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string eu::to_string_for_custom_argparser</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>to_string_for_custom_argparser</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/string_io.h" line="23" column="5" bodyfile="libs/base/src/base/string_io.h" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4aeb5eeb53a9b2c08890586778510813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt;T&gt; eu::parse_for_custom_argparser</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>parse_for_custom_argparser</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/string_io.h" line="30" column="5" bodyfile="libs/base/src/base/string_io.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gad9066d3055457c57ae5375b238a22a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>std::pair&lt; std::string, std::string &gt; eu::get_last_string</definition>
        <argsstring>(const std::string &amp;str, char sep)</argsstring>
        <name>get_last_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>for hello.dog gets .dog </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="17" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="17" bodyend="28" declfile="libs/base/src/base/stringutils.h" declline="34" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga2ae1e3ca3167ed8f8138a4b275de664c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::get_first_chars</definition>
        <argsstring>(const std::string &amp;str, std::size_t count)</argsstring>
        <name>get_first_chars</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="32" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="32" bodyend="36" declfile="libs/base/src/base/stringutils.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga562092e6d5cdff99bb2002135520d43a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::get_first_chars_with_ellipsis</definition>
        <argsstring>(const std::string &amp;str, unsigned int count)</argsstring>
        <name>get_first_chars_with_ellipsis</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="40" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="40" bodyend="48" declfile="libs/base/src/base/stringutils.h" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gaf34bd10282008511adeee9b34ed68de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::strip_last_string</definition>
        <argsstring>(const std::string &amp;str, char sep)</argsstring>
        <name>strip_last_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>for hello.dog and . gets hello </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="52" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="52" bodyend="61" declfile="libs/base/src/base/stringutils.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga6835c61b16a0e91db39e1759f3ccf07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::trim_right</definition>
        <argsstring>(const std::string &amp;string_to_trim, const std::string &amp;trim_characters=space_characters)</argsstring>
        <name>trim_right</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_trim</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trim_characters</declname>
          <defval><ref refid="group__string_1ga15da2155ca42b256f31ead0dcf4f212d" kindref="member">space_characters</ref></defval>
        </param>
        <briefdescription>
<para>Remove characters from the right, stops at a invalid character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_trim</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to remove characters from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trim_characters</parametername>
</parameternamelist>
<parameterdescription>
<para>the characters to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the trimmed string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="65" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="65" bodyend="68" declfile="libs/base/src/base/stringutils.h" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga4189207e12bfff75ed562aac7fc68bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::trim_left</definition>
        <argsstring>(const std::string &amp;string_to_trim, const std::string &amp;trim_characters=space_characters)</argsstring>
        <name>trim_left</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_trim</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trim_characters</declname>
          <defval><ref refid="group__string_1ga15da2155ca42b256f31ead0dcf4f212d" kindref="member">space_characters</ref></defval>
        </param>
        <briefdescription>
<para>Remove characters from the left, stops at invalid character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_trim</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to remove characters from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trim_characters</parametername>
</parameternamelist>
<parameterdescription>
<para>the characters to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the trimmed string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="72" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="72" bodyend="75" declfile="libs/base/src/base/stringutils.h" declline="59" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gaba5dbc7e97fd23465bfb415e8d222087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::trim</definition>
        <argsstring>(const std::string &amp;string_to_trim, const std::string &amp;trim_characters=space_characters)</argsstring>
        <name>trim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_trim</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trim_characters</declname>
          <defval><ref refid="group__string_1ga15da2155ca42b256f31ead0dcf4f212d" kindref="member">space_characters</ref></defval>
        </param>
        <briefdescription>
<para>Remove characters from both the start and the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_trim</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to remove characters from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trim_characters</parametername>
</parameternamelist>
<parameterdescription>
<para>the characters to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the trimmed string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="79" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="79" bodyend="82" declfile="libs/base/src/base/stringutils.h" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gaf84b447fd234f94fb8dd8edf185f58bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::begins_with</definition>
        <argsstring>(const std::string &amp;string_to_test, const std::string &amp;start)</argsstring>
        <name>begins_with</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_test</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Tests if a string starts with another string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_test</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the start of the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the start match, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="87" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="87" bodyend="97" declfile="libs/base/src/base/stringutils.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga0769382ce3f4a117a18b8adf61298297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::ends_with</definition>
        <argsstring>(const std::string &amp;string_to_test, const std::string &amp;end)</argsstring>
        <name>ends_with</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_test</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Tests if a string ends with another string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_test</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the end match, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="101" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="101" bodyend="112" declfile="libs/base/src/base/stringutils.h" declline="86" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gae2f29a648243ade3cadfacad13ce419d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char eu::to_lower_char</definition>
        <argsstring>(char b)</argsstring>
        <name>to_lower_char</name>
        <param>
          <type>char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="116" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="116" bodyend="126" declfile="libs/base/src/base/stringutils.h" declline="90" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gaaccdb9e1d319324e3ceb237b5cfd8545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char eu::to_upper_char</definition>
        <argsstring>(char b)</argsstring>
        <name>to_upper_char</name>
        <param>
          <type>char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="129" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="129" bodyend="139" declfile="libs/base/src/base/stringutils.h" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga3490fea5c2e06de7db10f26fd799ebcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_lower</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>to_lower</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Generate a string containing only lower characters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to lower. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the lowered string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="143" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="143" bodyend="148" declfile="libs/base/src/base/stringutils.h" declline="101" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gac5b13077cd22cdd2639ed0e78343dc96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; eu::to_lower</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;str)</argsstring>
        <name>to_lower</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="152" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="152" bodyend="155" declfile="libs/base/src/base/stringutils.h" declline="105" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gac1da104b0fb3bb262e6b0b239d4e6b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_upper</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>to_upper</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="159" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="159" bodyend="164" declfile="libs/base/src/base/stringutils.h" declline="109" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga718ab12abe2887f18e26d30ee2da17a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::from_char_to_string</definition>
        <argsstring>(char c, CharToStringStyle style)</argsstring>
        <name>from_char_to_string</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="group__string_1ga20491245288871dc76aabddb7437225f" kindref="member">CharToStringStyle</ref></type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="168" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="168" bodyend="240" declfile="libs/base/src/base/stringutils.h" declline="119" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gacf20f68a47700651f5d80f922a7f7755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string::size_type</type>
        <definition>std::string::size_type eu::find_first_index_of_mismatch</definition>
        <argsstring>(const std::string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>find_first_index_of_mismatch</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="244" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="244" bodyend="265" declfile="libs/base/src/base/stringutils.h" declline="123" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga8bc5963164a5020bcb0eea52227390f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eu::replace_all</definition>
        <argsstring>(std::string *string, const std::string &amp;to_find, const std::string &amp;to_replace)</argsstring>
        <name>replace_all</name>
        <param>
          <type>std::string *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_find</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_replace</declname>
        </param>
        <briefdescription>
<para>Replace all occurrences in a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_find</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to find. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_replace</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to replace it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="269" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="269" bodyend="280" declfile="libs/base/src/base/stringutils.h" declline="132" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga4d4c1fb3db56599eff70f89fa2de5cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::replace_all</definition>
        <argsstring>(const std::string &amp;string, const std::string &amp;to_find, const std::string &amp;to_replace)</argsstring>
        <name>replace_all</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_find</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_replace</declname>
        </param>
        <briefdescription>
<para>Replace all occurrences in a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_find</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to find. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_replace</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to replace it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the modified string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="284" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="284" bodyend="289" declfile="libs/base/src/base/stringutils.h" declline="142" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga3638c6b55c2dcc81648800da6de164ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eu::copy</definition>
        <argsstring>(char *dst, const std::string &amp;src, const std::string::size_type &amp;count)</argsstring>
        <name>copy</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string::size_type &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Copy a string to a character buffer, adding null terminator at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of characters to copy (including null terminator) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="293" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="293" bodyend="297" declfile="libs/base/src/base/stringutils.h" declline="156" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga83c755cb8bef6eba9d1b94389df71e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::replace_with_character</definition>
        <argsstring>(const std::string &amp;string, const std::string &amp;to_find, char to_replace)</argsstring>
        <name>replace_with_character</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_find</declname>
        </param>
        <param>
          <type>char</type>
          <declname>to_replace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="301" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="301" bodyend="309" declfile="libs/base/src/base/stringutils.h" declline="146" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga2d8a389718c684995df67e39cbb9088b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::remove_from_end</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;end)</argsstring>
        <name>remove_from_end</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="313" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="313" bodyend="327" declfile="libs/base/src/base/stringutils.h" declline="159" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gadbcbe1a13ddabee90d5da53c17cf7b28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::strip</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;ch)</argsstring>
        <name>strip</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="331" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="331" bodyend="342" declfile="libs/base/src/base/stringutils.h" declline="221" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga32066fcac64a0443ce52bfb31ca147aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::remove_consecutive</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;ch)</argsstring>
        <name>remove_consecutive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="347" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="347" bodyend="368" declfile="libs/base/src/base/stringutils.h" declline="226" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga79dc0187564d6183a2839feacfd25f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; eu::split</definition>
        <argsstring>(const std::string &amp;s, char delim)</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="431" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="431" bodyend="440" declfile="libs/base/src/base/stringutils.h" declline="230" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga42d220783d67f13a83c7569fc65161e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; eu::split_on_spaces</definition>
        <argsstring>(const std::string &amp;string)</argsstring>
        <name>split_on_spaces</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="444" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="444" bodyend="453" declfile="libs/base/src/base/stringutils.h" declline="234" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gac3613554703d6525c3bcd4bf6b8638ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::get_string_or_empty</definition>
        <argsstring>(bool b, const std::string &amp;str)</argsstring>
        <name>get_string_or_empty</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="457" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="457" bodyend="467" declfile="libs/base/src/base/stringutils.h" declline="238" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gac2203845e75e9d4fba81b932ed6f95cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::is_number</definition>
        <argsstring>(char b)</argsstring>
        <name>is_number</name>
        <param>
          <type>char</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="471" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="471" bodyend="474" declfile="libs/base/src/base/stringutils.h" declline="18" declcolumn="4"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2bc26a14825311098ec9869e77968304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::parse_number</definition>
        <argsstring>(const char **aa)</argsstring>
        <name>parse_number</name>
        <param>
          <type>const char **</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="478" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="478" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gac0b21e26003c864786dfcca65af1569d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::compare_string</definition>
        <argsstring>(const std::string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>compare_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.cc" line="498" column="1" bodyfile="libs/base/src/base/stringutils.cc" bodystart="498" bodyend="524" declfile="libs/base/src/base/stringutils.h" declline="243" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga74ea8437f509e46eb13b30923ffd0b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TKey</type>
          </param>
          <param>
            <type>typename TValue</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; eu::to_string_vector</definition>
        <argsstring>(const std::map&lt; TKey, TValue &gt; &amp;map)</argsstring>
        <name>to_string_vector</name>
        <param>
          <type>const std::map&lt; TKey, TValue &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.h" line="164" column="5" bodyfile="libs/base/src/base/stringutils.h" bodystart="164" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga193c6023f77b968bc5d27ac2d687295c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TKey</type>
          </param>
          <param>
            <type>typename TValue</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; eu::from_key_to_string_vector</definition>
        <argsstring>(const std::map&lt; TKey, TValue &gt; &amp;map)</argsstring>
        <name>from_key_to_string_vector</name>
        <param>
          <type>const std::map&lt; TKey, TValue &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.h" line="178" column="5" bodyfile="libs/base/src/base/stringutils.h" bodystart="178" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1gaeaa12b9d84e57dc98becd039f00b5b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; eu::to_string_vector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data)</argsstring>
        <name>to_string_vector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.h" line="192" column="5" bodyfile="libs/base/src/base/stringutils.h" bodystart="192" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="group__string_1ga158110f80550e35157a31db9769bd1fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; eu::to_string_vector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, C callback)</argsstring>
        <name>to_string_vector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>C</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/stringutils.h" line="207" column="5" bodyfile="libs/base/src/base/stringutils.h" bodystart="207" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7721e6e657d9e4bdd01e825bd16620d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::operator+</definition>
        <argsstring>(const vec2f &amp;lhs, const vec2f &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Math operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="301" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="301" bodyend="306" declfile="libs/base/src/base/vec2.h" declline="159" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a493dd6cdaa12a02daeb54b0eaff4c2b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::operator-</definition>
        <argsstring>(const vec2f &amp;lhs, const vec2f &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="308" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="308" bodyend="313" declfile="libs/base/src/base/vec2.h" declline="160" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a17e4342c4abff4e825439bc75e2a8824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::operator*</definition>
        <argsstring>(const vec2f &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="315" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="315" bodyend="320" declfile="libs/base/src/base/vec2.h" declline="161" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3af89735825a3ff86c8ce83d19c5504c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::operator*</definition>
        <argsstring>(float lhs, const vec2f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="322" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="322" bodyend="327" declfile="libs/base/src/base/vec2.h" declline="162" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aacd0935eb5a7ad7361bae977868dc8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::operator*</definition>
        <argsstring>(const unit2f &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1unit2f" kindref="compound">unit2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="329" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="329" bodyend="334" declfile="libs/base/src/base/vec2.h" declline="163" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a10e19ecfa7d0488fea12b9cc4aa9366a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::operator*</definition>
        <argsstring>(float lhs, const unit2f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1unit2f" kindref="compound">unit2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="336" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="336" bodyend="341" declfile="libs/base/src/base/vec2.h" declline="164" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab0010bac0db2e4181466e0187fd2d5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::operator/</definition>
        <argsstring>(const vec2f &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="344" column="5" bodyfile="libs/base/src/base/vec2.cc" bodystart="344" bodyend="349" declfile="libs/base/src/base/vec2.h" declline="165" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a74fd1df2fa462e87ab745d86756a2596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref></type>
        <definition>vec2i eu::operator+</definition>
        <argsstring>(const vec2i &amp;lhs, const vec2i &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="353" column="5" bodyfile="libs/base/src/base/vec2.cc" bodystart="353" bodyend="358" declfile="libs/base/src/base/vec2.h" declline="167" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2991d3933f6782ce2af87931fe56da28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref></type>
        <definition>vec2i eu::operator-</definition>
        <argsstring>(const vec2i &amp;lhs, const vec2i &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="362" column="5" bodyfile="libs/base/src/base/vec2.cc" bodystart="362" bodyend="367" declfile="libs/base/src/base/vec2.h" declline="168" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae3f5218c7edbafb4b4ab8811d0eb7c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref></type>
        <definition>vec2i eu::operator*</definition>
        <argsstring>(const vec2i &amp;lhs, int rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="370" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="370" bodyend="375" declfile="libs/base/src/base/vec2.h" declline="169" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1adefa5317d94d2eaaf87068e4651fbf6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref></type>
        <definition>vec2i eu::operator*</definition>
        <argsstring>(int lhs, const vec2i &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="378" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="378" bodyend="383" declfile="libs/base/src/base/vec2.h" declline="170" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4012e928f3998304dfdab8e240d5741b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator==</definition>
        <argsstring>(const vec2i &amp;lhs, const vec2i &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="387" column="5" bodyfile="libs/base/src/base/vec2.cc" bodystart="387" bodyend="390" declfile="libs/base/src/base/vec2.h" declline="175" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af5ba3493cfb07e1bc3fef51c6969ed59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator!=</definition>
        <argsstring>(const vec2i &amp;lhs, const vec2i &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="393" column="5" bodyfile="libs/base/src/base/vec2.cc" bodystart="393" bodyend="396" declfile="libs/base/src/base/vec2.h" declline="176" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a59475df095c5d7a97f1dcc98d6aa2c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::dot</definition>
        <argsstring>(const vec2f &amp;lhs, const vec2f &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="400" column="5" bodyfile="libs/base/src/base/vec2.cc" bodystart="400" bodyend="403" declfile="libs/base/src/base/vec2.h" declline="182" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1add582b9f952e7c9190fdeedcfe9a7bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        <definition>vec2f eu::lerp_vec2f</definition>
        <argsstring>(const vec2f &amp;from, float v, const vec2f &amp;to)</argsstring>
        <name>lerp_vec2f</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="406" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="406" bodyend="413" declfile="libs/base/src/base/vec2.h" declline="187" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aeee5dfdf62128163b5261bd24f465f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref></type>
        <definition>vec2i eu::lerp_vec2i</definition>
        <argsstring>(const vec2i &amp;from, float v, const vec2i &amp;to)</argsstring>
        <name>lerp_vec2i</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="415" column="11" bodyfile="libs/base/src/base/vec2.cc" bodystart="415" bodyend="422" declfile="libs/base/src/base/vec2.h" declline="188" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2542c2195c5a4d7aecbd316656938d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const vec2f &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Printing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="425" column="17" bodyfile="libs/base/src/base/vec2.cc" bodystart="425" bodyend="426" declfile="libs/base/src/base/vec2.h" declline="199" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aeb18ef95fa8a20f03c17138922ac59e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const unit2f &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1unit2f" kindref="compound">unit2f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="428" column="17" bodyfile="libs/base/src/base/vec2.cc" bodystart="428" bodyend="429" declfile="libs/base/src/base/vec2.h" declline="200" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab628ba9f22497b5361dbf9c5029339d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const vec2i &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="431" column="17" bodyfile="libs/base/src/base/vec2.cc" bodystart="431" bodyend="432" declfile="libs/base/src/base/vec2.h" declline="201" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab9a60464fdedabc9f972844ef35f0087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1unit2f" kindref="compound">unit2f</ref></type>
        <definition>unit2f eu::create_random_unit</definition>
        <argsstring>(Random *random)</argsstring>
        <name>create_random_unit</name>
        <param>
          <type><ref refid="structeu_1_1Random" kindref="compound">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="435" column="12" bodyfile="libs/base/src/base/vec2.cc" bodystart="435" bodyend="441" declfile="libs/base/src/base/vec2.h" declline="204" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a17ee4e7ebc6fe5a9a5bd67cdcba7df66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eu::DEFAULT_INTERPOLATE</definition>
        <argsstring>(vec2f, lerp_vec2f)</argsstring>
        <name>DEFAULT_INTERPOLATE</name>
        <param>
          <type><ref refid="structeu_1_1vec2f" kindref="compound">vec2f</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceeu_1add582b9f952e7c9190fdeedcfe9a7bf6" kindref="member">lerp_vec2f</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="190" column="5" declfile="libs/base/src/base/vec2.h" declline="190" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6889aa8cd2b3c5eceb0e5d810329dfc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eu::DEFAULT_INTERPOLATE</definition>
        <argsstring>(vec2i, lerp_vec2i)</argsstring>
        <name>DEFAULT_INTERPOLATE</name>
        <param>
          <type><ref refid="structeu_1_1vec2i" kindref="compound">vec2i</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aeee5dfdf62128163b5261bd24f465f4e" kindref="member">lerp_vec2i</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="191" column="5" declfile="libs/base/src/base/vec2.h" declline="191" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ab8a6f68da18e10b2967f85036add4a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f eu::operator+</definition>
        <argsstring>(const vec3f &amp;lhs, const vec3f &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Math operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="210" column="5" bodyfile="libs/base/src/base/vec3.cc" bodystart="210" bodyend="215" declfile="libs/base/src/base/vec3.h" declline="142" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa3ef73a562a8e8084995b4baecfaddc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f eu::operator-</definition>
        <argsstring>(const vec3f &amp;lhs, const vec3f &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="219" column="5" bodyfile="libs/base/src/base/vec3.cc" bodystart="219" bodyend="224" declfile="libs/base/src/base/vec3.h" declline="143" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a21e55c2e02440e6b0331beb208d52e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f eu::operator*</definition>
        <argsstring>(float lhs, const vec3f &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="227" column="11" bodyfile="libs/base/src/base/vec3.cc" bodystart="227" bodyend="232" declfile="libs/base/src/base/vec3.h" declline="145" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6d8a2963ba97b0f9a8cf0bde10559536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f eu::operator*</definition>
        <argsstring>(const vec3f &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="235" column="11" bodyfile="libs/base/src/base/vec3.cc" bodystart="235" bodyend="240" declfile="libs/base/src/base/vec3.h" declline="146" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af1f7600ad7dda1fc072de3dc0cab6566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f eu::operator/</definition>
        <argsstring>(const vec3f &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="244" column="5" bodyfile="libs/base/src/base/vec3.cc" bodystart="244" bodyend="249" declfile="libs/base/src/base/vec3.h" declline="148" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad0b1e78ccac28f5a81a6d14012c38ca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f eu::operator/</definition>
        <argsstring>(float lhs, const vec3f &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="253" column="5" bodyfile="libs/base/src/base/vec3.cc" bodystart="253" bodyend="257" declfile="libs/base/src/base/vec3.h" declline="149" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a52712bad0288a9de668ba0de63b4ae77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>vec3f eu::lerp_vec3f</definition>
        <argsstring>(const vec3f &amp;f, float v, const vec3f &amp;t)</argsstring>
        <name>lerp_vec3f</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Transformations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="264" column="11" bodyfile="libs/base/src/base/vec3.cc" bodystart="264" bodyend="272" declfile="libs/base/src/base/vec3.h" declline="155" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0bed61e8ed8edf22b6fab3ec6017735b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const vec3f &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Transformations. </para>
        </briefdescription>
        <detaileddescription>
<para>Printing.</para>
<para>Printing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="305" column="17" bodyfile="libs/base/src/base/vec3.cc" bodystart="305" bodyend="305" declfile="libs/base/src/base/vec3.h" declline="161" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1004835da05ba89d4fd8fad3d5196550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const unit3f &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1unit3f" kindref="compound">unit3f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="306" column="17" bodyfile="libs/base/src/base/vec3.cc" bodystart="306" bodyend="306" declfile="libs/base/src/base/vec3.h" declline="162" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3e9f10364a5876dfe80ac7c48191e571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Scale3f &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1Scale3f" kindref="compound">Scale3f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="307" column="17" bodyfile="libs/base/src/base/vec3.cc" bodystart="307" bodyend="307" declfile="libs/base/src/base/vec3.h" declline="163" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0244c527a110ff1c17e5758345510145" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>constexpr vec3f eu::min</definition>
        <argsstring>(const vec3f &amp;lhs, const vec3f &amp;rhs)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="169" column="5" bodyfile="libs/base/src/base/vec3.h" bodystart="169" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a57c66234bcccec15b3ad1c1d6e87410d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref></type>
        <definition>constexpr vec3f eu::max</definition>
        <argsstring>(const vec3f &amp;lhs, const vec3f &amp;rhs)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1vec3f" kindref="compound">vec3f</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="178" column="5" bodyfile="libs/base/src/base/vec3.h" bodystart="178" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac7c26cc972045fa1ca5b75b8c8f1e02d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const vec4f &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1vec4f" kindref="compound">vec4f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec4.cc" line="80" column="17" bodyfile="libs/base/src/base/vec4.cc" bodystart="80" bodyend="83" declfile="libs/base/src/base/vec4.h" declline="44" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/assert/src/assert/assert.h" line="89" column="1"/>
  </compounddef>
</doxygen>

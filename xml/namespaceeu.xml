<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceeu" kind="namespace" language="C++">
    <compoundname>eu</compoundname>
    <innerclass refid="structeu_1_1An" prot="public">eu::An</innerclass>
    <innerclass refid="structeu_1_1AxisAngle" prot="public">eu::AxisAngle</innerclass>
    <innerclass refid="structeu_1_1m4" prot="public">eu::m4</innerclass>
    <innerclass refid="structeu_1_1n2" prot="public">eu::n2</innerclass>
    <innerclass refid="structeu_1_1n3" prot="public">eu::n3</innerclass>
    <innerclass refid="structeu_1_1Q" prot="public">eu::Q</innerclass>
    <innerclass refid="structeu_1_1R" prot="public">eu::R</innerclass>
    <innerclass refid="structeu_1_1v2" prot="public">eu::v2</innerclass>
    <innerclass refid="structeu_1_1v3" prot="public">eu::v3</innerclass>
    <innerclass refid="structeu_1_1v4" prot="public">eu::v4</innerclass>
    <innernamespace refid="namespaceeu_1_1assertlib">eu::assertlib</innernamespace>
    <innernamespace refid="namespaceeu_1_1color">eu::color</innernamespace>
    <innernamespace refid="namespaceeu_1_1common">eu::common</innernamespace>
    <innernamespace refid="namespaceeu_1_1convert">eu::convert</innernamespace>
    <innernamespace refid="namespaceeu_1_1log">eu::log</innernamespace>
    <innernamespace refid="namespaceeu_1_1tests">eu::tests</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceeu_1af51071e3961aca6266852501c7229467" prot="public" static="no">
        <type>std::int8_t</type>
        <definition>using eu::i8 = typedef std::int8_t</definition>
        <argsstring></argsstring>
        <name>i8</name>
        <qualifiedname>eu::i8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="7" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1afecf894b7eeb1b4f81f1cb5a8a0067c4" prot="public" static="no">
        <type>std::int16_t</type>
        <definition>using eu::i16 = typedef std::int16_t</definition>
        <argsstring></argsstring>
        <name>i16</name>
        <qualifiedname>eu::i16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="8" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a15538981e8dad713d329dfddba4b8ae8" prot="public" static="no">
        <type>std::int32_t</type>
        <definition>using eu::i32 = typedef std::int32_t</definition>
        <argsstring></argsstring>
        <name>i32</name>
        <qualifiedname>eu::i32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="9" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1ac8b00c8f6edc5aa17943b7d8574bdeb4" prot="public" static="no">
        <type>std::int64_t</type>
        <definition>using eu::i64 = typedef std::int64_t</definition>
        <argsstring></argsstring>
        <name>i64</name>
        <qualifiedname>eu::i64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="10" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1ad34c2d1a742c5f58543366875dc21649" prot="public" static="no">
        <type>std::uint8_t</type>
        <definition>using eu::u8 = typedef std::uint8_t</definition>
        <argsstring></argsstring>
        <name>u8</name>
        <qualifiedname>eu::u8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="12" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a52c8bd230b49dafc68274e81ecfd9ee0" prot="public" static="no">
        <type>std::uint16_t</type>
        <definition>using eu::u16 = typedef std::uint16_t</definition>
        <argsstring></argsstring>
        <name>u16</name>
        <qualifiedname>eu::u16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="13" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a19661e9cf09bb33310545fe2b4c4f90c" prot="public" static="no">
        <type>std::uint32_t</type>
        <definition>using eu::u32 = typedef std::uint32_t</definition>
        <argsstring></argsstring>
        <name>u32</name>
        <qualifiedname>eu::u32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="14" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1ac0b6d77da47da3ce6bb55d66abc897f5" prot="public" static="no">
        <type>std::uint64_t</type>
        <definition>using eu::u64 = typedef std::uint64_t</definition>
        <argsstring></argsstring>
        <name>u64</name>
        <qualifiedname>eu::u64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="15" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="15" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceeu_1aad753d4f4d3024b2f9b0366738751511" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>constexpr An eu::one_turn</definition>
        <argsstring></argsstring>
        <name>one_turn</name>
        <qualifiedname>eu::one_turn</qualifiedname>
        <initializer>= <ref refid="structeu_1_1An_1a978cd7edfef73d6cac1eff7862c04472" kindref="member">An::from_radians</ref>(<ref refid="namespaceeu_1a25eb222abfe7c9e7f34d6f19ed40c1a0" kindref="member">pi</ref> * 2.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="82" column="18" bodyfile="libs/base/src/base/angle.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a03d368230871c29cd8d4464edd37081d" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>constexpr An eu::half_turn</definition>
        <argsstring></argsstring>
        <name>half_turn</name>
        <qualifiedname>eu::half_turn</qualifiedname>
        <initializer>= <ref refid="structeu_1_1An_1a978cd7edfef73d6cac1eff7862c04472" kindref="member">An::from_radians</ref>(<ref refid="namespaceeu_1a25eb222abfe7c9e7f34d6f19ed40c1a0" kindref="member">pi</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="83" column="18" bodyfile="libs/base/src/base/angle.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a795093272e2f8a2748665fd8a37e5d91" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>constexpr An eu::quarter_turn</definition>
        <argsstring></argsstring>
        <name>quarter_turn</name>
        <qualifiedname>eu::quarter_turn</qualifiedname>
        <initializer>= <ref refid="structeu_1_1An_1a978cd7edfef73d6cac1eff7862c04472" kindref="member">An::from_radians</ref>(<ref refid="namespaceeu_1a25eb222abfe7c9e7f34d6f19ed40c1a0" kindref="member">pi</ref> / 2.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="84" column="18" bodyfile="libs/base/src/base/angle.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a22905decd86a4bf45c79c109119f2b6f" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>constexpr An eu::no_rotation</definition>
        <argsstring></argsstring>
        <name>no_rotation</name>
        <qualifiedname>eu::no_rotation</qualifiedname>
        <initializer>= <ref refid="structeu_1_1An_1a978cd7edfef73d6cac1eff7862c04472" kindref="member">An::from_radians</ref>(0.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="85" column="18" bodyfile="libs/base/src/base/angle.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a5957f0b19a66d6e1123f22d681e726e0" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1m4" kindref="compound">m4</ref></type>
        <definition>constexpr m4 eu::m4_identity</definition>
        <argsstring></argsstring>
        <name>m4_identity</name>
        <qualifiedname>eu::m4_identity</qualifiedname>
        <initializer>= <ref refid="structeu_1_1m4_1aa47c360516068b62237182dd1f005cd7" kindref="member">m4::from_scalar</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.h" line="100" column="18" bodyfile="libs/base/src/base/mat4.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a25eb222abfe7c9e7f34d6f19ed40c1a0" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>constexpr float eu::pi</definition>
        <argsstring></argsstring>
        <name>pi</name>
        <qualifiedname>eu::pi</qualifiedname>
        <initializer>= 3.1415926535897932384626433832795<ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">f</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="122" column="21" bodyfile="libs/base/src/base/numeric.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a074a5f400069f641ce3857da18d65d93" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref></type>
        <definition>constexpr Q eu::q_identity</definition>
        <argsstring></argsstring>
        <name>q_identity</name>
        <qualifiedname>eu::q_identity</qualifiedname>
        <initializer>= <ref refid="structeu_1_1Q" kindref="compound">Q</ref>(1, <ref refid="structeu_1_1v3" kindref="compound">v3</ref>(0, 0, 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="70" column="17" bodyfile="libs/base/src/base/quat.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a1762260135f2b7b538f1b8be43146481" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref> &gt;</type>
        <definition>constexpr R&lt;float&gt; eu::r01</definition>
        <argsstring></argsstring>
        <name>r01</name>
        <qualifiedname>eu::r01</qualifiedname>
        <initializer>= { 0.0f, 1.0f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="46" column="17" bodyfile="libs/base/src/base/range.h" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1ab44633bc6b6ae7cbf3e473fe917d1e70" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref> &gt;</type>
        <definition>constexpr R&lt;float&gt; eu::r11</definition>
        <argsstring></argsstring>
        <name>r11</name>
        <qualifiedname>eu::r11</qualifiedname>
        <initializer>= { -1.0f, 1.0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="47" column="17" bodyfile="libs/base/src/base/range.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1a5fac55b859c3ed3d22eac1245737524f" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref></type>
        <definition>constexpr v2 eu::zero2f</definition>
        <argsstring></argsstring>
        <name>zero2f</name>
        <qualifiedname>eu::zero2f</qualifiedname>
        <initializer>= <ref refid="structeu_1_1v2" kindref="compound">v2</ref>{ 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="55" column="18" bodyfile="libs/base/src/base/vec2.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeu_1af1a49fc9a55b790e9d31a82a0aa3c6db" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>constexpr v3 eu::zero3f</definition>
        <argsstring></argsstring>
        <name>zero3f</name>
        <qualifiedname>eu::zero3f</qualifiedname>
        <initializer>= <ref refid="structeu_1_1v3" kindref="compound">v3</ref>{0.0f, 0.0f, 0.0f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="65" column="18" bodyfile="libs/base/src/base/vec3.h" bodystart="65" bodyend="65"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeu_1a3cbb6d297bb58186cf62a6faccaecc9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::sin</definition>
        <argsstring>(const An &amp;ang)</argsstring>
        <name>sin</name>
        <qualifiedname>eu::sin</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="54" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="54" bodyend="57" declfile="libs/base/src/base/angle.h" declline="88" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae6beaf44514cc6ed0e0868cde5ff1ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::cos</definition>
        <argsstring>(const An &amp;ang)</argsstring>
        <name>cos</name>
        <qualifiedname>eu::cos</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="61" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="61" bodyend="64" declfile="libs/base/src/base/angle.h" declline="89" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a516772ab56ddbef8fdfb9b155219fe89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::tan</definition>
        <argsstring>(const An &amp;ang)</argsstring>
        <name>tan</name>
        <qualifiedname>eu::tan</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="68" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="68" bodyend="71" declfile="libs/base/src/base/angle.h" declline="90" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1acc962f319f4b97d3a3b72cf4ecd0fd17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::asin</definition>
        <argsstring>(float v)</argsstring>
        <name>asin</name>
        <qualifiedname>eu::asin</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="75" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="75" bodyend="80" declfile="libs/base/src/base/angle.h" declline="91" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a541d45e26c450d76a511c7e3c753b0ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::acos</definition>
        <argsstring>(float v)</argsstring>
        <name>acos</name>
        <qualifiedname>eu::acos</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="84" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="84" bodyend="89" declfile="libs/base/src/base/angle.h" declline="92" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae46ea0693c249adaf3485667bce0d9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::atan</definition>
        <argsstring>(float v)</argsstring>
        <name>atan</name>
        <qualifiedname>eu::atan</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="93" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="93" bodyend="96" declfile="libs/base/src/base/angle.h" declline="93" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8de0a9fb14b3fcf5466c96ba6a503c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::atan2</definition>
        <argsstring>(float y, float x)</argsstring>
        <name>atan2</name>
        <qualifiedname>eu::atan2</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="100" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="100" bodyend="103" declfile="libs/base/src/base/angle.h" declline="94" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1addb270c0f4a5cc2ddd647b52208e2192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::operator+</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="116" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="116" bodyend="121" declfile="libs/base/src/base/angle.h" declline="96" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa5ac4cace5f29e16ecaf5065f56a3b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::operator-</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="125" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="125" bodyend="130" declfile="libs/base/src/base/angle.h" declline="97" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a70234da8d6bce29f0ce528b1f1c04dad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::operator/</definition>
        <argsstring>(const An &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>eu::operator/</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="134" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="134" bodyend="139" declfile="libs/base/src/base/angle.h" declline="99" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae19fc15fd3b494668d1040e9125aa1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::operator*</definition>
        <argsstring>(const An &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="142" column="8" bodyfile="libs/base/src/base/angle.cc" bodystart="142" bodyend="147" declfile="libs/base/src/base/angle.h" declline="98" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a513f443e6cc11c48dd05de3e5dfb5ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::operator*</definition>
        <argsstring>(float rhs, const An &amp;lhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="149" column="8" bodyfile="libs/base/src/base/angle.cc" bodystart="149" bodyend="152" declfile="libs/base/src/base/angle.h" declline="100" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3deb3b36c867593fd0645ddbd299b9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const An &amp;a)</argsstring>
        <name>to_string</name>
        <qualifiedname>eu::to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="155" column="17" bodyfile="libs/base/src/base/angle.cc" bodystart="155" bodyend="156" declfile="libs/base/src/base/angle.h" declline="102" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a37aec4a04518d899030ef13b9bfdb231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>bool eu::operator&lt;</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>eu::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="159" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="160" bodyend="163" declfile="libs/base/src/base/angle.h" declline="104" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1adbbd7ab52e37fdc56cd66e0920a813e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>bool eu::operator&lt;=</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>eu::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="166" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="167" bodyend="170" declfile="libs/base/src/base/angle.h" declline="105" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa3e88f63b802a9db740a821f312e6556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>bool eu::operator&gt;</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>eu::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="174" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="174" bodyend="177" declfile="libs/base/src/base/angle.h" declline="106" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af8448b714bf16cc794b4a29bfac33e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>bool eu::operator&gt;=</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>eu::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="181" column="5" bodyfile="libs/base/src/base/angle.cc" bodystart="181" bodyend="184" declfile="libs/base/src/base/angle.h" declline="107" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a0bade92aadaac348c9d69c311012401c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::lerp_angle</definition>
        <argsstring>(const An &amp;from, float v, const An &amp;to)</argsstring>
        <name>lerp_angle</name>
        <qualifiedname>eu::lerp_angle</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.cc" line="187" column="8" bodyfile="libs/base/src/base/angle.cc" bodystart="187" bodyend="200" declfile="libs/base/src/base/angle.h" declline="109" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac63c715fd08b2adbad224c32eb3cb378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const AxisAngle &amp;aa)</argsstring>
        <name>to_string</name>
        <qualifiedname>eu::to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1AxisAngle" kindref="compound">AxisAngle</ref> &amp;</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/axisangle.cc" line="21" column="5" bodyfile="libs/base/src/base/axisangle.cc" bodystart="21" bodyend="24" declfile="libs/base/src/base/axisangle.h" declline="25" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aae2c0b1db5c34646f8a709810d212eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const m4 &amp;m)</argsstring>
        <name>to_string</name>
        <qualifiedname>eu::to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1m4" kindref="compound">m4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="453" column="17" bodyfile="libs/base/src/base/mat4.cc" bodystart="453" bodyend="456" declfile="libs/base/src/base/mat4.h" declline="102" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac6df9508643c5fd4c3492e047e9a932c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1m4" kindref="compound">m4</ref></type>
        <definition>m4 eu::operator+</definition>
        <argsstring>(const m4 &amp;lhs, const m4 &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1m4" kindref="compound">m4</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1m4" kindref="compound">m4</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="460" column="5" bodyfile="libs/base/src/base/mat4.cc" bodystart="460" bodyend="465" declfile="libs/base/src/base/mat4.h" declline="104" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af28a2e40d555474d81f7d62a6f02c726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1m4" kindref="compound">m4</ref></type>
        <definition>m4 eu::operator-</definition>
        <argsstring>(const m4 &amp;lhs, const m4 &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1m4" kindref="compound">m4</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1m4" kindref="compound">m4</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="469" column="5" bodyfile="libs/base/src/base/mat4.cc" bodystart="469" bodyend="474" declfile="libs/base/src/base/mat4.h" declline="105" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6c7411b88038f38cf17a8bf5ab6912f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::get_component_multiply_sum</definition>
        <argsstring>(const v4 &amp;lhs, const v4 &amp;rhs)</argsstring>
        <name>get_component_multiply_sum</name>
        <qualifiedname>eu::get_component_multiply_sum</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v4" kindref="compound">v4</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v4" kindref="compound">v4</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="477" column="5" bodyfile="libs/base/src/base/mat4.cc" bodystart="477" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad0d155e66eaba7b173f177f04434b446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1m4" kindref="compound">m4</ref></type>
        <definition>m4 eu::operator*</definition>
        <argsstring>(const m4 &amp;lhs, const m4 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1m4" kindref="compound">m4</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1m4" kindref="compound">m4</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="486" column="8" bodyfile="libs/base/src/base/mat4.cc" bodystart="486" bodyend="499" declfile="libs/base/src/base/mat4.h" declline="106" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a71c65bf3f1b8eec74b96ffb0ea0103fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v4" kindref="compound">v4</ref></type>
        <definition>v4 eu::operator*</definition>
        <argsstring>(const m4 &amp;lhs, const v4 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1m4" kindref="compound">m4</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v4" kindref="compound">v4</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.cc" line="502" column="8" bodyfile="libs/base/src/base/mat4.cc" bodystart="502" bodyend="510" declfile="libs/base/src/base/mat4.h" declline="107" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a84234ac42f340bb5b38c0a34f4cd0e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>bool eu::is_equal</definition>
        <argsstring>(int lhs, int rhs)</argsstring>
        <name>is_equal</name>
        <qualifiedname>eu::is_equal</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="12" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="12" bodyend="15" declfile="libs/base/src/base/numeric.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4cd8cf9bbadd516833a572bfd4abc3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>bool eu::is_zero</definition>
        <argsstring>(int r)</argsstring>
        <name>is_zero</name>
        <qualifiedname>eu::is_zero</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="19" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="19" bodyend="22" declfile="libs/base/src/base/numeric.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a18b5929af6c64c2b319d0f5709430afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::clamp_zero</definition>
        <argsstring>(float r)</argsstring>
        <name>clamp_zero</name>
        <qualifiedname>eu::clamp_zero</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="26" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="26" bodyend="30" declfile="libs/base/src/base/numeric.h" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac953ee0edbaff0e5063d4d697c66f627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::floor</definition>
        <argsstring>(float v)</argsstring>
        <name>floor</name>
        <qualifiedname>eu::floor</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="34" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="34" bodyend="37" declfile="libs/base/src/base/numeric.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a82a16bae768ee6881fb591fddd27c507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::ceil</definition>
        <argsstring>(float v)</argsstring>
        <name>ceil</name>
        <qualifiedname>eu::ceil</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="41" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="41" bodyend="44" declfile="libs/base/src/base/numeric.h" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af2fbc53ac0f3d3a135f913bf0e55abde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
        <definition>int eu::floor_to_int</definition>
        <argsstring>(float v)</argsstring>
        <name>floor_to_int</name>
        <qualifiedname>eu::floor_to_int</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="48" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="48" bodyend="51" declfile="libs/base/src/base/numeric.h" declline="44" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae3fafe9e7e4edf309c645464e089d0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
        <definition>int eu::ceil_to_int</definition>
        <argsstring>(float v)</argsstring>
        <name>ceil_to_int</name>
        <qualifiedname>eu::ceil_to_int</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="55" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="55" bodyend="58" declfile="libs/base/src/base/numeric.h" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8f52df7e071a1911e8ccdfe482a4558f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
        <definition>int eu::get_sign</definition>
        <argsstring>(float r)</argsstring>
        <name>get_sign</name>
        <qualifiedname>eu::get_sign</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Calculates the sign as a positive or a negative int. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if r is greater than 0, -1 if not. </para>
</simplesect>
<simplesect kind="see"><para>Abs() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="62" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="62" bodyend="66" declfile="libs/base/src/base/numeric.h" declline="55" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad04118a0cac718a871b8917afbd44450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
        <definition>int eu::get_sign</definition>
        <argsstring>(int r)</argsstring>
        <name>get_sign</name>
        <qualifiedname>eu::get_sign</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="70" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="70" bodyend="74" declfile="libs/base/src/base/numeric.h" declline="59" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1df61f8b3dbd8de93e41fb60b93db4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::get_sign</definition>
        <argsstring>(bool b)</argsstring>
        <name>get_sign</name>
        <qualifiedname>eu::get_sign</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns either 1 or -1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="78" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="78" bodyend="82" declfile="libs/base/src/base/numeric.h" declline="64" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3bd12ab44428ae8a36fd69bd74afef85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::lerp_float</definition>
        <argsstring>(float f, float scale, float t)</argsstring>
        <name>lerp_float</name>
        <qualifiedname>eu::lerp_float</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="86" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="86" bodyend="89" declfile="libs/base/src/base/numeric.h" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a692b7283c3a58ab27de56366b3fadbd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::square</definition>
        <argsstring>(float r)</argsstring>
        <name>square</name>
        <qualifiedname>eu::square</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="93" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="93" bodyend="96" declfile="libs/base/src/base/numeric.h" declline="71" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a066452fba287c9fcb6a0188ea8424760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::sqrt</definition>
        <argsstring>(float r)</argsstring>
        <name>sqrt</name>
        <qualifiedname>eu::sqrt</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="100" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="100" bodyend="104" declfile="libs/base/src/base/numeric.h" declline="74" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7d43cf27d1afca3da4e04b3b8451c9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::mod</definition>
        <argsstring>(float numer, float denumer)</argsstring>
        <name>mod</name>
        <qualifiedname>eu::mod</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>numer</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>denumer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="108" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="108" bodyend="111" declfile="libs/base/src/base/numeric.h" declline="108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a502ba547bcbe1c6035ed180e732cd80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>bool eu::is_within_inclusive_as_int</definition>
        <argsstring>(int min, int c, int max)</argsstring>
        <name>is_within_inclusive_as_int</name>
        <qualifiedname>eu::is_within_inclusive_as_int</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">int</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="115" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="115" bodyend="118" declfile="libs/base/src/base/numeric.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a7ef41a3ef0020cdf027febcf7cb38db3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::round</definition>
        <argsstring>(float num, float gran)</argsstring>
        <name>round</name>
        <qualifiedname>eu::round</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>num</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>gran</declname>
        </param>
        <briefdescription>
<para>Rounds a value to the nearest nice value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the granularity is 1 the function rounds to the closest integer, at .5 the closest half integer, at 2 even integers etc... <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>the number to round </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gran</parametername>
</parameternamelist>
<parameterdescription>
<para>the granularity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.cc" line="139" column="5" bodyfile="libs/base/src/base/numeric.cc" bodystart="139" bodyend="153" declfile="libs/base/src/base/numeric.h" declline="120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6124e8a8479a4359c8aec7feee2651de" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>constexpr float eu::abs</definition>
        <argsstring>(float r)</argsstring>
        <name>abs</name>
        <qualifiedname>eu::abs</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="7" column="21" bodyfile="libs/base/src/base/numeric.h" bodystart="7" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a63cd526bac84ee9b0d7550d6c73657d5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>constexpr bool eu::is_zero</definition>
        <argsstring>(float r)</argsstring>
        <name>is_zero</name>
        <qualifiedname>eu::is_zero</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="16" column="20" bodyfile="libs/base/src/base/numeric.h" bodystart="16" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8e2e7f88b7732924df89619f76286878" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>constexpr bool eu::is_equal</definition>
        <argsstring>(float lhs, float rhs)</argsstring>
        <name>is_equal</name>
        <qualifiedname>eu::is_equal</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="23" column="5" bodyfile="libs/base/src/base/numeric.h" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::get_default_if_close_to_zero</definition>
        <argsstring>(T value, T def, T epsilon)</argsstring>
        <name>get_default_if_close_to_zero</name>
        <qualifiedname>eu::get_default_if_close_to_zero</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T</type>
          <declname>def</declname>
        </param>
        <param>
          <type>T</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="127" column="5" bodyfile="libs/base/src/base/numeric.h" bodystart="127" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a5d5dc7f4ea7cac8493e9006180e9a657" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>constexpr bool eu::is_each_nth</definition>
        <argsstring>(I i, I each)</argsstring>
        <name>is_each_nth</name>
        <qualifiedname>eu::is_each_nth</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">I</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">I</ref></type>
          <declname>each</declname>
        </param>
        <briefdescription>
<para>returns true for a index each Nth loop. </para>
        </briefdescription>
        <detaileddescription>
<para>pass zero to always return false useful for example adding a newline each 10th or 15th line </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="137" column="5" bodyfile="libs/base/src/base/numeric.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a5cd76c94b44e55f7122a46bba3ae4d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref></type>
        <definition>Q eu::lerp_quatf</definition>
        <argsstring>(const Q &amp;f, const float scale, const Q &amp;t)</argsstring>
        <name>lerp_quatf</name>
        <qualifiedname>eu::lerp_quatf</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="204" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="204" bodyend="207" declfile="libs/base/src/base/quat.h" declline="72" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1e05b672b47b209b25bc12c58308fa05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref></type>
        <definition>Q eu::slerp_fast</definition>
        <argsstring>(const Q &amp;qa, const float t, const Q &amp;qb)</argsstring>
        <name>slerp_fast</name>
        <qualifiedname>eu::slerp_fast</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>qa</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>qb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="211" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="211" bodyend="244" declfile="libs/base/src/base/quat.h" declline="73" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae6089c53b1f851cdbefd186bba37f9d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref></type>
        <definition>Q eu::slerp_shortway</definition>
        <argsstring>(const Q &amp;from, const float scale, const Q &amp;to)</argsstring>
        <name>slerp_shortway</name>
        <qualifiedname>eu::slerp_shortway</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="248" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="248" bodyend="258" declfile="libs/base/src/base/quat.h" declline="74" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1af254c49a36023b5a0f648b1c79a4b123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const Q &amp;v)</argsstring>
        <name>to_string</name>
        <qualifiedname>eu::to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="346" column="17" bodyfile="libs/base/src/base/quat.cc" bodystart="346" bodyend="349" declfile="libs/base/src/base/quat.h" declline="78" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ad4b8d21db1b1a25c346296eec35b330b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::dot</definition>
        <argsstring>(const Q &amp;lhs, const Q &amp;rhs)</argsstring>
        <name>dot</name>
        <qualifiedname>eu::dot</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="353" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="353" bodyend="356" declfile="libs/base/src/base/quat.h" declline="76" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae99fc2a026a0a7ac61fbc6281d530996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref></type>
        <definition>Q eu::operator*</definition>
        <argsstring>(const Q &amp;lhs, const Q &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="359" column="7" bodyfile="libs/base/src/base/quat.cc" bodystart="359" bodyend="364" declfile="libs/base/src/base/quat.h" declline="80" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a74899d4681ffa6fdccd09f9588ba7661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref></type>
        <definition>Q eu::operator*</definition>
        <argsstring>(float scale, const Q &amp;q)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="367" column="7" bodyfile="libs/base/src/base/quat.cc" bodystart="367" bodyend="372" declfile="libs/base/src/base/quat.h" declline="81" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4dde67115df3f842c8371817f87587d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref></type>
        <definition>Q eu::operator*</definition>
        <argsstring>(const Q &amp;q, float scale)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="375" column="7" bodyfile="libs/base/src/base/quat.cc" bodystart="375" bodyend="380" declfile="libs/base/src/base/quat.h" declline="82" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a94c89d4216e30fc6ad3711eb540a25fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref></type>
        <definition>Q eu::operator+</definition>
        <argsstring>(const Q &amp;lhs, const Q &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="384" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="384" bodyend="389" declfile="libs/base/src/base/quat.h" declline="83" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ae807f257d9b667c1c45602b2d67ceafa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1Q" kindref="compound">Q</ref></type>
        <definition>Q eu::operator-</definition>
        <argsstring>(const Q &amp;lhs, const Q &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.cc" line="393" column="5" bodyfile="libs/base/src/base/quat.cc" bodystart="393" bodyend="398" declfile="libs/base/src/base/quat.h" declline="84" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1d52a91adaa565513eb90b8d2dce2df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::from_01f</definition>
        <argsstring>(float lower_bound, float upper_bound, float value)</argsstring>
        <name>from_01f</name>
        <qualifiedname>eu::from_01f</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>lower_bound</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>upper_bound</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.cc" line="6" column="5" bodyfile="libs/base/src/base/range.cc" bodystart="6" bodyend="9" declfile="libs/base/src/base/range.h" declline="49" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a71a5abeae01c3597f3e9d7371a7e9df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::from_01</definition>
        <argsstring>(const R&lt; float &gt; &amp;range, float value)</argsstring>
        <name>from_01</name>
        <qualifiedname>eu::from_01</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.cc" line="13" column="5" bodyfile="libs/base/src/base/range.cc" bodystart="13" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a53e78e428a56c4436a3a11a8c747cb4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref> &gt;</type>
        <definition>R&lt; T &gt; eu::make_range</definition>
        <argsstring>(T min, T max)</argsstring>
        <name>make_range</name>
        <qualifiedname>eu::make_range</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="35" column="7" bodyfile="libs/base/src/base/range.h" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a572ae747813ec1771667ebd29d4c8144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref> &gt;</type>
        <definition>R&lt; T &gt; eu::make_range</definition>
        <argsstring>(T max)</argsstring>
        <name>make_range</name>
        <qualifiedname>eu::make_range</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="41" column="7" bodyfile="libs/base/src/base/range.h" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aa18213902220185ad70feda7d212e55a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
        <definition>T eu::from_01</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, float value)</argsstring>
        <name>from_01</name>
        <qualifiedname>eu::from_01</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="52" column="7" bodyfile="libs/base/src/base/range.h" bodystart="52" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a71a5abeae01c3597f3e9d7371a7e9df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::from_01</definition>
        <argsstring>(const R&lt; float &gt; &amp;range, float value)</argsstring>
        <name>from_01</name>
        <qualifiedname>eu::from_01</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="70" column="11" bodyfile="libs/base/src/base/range.cc" bodystart="13" bodyend="21" declfile="libs/base/src/base/range.h" declline="70" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4b358bd01ddb038d5d8d1dc62920e0ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::to01</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, T value)</argsstring>
        <name>to01</name>
        <qualifiedname>eu::to01</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="73" column="11" bodyfile="libs/base/src/base/range.h" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a20dfd6271d0dde18b4cc12e2ddf8709f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
        <definition>T eu::get360_angular</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, float value)</argsstring>
        <name>get360_angular</name>
        <qualifiedname>eu::get360_angular</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="81" column="7" bodyfile="libs/base/src/base/range.h" bodystart="81" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a3081f17d05e200b8d7baddf4034c5c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
        <definition>T eu::remap_to</definition>
        <argsstring>(const R&lt; F &gt; &amp;from, const R&lt; T &gt; &amp;to, F value)</argsstring>
        <name>remap_to</name>
        <qualifiedname>eu::remap_to</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">F</ref> &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref> &gt; &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">F</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="90" column="7" bodyfile="libs/base/src/base/range.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2c34413b1d29ccceb8d31b6b275c14bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">bool</ref></type>
        <definition>bool eu::is_within</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, T value)</argsstring>
        <name>is_within</name>
        <qualifiedname>eu::is_within</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="97" column="10" bodyfile="libs/base/src/base/range.h" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a2bcfebef199f602f177fe3da4b940d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
        <definition>T eu::keep_within</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, T value)</argsstring>
        <name>keep_within</name>
        <qualifiedname>eu::keep_within</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="104" column="7" bodyfile="libs/base/src/base/range.h" bodystart="104" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a9624527e97e0cec9990cf1500a14d57e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
        <definition>T eu::wrap</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, T value)</argsstring>
        <name>wrap</name>
        <qualifiedname>eu::wrap</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1R" kindref="compound">R</ref>&lt; <ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref> &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">T</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="119" column="7" bodyfile="libs/base/src/base/range.h" bodystart="119" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4800a7b85e537456b232d20a822b9cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref></type>
        <definition>v2 eu::operator+</definition>
        <argsstring>(const v2 &amp;lhs, const v2 &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Math operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="177" column="8" bodyfile="libs/base/src/base/vec2.cc" bodystart="177" bodyend="182" declfile="libs/base/src/base/vec2.h" declline="91" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a8b04e3baf0731fe2189eedcc198802ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref></type>
        <definition>v2 eu::operator-</definition>
        <argsstring>(const v2 &amp;lhs, const v2 &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="184" column="8" bodyfile="libs/base/src/base/vec2.cc" bodystart="184" bodyend="189" declfile="libs/base/src/base/vec2.h" declline="92" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1acb026ebe78d1da4dc0644d1910db7637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref></type>
        <definition>v2 eu::operator*</definition>
        <argsstring>(const v2 &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="191" column="8" bodyfile="libs/base/src/base/vec2.cc" bodystart="191" bodyend="196" declfile="libs/base/src/base/vec2.h" declline="93" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1e39be8c6248cb595c1352d7461d00e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref></type>
        <definition>v2 eu::operator*</definition>
        <argsstring>(float lhs, const v2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="198" column="8" bodyfile="libs/base/src/base/vec2.cc" bodystart="198" bodyend="203" declfile="libs/base/src/base/vec2.h" declline="94" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a57f4cd9af77a018eab90cbae9f5a1695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref></type>
        <definition>v2 eu::operator*</definition>
        <argsstring>(const n2 &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1n2" kindref="compound">n2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="205" column="8" bodyfile="libs/base/src/base/vec2.cc" bodystart="205" bodyend="210" declfile="libs/base/src/base/vec2.h" declline="95" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1aadf6165530c925eecfb176b285482e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref></type>
        <definition>v2 eu::operator*</definition>
        <argsstring>(float lhs, const n2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1n2" kindref="compound">n2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="212" column="8" bodyfile="libs/base/src/base/vec2.cc" bodystart="212" bodyend="217" declfile="libs/base/src/base/vec2.h" declline="96" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a15097e3a98c6a6729aaacc53539dd5a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref></type>
        <definition>v2 eu::operator/</definition>
        <argsstring>(const v2 &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>eu::operator/</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="220" column="5" bodyfile="libs/base/src/base/vec2.cc" bodystart="220" bodyend="225" declfile="libs/base/src/base/vec2.h" declline="97" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1acb6acea8076942dd1562a76886089c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
        <definition>float eu::dot</definition>
        <argsstring>(const v2 &amp;lhs, const v2 &amp;rhs)</argsstring>
        <name>dot</name>
        <qualifiedname>eu::dot</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="229" column="5" bodyfile="libs/base/src/base/vec2.cc" bodystart="229" bodyend="232" declfile="libs/base/src/base/vec2.h" declline="103" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1acabbf07d3508dd327a89b476b39f8eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v2" kindref="compound">v2</ref></type>
        <definition>v2 eu::lerp_vec2f</definition>
        <argsstring>(const v2 &amp;from, float v, const v2 &amp;to)</argsstring>
        <name>lerp_vec2f</name>
        <qualifiedname>eu::lerp_vec2f</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="235" column="8" bodyfile="libs/base/src/base/vec2.cc" bodystart="235" bodyend="242" declfile="libs/base/src/base/vec2.h" declline="108" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a758cfd5ac0ed2310497d87d9e798efd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const v2 &amp;v)</argsstring>
        <name>to_string</name>
        <qualifiedname>eu::to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v2" kindref="compound">v2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Printing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="245" column="17" bodyfile="libs/base/src/base/vec2.cc" bodystart="245" bodyend="246" declfile="libs/base/src/base/vec2.h" declline="116" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a9ac96a2a0883953b4c94565181b79d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const n2 &amp;v)</argsstring>
        <name>to_string</name>
        <qualifiedname>eu::to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1n2" kindref="compound">n2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.cc" line="248" column="17" bodyfile="libs/base/src/base/vec2.cc" bodystart="248" bodyend="249" declfile="libs/base/src/base/vec2.h" declline="117" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a5471675c0c6108ef9e845a5962e4ac0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1n2" kindref="compound">n2</ref></type>
        <definition>n2 eu::create_random_unit</definition>
        <argsstring>(Random *random)</argsstring>
        <name>create_random_unit</name>
        <qualifiedname>eu::create_random_unit</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="120" column="8" declfile="libs/base/src/base/vec2.h" declline="120" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a810d947671583fc421a8b6561708583e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>v3 eu::operator+</definition>
        <argsstring>(const v3 &amp;lhs, const v3 &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Math operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="131" column="5" bodyfile="libs/base/src/base/vec3.cc" bodystart="131" bodyend="136" declfile="libs/base/src/base/vec3.h" declline="111" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a806e92c1f7113df43c3b6bb128684ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>v3 eu::operator-</definition>
        <argsstring>(const v3 &amp;lhs, const v3 &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="139" column="5" bodyfile="libs/base/src/base/vec3.cc" bodystart="139" bodyend="144" declfile="libs/base/src/base/vec3.h" declline="112" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1d1620b0b7a6b4dc28c476ca51eeed6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>v3 eu::operator*</definition>
        <argsstring>(float lhs, const v3 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="146" column="8" bodyfile="libs/base/src/base/vec3.cc" bodystart="146" bodyend="151" declfile="libs/base/src/base/vec3.h" declline="114" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a45487cdd319ddcfabd12e90b47b9d210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>v3 eu::operator*</definition>
        <argsstring>(const v3 &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="153" column="8" bodyfile="libs/base/src/base/vec3.cc" bodystart="153" bodyend="158" declfile="libs/base/src/base/vec3.h" declline="115" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a52398dba8d527f1516636902c49730bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>v3 eu::operator/</definition>
        <argsstring>(const v3 &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>eu::operator/</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="161" column="5" bodyfile="libs/base/src/base/vec3.cc" bodystart="161" bodyend="166" declfile="libs/base/src/base/vec3.h" declline="117" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6287a63682804e3c425e10e34261d129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>v3 eu::operator/</definition>
        <argsstring>(float lhs, const v3 &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>eu::operator/</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="169" column="5" bodyfile="libs/base/src/base/vec3.cc" bodystart="169" bodyend="173" declfile="libs/base/src/base/vec3.h" declline="118" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac91ed2ee0f9cfe6e689fc0dc4cdd29f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>v3 eu::lerp_v3</definition>
        <argsstring>(const v3 &amp;f, float v, const v3 &amp;t)</argsstring>
        <name>lerp_v3</name>
        <qualifiedname>eu::lerp_v3</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">float</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Transformations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="178" column="8" bodyfile="libs/base/src/base/vec3.cc" bodystart="178" bodyend="184" declfile="libs/base/src/base/vec3.h" declline="123" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a00d3546a73323cf6ac9c2d40b1e5a13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const v3 &amp;v)</argsstring>
        <name>to_string</name>
        <qualifiedname>eu::to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Transformations. </para>
        </briefdescription>
        <detaileddescription>
<para>Printing.</para>
<para>Printing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="209" column="17" bodyfile="libs/base/src/base/vec3.cc" bodystart="209" bodyend="209" declfile="libs/base/src/base/vec3.h" declline="128" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a347c0ebf7a591b691d8f4fe2474f0124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const n3 &amp;v)</argsstring>
        <name>to_string</name>
        <qualifiedname>eu::to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1n3" kindref="compound">n3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.cc" line="210" column="17" bodyfile="libs/base/src/base/vec3.cc" bodystart="210" bodyend="210" declfile="libs/base/src/base/vec3.h" declline="129" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a20517b7416d5479476f6372742c5f9b9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>constexpr v3 eu::min</definition>
        <argsstring>(const v3 &amp;lhs, const v3 &amp;rhs)</argsstring>
        <name>min</name>
        <qualifiedname>eu::min</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="134" column="5" bodyfile="libs/base/src/base/vec3.h" bodystart="134" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6acd10ee86510432805a6f2e2cefa8e5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">constexpr</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref></type>
        <definition>constexpr v3 eu::max</definition>
        <argsstring>(const v3 &amp;lhs, const v3 &amp;rhs)</argsstring>
        <name>max</name>
        <qualifiedname>eu::max</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v3" kindref="compound">v3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="142" column="5" bodyfile="libs/base/src/base/vec3.h" bodystart="142" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a4abd1857f70cbf315e97fd23cfdb4d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::to_string</definition>
        <argsstring>(const v4 &amp;v)</argsstring>
        <name>to_string</name>
        <qualifiedname>eu::to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceeu_1aa74119d780a49aabca833a465dd27d7a" kindref="member">const</ref> <ref refid="structeu_1_1v4" kindref="compound">v4</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec4.cc" line="44" column="17" bodyfile="libs/base/src/base/vec4.cc" bodystart="44" bodyend="47" declfile="libs/base/src/base/vec4.h" declline="37" declcolumn="17"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/assert/src/assert/assert.h" line="89" column="1"/>
  </compounddef>
</doxygen>

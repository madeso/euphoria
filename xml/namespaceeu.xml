<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceeu" kind="namespace" language="C++">
    <compoundname>eu</compoundname>
    <innerclass refid="structeu_1_1AA" prot="public">eu::AA</innerclass>
    <innerclass refid="structeu_1_1An" prot="public">eu::An</innerclass>
    <innerclass refid="structeu_1_1Guid" prot="public">eu::Guid</innerclass>
    <innerclass refid="structeu_1_1Hsh" prot="public">eu::Hsh</innerclass>
    <innerclass refid="structeu_1_1HshO" prot="public">eu::HshO</innerclass>
    <innerclass refid="structeu_1_1m4" prot="public">eu::m4</innerclass>
    <innerclass refid="structeu_1_1n2" prot="public">eu::n2</innerclass>
    <innerclass refid="structeu_1_1n3" prot="public">eu::n3</innerclass>
    <innerclass refid="structeu_1_1Q" prot="public">eu::Q</innerclass>
    <innerclass refid="structeu_1_1R" prot="public">eu::R</innerclass>
    <innerclass refid="structeu_1_1v2" prot="public">eu::v2</innerclass>
    <innerclass refid="structeu_1_1v3" prot="public">eu::v3</innerclass>
    <innerclass refid="structeu_1_1v4" prot="public">eu::v4</innerclass>
    <innerclass refid="structeu_1_1Ypr" prot="public">eu::Ypr</innerclass>
    <innernamespace refid="namespaceeu_1_1assertlib">eu::assertlib</innernamespace>
    <innernamespace refid="namespaceeu_1_1color">eu::color</innernamespace>
    <innernamespace refid="namespaceeu_1_1convert">eu::convert</innernamespace>
    <innernamespace refid="namespaceeu_1_1kk">eu::kk</innernamespace>
    <innernamespace refid="namespaceeu_1_1log">eu::log</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceeu_1af51071e3961aca6266852501c7229467" prot="public" static="no">
        <type>std::int8_t</type>
        <definition>using eu::i8 = typedef std::int8_t</definition>
        <argsstring></argsstring>
        <name>i8</name>
        <qualifiedname>eu::i8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="7" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1afecf894b7eeb1b4f81f1cb5a8a0067c4" prot="public" static="no">
        <type>std::int16_t</type>
        <definition>using eu::i16 = typedef std::int16_t</definition>
        <argsstring></argsstring>
        <name>i16</name>
        <qualifiedname>eu::i16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="8" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a15538981e8dad713d329dfddba4b8ae8" prot="public" static="no">
        <type>std::int32_t</type>
        <definition>using eu::i32 = typedef std::int32_t</definition>
        <argsstring></argsstring>
        <name>i32</name>
        <qualifiedname>eu::i32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="9" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1ac8b00c8f6edc5aa17943b7d8574bdeb4" prot="public" static="no">
        <type>std::int64_t</type>
        <definition>using eu::i64 = typedef std::int64_t</definition>
        <argsstring></argsstring>
        <name>i64</name>
        <qualifiedname>eu::i64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="10" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1ad34c2d1a742c5f58543366875dc21649" prot="public" static="no">
        <type>std::uint8_t</type>
        <definition>using eu::u8 = typedef std::uint8_t</definition>
        <argsstring></argsstring>
        <name>u8</name>
        <qualifiedname>eu::u8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="12" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a52c8bd230b49dafc68274e81ecfd9ee0" prot="public" static="no">
        <type>std::uint16_t</type>
        <definition>using eu::u16 = typedef std::uint16_t</definition>
        <argsstring></argsstring>
        <name>u16</name>
        <qualifiedname>eu::u16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="13" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1a19661e9cf09bb33310545fe2b4c4f90c" prot="public" static="no">
        <type>std::uint32_t</type>
        <definition>using eu::u32 = typedef std::uint32_t</definition>
        <argsstring></argsstring>
        <name>u32</name>
        <qualifiedname>eu::u32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="14" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceeu_1ac0b6d77da47da3ce6bb55d66abc897f5" prot="public" static="no">
        <type>std::uint64_t</type>
        <definition>using eu::u64 = typedef std::uint64_t</definition>
        <argsstring></argsstring>
        <name>u64</name>
        <qualifiedname>eu::u64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/ints.h" line="15" column="5" bodyfile="libs/base/src/base/ints.h" bodystart="15" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <member refid="group__math_1gaad753d4f4d3024b2f9b0366738751511" kind="variable"><name>one_turn</name></member>
      <member refid="group__math_1ga03d368230871c29cd8d4464edd37081d" kind="variable"><name>half_turn</name></member>
      <member refid="group__math_1ga795093272e2f8a2748665fd8a37e5d91" kind="variable"><name>quarter_turn</name></member>
      <member refid="group__math_1ga22905decd86a4bf45c79c109119f2b6f" kind="variable"><name>no_rotation</name></member>
      <memberdef kind="variable" id="namespaceeu_1aac60b8ebeed751e1d2dcb1594eb0d28f" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="structeu_1_1R" kindref="compound">constexpr</ref> <ref refid="structeu_1_1Guid" kindref="compound">Guid</ref></type>
        <definition>constexpr Guid eu::nil_guid</definition>
        <argsstring></argsstring>
        <name>nil_guid</name>
        <qualifiedname>eu::nil_guid</qualifiedname>
        <initializer>= <ref refid="structeu_1_1Guid" kindref="compound">Guid</ref>
    {
        std::array&lt;<ref refid="namespaceeu_1ad34c2d1a742c5f58543366875dc21649" kindref="member">u8</ref>, 16&gt;
        {
            0, 0, 0, 0,
            0, 0,
            0, 0,
            0, 0,
            0, 0, 0, 0, 0, 0
        }
    }</initializer>
        <briefdescription>
<para>A nil guid, all bits are set to 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/guid.h" line="69" column="20" bodyfile="libs/base/src/base/guid.h" bodystart="69" bodyend="79"/>
      </memberdef>
      <member refid="group__math_1ga5957f0b19a66d6e1123f22d681e726e0" kind="variable"><name>m4_identity</name></member>
      <member refid="group__math_1ga25eb222abfe7c9e7f34d6f19ed40c1a0" kind="variable"><name>pi</name></member>
      <member refid="group__math_1ga074a5f400069f641ce3857da18d65d93" kind="variable"><name>q_identity</name></member>
      <member refid="group__math_1ga1762260135f2b7b538f1b8be43146481" kind="variable"><name>r01</name></member>
      <member refid="group__math_1gab44633bc6b6ae7cbf3e473fe917d1e70" kind="variable"><name>r11</name></member>
      <member refid="group__math_1ga5fac55b859c3ed3d22eac1245737524f" kind="variable"><name>zero2f</name></member>
      <member refid="group__math_1gaf1a49fc9a55b790e9d31a82a0aa3c6db" kind="variable"><name>zero3f</name></member>
    </sectiondef>
    <sectiondef kind="func">
      <member refid="group__math_1ga3cbb6d297bb58186cf62a6faccaecc9f" kind="function"><name>sin</name></member>
      <member refid="group__math_1gae6beaf44514cc6ed0e0868cde5ff1ab4" kind="function"><name>cos</name></member>
      <member refid="group__math_1ga516772ab56ddbef8fdfb9b155219fe89" kind="function"><name>tan</name></member>
      <member refid="group__math_1gacc962f319f4b97d3a3b72cf4ecd0fd17" kind="function"><name>asin</name></member>
      <member refid="group__math_1ga541d45e26c450d76a511c7e3c753b0ac" kind="function"><name>acos</name></member>
      <member refid="group__math_1gae46ea0693c249adaf3485667bce0d9a4" kind="function"><name>atan</name></member>
      <member refid="group__math_1ga8de0a9fb14b3fcf5466c96ba6a503c92" kind="function"><name>atan2</name></member>
      <member refid="group__math_1gaddb270c0f4a5cc2ddd647b52208e2192" kind="function"><name>operator+</name></member>
      <member refid="group__math_1gaa5ac4cace5f29e16ecaf5065f56a3b5e" kind="function"><name>operator-</name></member>
      <member refid="group__math_1gae19fc15fd3b494668d1040e9125aa1de" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga70234da8d6bce29f0ce528b1f1c04dad" kind="function"><name>operator/</name></member>
      <member refid="group__math_1ga513f443e6cc11c48dd05de3e5dfb5ab8" kind="function"><name>operator*</name></member>
      <member refid="group__math_1gafa7f170a2c4415e5c9f4d517b138a489" kind="function"><name>string_from</name></member>
      <member refid="group__math_1ga37aec4a04518d899030ef13b9bfdb231" kind="function"><name>operator&lt;</name></member>
      <member refid="group__math_1gadbbd7ab52e37fdc56cd66e0920a813e2" kind="function"><name>operator&lt;=</name></member>
      <member refid="group__math_1gaa3e88f63b802a9db740a821f312e6556" kind="function"><name>operator&gt;</name></member>
      <member refid="group__math_1gaf8448b714bf16cc794b4a29bfac33e6a" kind="function"><name>operator&gt;=</name></member>
      <member refid="group__math_1ga0bade92aadaac348c9d69c311012401c" kind="function"><name>lerp_angle</name></member>
      <member refid="group__math_1ga1a4ab59cbac3b18a87a0d490dff83143" kind="function"><name>rha</name></member>
      <member refid="group__math_1gaa507848ead7e3929ac34a5631d051638" kind="function"><name>string_from</name></member>
      <member refid="group__math_1gad902ccc075018be926b6d34aa5eb7d92" kind="function"><name>string_from</name></member>
      <memberdef kind="function" id="namespaceeu_1ae1e3eca9a4e909a32f2c16281b5ebfbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::operator==</definition>
        <argsstring>(const Guid &amp;lhs, const Guid &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>eu::operator==</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1Guid" kindref="compound">Guid</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1Guid" kindref="compound">Guid</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/guid.h" line="59" column="10" declfile="libs/base/src/base/guid.h" declline="59" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a27cc2976c1bd562b82eebdc857c05f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1R" kindref="compound">bool</ref></type>
        <definition>bool eu::operator!=</definition>
        <argsstring>(const Guid &amp;lhs, const Guid &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>eu::operator!=</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1Guid" kindref="compound">Guid</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1Guid" kindref="compound">Guid</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/guid.h" line="60" column="10" declfile="libs/base/src/base/guid.h" declline="60" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1ac922ddcef9eb3a0f85486c218a8cab69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeu_1_1Guid" kindref="compound">Guid</ref> &gt;</type>
        <definition>std::optional&lt; Guid &gt; eu::guid_from</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>guid_from</name>
        <qualifiedname>eu::guid_from</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parse a guid from a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/guid.h" line="63" column="20" declfile="libs/base/src/base/guid.h" declline="63" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a6200e130947527c643d6a88a406fd9c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const Guid &amp;g)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1Guid" kindref="compound">Guid</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Convert a guid to a string representation, prefer fmt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/guid.h" line="66" column="18" declfile="libs/base/src/base/guid.h" declline="66" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a1314a884697b4470c9c443ec00890b63" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1R" kindref="compound">constexpr</ref> <ref refid="namespaceeu_1ac0b6d77da47da3ce6bb55d66abc897f5" kindref="member">u64</ref></type>
        <definition>constexpr u64 eu::hash64</definition>
        <argsstring>(const std::string_view str, u64 hash=0xcbf29ce484222325)</argsstring>
        <name>hash64</name>
        <qualifiedname>eu::hash64</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> std::string_view</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespaceeu_1ac0b6d77da47da3ce6bb55d66abc897f5" kindref="member">u64</ref></type>
          <declname>hash</declname>
          <defval>0xcbf29ce484222325</defval>
        </param>
        <briefdescription>
<para>fnv-1a hash. </para>
        </briefdescription>
        <detaileddescription>
<para><ulink url="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/hash.string.h" line="18" column="15" bodyfile="libs/base/src/base/hash.string.h" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1acf596ba635e414898f3c5c60260f2faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eu::OP</definition>
        <argsstring>(==) OP(!</argsstring>
        <name>OP</name>
        <qualifiedname>eu::OP</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/hash.string.h" line="98" column="5" declfile="libs/base/src/base/hash.string.h" declline="98" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1a34d2ec62d422fd2938f602143108b9aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const HshO &amp;h)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1HshO" kindref="compound">HshO</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/hash.string.h" line="103" column="13" declfile="libs/base/src/base/hash.string.h" declline="103" declcolumn="13"/>
      </memberdef>
      <member refid="group__math_1ga66e1820c967a20b5f47444560e472077" kind="function"><name>string_from</name></member>
      <member refid="group__math_1gac6df9508643c5fd4c3492e047e9a932c" kind="function"><name>operator+</name></member>
      <member refid="group__math_1gaf28a2e40d555474d81f7d62a6f02c726" kind="function"><name>operator-</name></member>
      <member refid="group__math_1gad0d155e66eaba7b173f177f04434b446" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga71c65bf3f1b8eec74b96ffb0ea0103fa" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga6124e8a8479a4359c8aec7feee2651de" kind="function"><name>abs</name></member>
      <member refid="group__math_1ga63cd526bac84ee9b0d7550d6c73657d5" kind="function"><name>is_zero</name></member>
      <member refid="group__math_1ga8e2e7f88b7732924df89619f76286878" kind="function"><name>is_equal</name></member>
      <member refid="group__math_1ga18b5929af6c64c2b319d0f5709430afc" kind="function"><name>clamp_zero</name></member>
      <member refid="group__math_1gac953ee0edbaff0e5063d4d697c66f627" kind="function"><name>floor</name></member>
      <member refid="group__math_1ga82a16bae768ee6881fb591fddd27c507" kind="function"><name>ceil</name></member>
      <member refid="group__math_1gaf2fbc53ac0f3d3a135f913bf0e55abde" kind="function"><name>floor_to_int</name></member>
      <member refid="group__math_1gae3fafe9e7e4edf309c645464e089d0b0" kind="function"><name>ceil_to_int</name></member>
      <member refid="group__math_1ga8f52df7e071a1911e8ccdfe482a4558f" kind="function"><name>get_sign</name></member>
      <member refid="group__math_1ga1df61f8b3dbd8de93e41fb60b93db4a4" kind="function"><name>get_sign</name></member>
      <member refid="group__math_1ga3bd12ab44428ae8a36fd69bd74afef85" kind="function"><name>lerp_float</name></member>
      <member refid="group__math_1ga692b7283c3a58ab27de56366b3fadbd4" kind="function"><name>square</name></member>
      <member refid="group__math_1ga066452fba287c9fcb6a0188ea8424760" kind="function"><name>sqrt</name></member>
      <member refid="group__math_1gaa4f3a1d68eda3b72dc542eca112fc1e3" kind="function"><name>min</name></member>
      <member refid="group__math_1gafdb18ee646a157c1e7d64082029202bb" kind="function"><name>max</name></member>
      <member refid="group__math_1ga7d43cf27d1afca3da4e04b3b8451c9f1" kind="function"><name>mod</name></member>
      <member refid="group__math_1ga7ef41a3ef0020cdf027febcf7cb38db3" kind="function"><name>round</name></member>
      <member refid="group__math_1gaa74119d780a49aabca833a465dd27d7a" kind="function"><name>get_default_if_close_to_zero</name></member>
      <member refid="group__math_1ga5d5dc7f4ea7cac8493e9006180e9a657" kind="function"><name>is_each_nth</name></member>
      <member refid="group__math_1gad4b8d21db1b1a25c346296eec35b330b" kind="function"><name>dot</name></member>
      <member refid="group__math_1ga6214f288996499f35cf95e039b52e1ee" kind="function"><name>string_from</name></member>
      <member refid="group__math_1gae99fc2a026a0a7ac61fbc6281d530996" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga74899d4681ffa6fdccd09f9588ba7661" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga4dde67115df3f842c8371817f87587d4" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga53e78e428a56c4436a3a11a8c747cb4c" kind="function"><name>make_range</name></member>
      <member refid="group__math_1ga572ae747813ec1771667ebd29d4c8144" kind="function"><name>make_range</name></member>
      <member refid="group__math_1ga1d52a91adaa565513eb90b8d2dce2df5" kind="function"><name>from_01f</name></member>
      <member refid="group__math_1gaa18213902220185ad70feda7d212e55a" kind="function"><name>from_01</name></member>
      <member refid="group__math_1ga71a5abeae01c3597f3e9d7371a7e9df3" kind="function"><name>from_01</name></member>
      <member refid="group__math_1ga4b358bd01ddb038d5d8d1dc62920e0ee" kind="function"><name>to01</name></member>
      <member refid="group__math_1ga20dfd6271d0dde18b4cc12e2ddf8709f" kind="function"><name>get360_angular</name></member>
      <member refid="group__math_1ga3081f17d05e200b8d7baddf4034c5c8f" kind="function"><name>remap_to</name></member>
      <member refid="group__math_1ga2c34413b1d29ccceb8d31b6b275c14bd" kind="function"><name>is_within</name></member>
      <member refid="group__math_1ga2bcfebef199f602f177fe3da4b940d89" kind="function"><name>keep_within</name></member>
      <member refid="group__math_1ga9624527e97e0cec9990cf1500a14d57e" kind="function"><name>wrap</name></member>
      <member refid="group__math_1ga4800a7b85e537456b232d20a822b9cf6" kind="function"><name>operator+</name></member>
      <member refid="group__math_1ga8b04e3baf0731fe2189eedcc198802ed" kind="function"><name>operator-</name></member>
      <member refid="group__math_1gacb026ebe78d1da4dc0644d1910db7637" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga1e39be8c6248cb595c1352d7461d00e4" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga57f4cd9af77a018eab90cbae9f5a1695" kind="function"><name>operator*</name></member>
      <member refid="group__math_1gaadf6165530c925eecfb176b285482e1b" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga15097e3a98c6a6729aaacc53539dd5a8" kind="function"><name>operator/</name></member>
      <member refid="group__math_1gacb6acea8076942dd1562a76886089c8e" kind="function"><name>dot</name></member>
      <member refid="group__math_1gacabbf07d3508dd327a89b476b39f8eac" kind="function"><name>lerp_vec2f</name></member>
      <member refid="group__math_1gad48308b54abb481dece4ab464048202d" kind="function"><name>string_from</name></member>
      <member refid="group__math_1ga92a0e2f8c9ecc8ceaee41a90680eba8c" kind="function"><name>string_from</name></member>
      <member refid="group__math_1ga810d947671583fc421a8b6561708583e" kind="function"><name>operator+</name></member>
      <member refid="group__math_1ga806e92c1f7113df43c3b6bb128684ce1" kind="function"><name>operator-</name></member>
      <member refid="group__math_1ga1d1620b0b7a6b4dc28c476ca51eeed6a" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga45487cdd319ddcfabd12e90b47b9d210" kind="function"><name>operator*</name></member>
      <member refid="group__math_1ga52398dba8d527f1516636902c49730bf" kind="function"><name>operator/</name></member>
      <member refid="group__math_1ga6287a63682804e3c425e10e34261d129" kind="function"><name>operator/</name></member>
      <member refid="group__math_1gac91ed2ee0f9cfe6e689fc0dc4cdd29f0" kind="function"><name>lerp_v3</name></member>
      <member refid="group__math_1ga0720620adf5255e9d5928ac94de86d5d" kind="function"><name>string_from</name></member>
      <member refid="group__math_1gaa1dd49dd72a82624ced10255790833b8" kind="function"><name>string_from</name></member>
      <member refid="group__math_1ga20517b7416d5479476f6372742c5f9b9" kind="function"><name>min</name></member>
      <member refid="group__math_1ga6acd10ee86510432805a6f2e2cefa8e5" kind="function"><name>max</name></member>
      <member refid="group__math_1ga865e0eb4a624211381ce34daf5aad69d" kind="function"><name>string_from</name></member>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/assert/src/assert/assert.h" line="108" column="1"/>
  </compounddef>
</doxygen>

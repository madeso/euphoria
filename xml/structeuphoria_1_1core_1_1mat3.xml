<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structeuphoria_1_1core_1_1mat3" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::mat3</compoundname>
    <includes refid="mat3_8h" local="no">mat3.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1mat3_1aafe7b85e2d8abdf30865d7402f1535c5" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T euphoria::core::mat3&lt; T &gt;::data[9]</definition>
        <argsstring>[9]</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="15" column="11" bodyfile="libs/core/src/core/mat3.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1ab1432d5c4a1a1aa938f0616eb9267d07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::mat3&lt; T &gt;::mat3</definition>
        <argsstring>()=default</argsstring>
        <name>mat3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="17" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a3064c48b23be572f207f22973cea94fb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::mat3&lt; T &gt;::mat3</definition>
        <argsstring>(T t00, T t01, T t02, T t10, T t11, T t12, T t20, T t21, T t22)</argsstring>
        <name>mat3</name>
        <param>
          <type>T</type>
          <declname>t00</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t01</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t02</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t10</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t11</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t12</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t20</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t21</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t22</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="19" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="20" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a5e1cd3c4bc626de4e1878d8e6b3fb6f3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::mat3&lt; T &gt;::mat3</definition>
        <argsstring>(const mat2&lt; T &gt; &amp;mat)</argsstring>
        <name>mat3</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1mat2" kindref="compound">mat2</ref>&lt; T &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="36" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1ac94d3ea4e3eb25ab7fe276f6a95fb3b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vec3" kindref="compound">vec3</ref>&lt; T &gt;</type>
        <definition>vec3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::get_major</definition>
        <argsstring>() const</argsstring>
        <name>get_major</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="208" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1abfa79dfef3d5d0f6d925a8b3027b7fab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vec3" kindref="compound">vec3</ref>&lt; T &gt;</type>
        <definition>vec3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::get_axis</definition>
        <argsstring>(int col) const</argsstring>
        <name>get_axis</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="215" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a7a42ba6446fd940270be307134e6fc7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vec3" kindref="compound">vec3</ref>&lt; T &gt;</type>
        <definition>vec3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::get_x_axis</definition>
        <argsstring>() const</argsstring>
        <name>get_x_axis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="221" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a121a70408c0c9fa5ae95425959333be2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vec3" kindref="compound">vec3</ref>&lt; T &gt;</type>
        <definition>vec3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::get_y_axis</definition>
        <argsstring>() const</argsstring>
        <name>get_y_axis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="227" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a53461c4957443557cb09fe10687a0a34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vec3" kindref="compound">vec3</ref>&lt; T &gt;</type>
        <definition>vec3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::get_z_axis</definition>
        <argsstring>() const</argsstring>
        <name>get_z_axis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="233" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a3227d2a5382d17dabddc55abf9f9079a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::get_transposed</definition>
        <argsstring>() const</argsstring>
        <name>get_transposed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="239" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="239" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1aa06af8b341223f4e8945698d54e88258" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::mat3&lt; T &gt;::operator+=</definition>
        <argsstring>(const mat3&lt; T &gt; rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="251" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="251" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a5f83474d024842322502335ea2ef147f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::mat3&lt; T &gt;::operator-=</definition>
        <argsstring>(const mat3&lt; T &gt; rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="261" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="261" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a0ae1266d0fd9e41d403eab20e6693904" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::rotate</definition>
        <argsstring>(const AxisAngle &amp;aa) const</argsstring>
        <name>rotate</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1AxisAngle" kindref="compound">AxisAngle</ref> &amp;</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="271" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a0e2c2f7947293625ab05a1a90515deec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::scale</definition>
        <argsstring>(const Scale3&lt; T &gt; &amp;scale) const</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Scale3" kindref="compound">Scale3</ref>&lt; T &gt; &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="277" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1ab892e5d6936f3be305061de5661bc47d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* euphoria::core::mat3&lt; T &gt;::get_data_ptr</definition>
        <argsstring>() const</argsstring>
        <name>get_data_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="283" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1af54dc7b369f1e1db2228bdaa02162131" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* euphoria::core::mat3&lt; T &gt;::get_data_ptr</definition>
        <argsstring>()</argsstring>
        <name>get_data_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="289" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a05571a9335c0bf4d3b1b0ff583324c1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; euphoria::core::mat3&lt; T &gt;::operator()</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="296" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a27789f33b7ee205e483a6c6546f81fb3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T euphoria::core::mat3&lt; T &gt;::operator()</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="302" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1af3aded0e98f9160767c535d452ea19e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T euphoria::core::mat3&lt; T &gt;::get</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="308" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1aabe25882999ea02480dae9162f066ae3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vec3" kindref="compound">vec3</ref>&lt; T &gt;</type>
        <definition>vec3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::get_column</definition>
        <argsstring>(int c) const</argsstring>
        <name>get_column</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="314" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1af854b73af913278188baee5f2e310fc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vec3" kindref="compound">vec3</ref>&lt; T &gt;</type>
        <definition>vec3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::get_row</definition>
        <argsstring>(int r) const</argsstring>
        <name>get_row</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="320" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="320" bodyend="323"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1aeb11ecfac0f706574359ab646400b9b3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_col_major</definition>
        <argsstring>(T t00, T t01, T t02, T t10, T t11, T t12, T t20, T t21, T t22)</argsstring>
        <name>from_col_major</name>
        <param>
          <type>T</type>
          <declname>t00</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t01</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t02</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t10</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t11</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t12</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t20</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t21</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t22</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="49" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="50" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a3b43de57ec842c4ae4b0f29e74f4cbf8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_row_major</definition>
        <argsstring>(T t00, T t10, T t20, T t01, T t11, T t21, T t02, T t12, T t22)</argsstring>
        <name>from_row_major</name>
        <param>
          <type>T</type>
          <declname>t00</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t10</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t20</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t01</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t11</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t21</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t02</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t12</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t22</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="67" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="68" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a373f5f875a9ad447e7f74b199778983b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_major</definition>
        <argsstring>(const Scale3&lt; T &gt; &amp;major)</argsstring>
        <name>from_major</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Scale3" kindref="compound">Scale3</ref>&lt; T &gt; &amp;</type>
          <declname>major</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="85" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="85" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a6561d99fe4a440f99b2dc456f3fb233a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_scale</definition>
        <argsstring>(const Scale3&lt; T &gt; &amp;scale)</argsstring>
        <name>from_scale</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Scale3" kindref="compound">Scale3</ref>&lt; T &gt; &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="99" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a2e7d4e7cd10eb2a6d66a24ca0c85b0e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_translation2d</definition>
        <argsstring>(const vec2&lt; T &gt; &amp;t)</argsstring>
        <name>from_translation2d</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vec2" kindref="compound">vec2</ref>&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="107" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="107" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1ab1475fc37edb26e0a43fb9a2a31c234f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_scalar</definition>
        <argsstring>(T scalar)</argsstring>
        <name>from_scalar</name>
        <param>
          <type>T</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="120" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="120" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a49ca7ac7edfbf506646a322706b3f862" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_rot_x</definition>
        <argsstring>(const angle &amp;a)</argsstring>
        <name>from_rot_x</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="134" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="134" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1adafb52fdfaecfdfb3099fa01d15b49ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_rot_y</definition>
        <argsstring>(const angle &amp;a)</argsstring>
        <name>from_rot_y</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="149" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="149" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a15a7c861a46d9e86038b49182ff8616f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_rot_z</definition>
        <argsstring>(const angle &amp;a)</argsstring>
        <name>from_rot_z</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="164" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="164" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1a7eeef99852bb606d20497ad95395de25" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::from_axis_angle</definition>
        <argsstring>(const AxisAngle aa)</argsstring>
        <name>from_axis_angle</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1AxisAngle" kindref="compound">AxisAngle</ref></type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="174" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="174" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1mat3_1ab37e5f321a74853ac02b06af64d1a875" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1mat3" kindref="compound">mat3</ref>&lt; T &gt;</type>
        <definition>static mat3&lt;T&gt; euphoria::core::mat3&lt; T &gt;::identity</definition>
        <argsstring>()</argsstring>
        <name>identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/mat3.h" line="202" column="9" bodyfile="libs/core/src/core/mat3.h" bodystart="202" bodyend="205"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/mat3.h" line="13" column="1" bodyfile="libs/core/src/core/mat3.h" bodystart="12" bodyend="324"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1mat3_1aafe7b85e2d8abdf30865d7402f1535c5" prot="private" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>data</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a7eeef99852bb606d20497ad95395de25" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_axis_angle</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1aeb11ecfac0f706574359ab646400b9b3" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_col_major</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a373f5f875a9ad447e7f74b199778983b" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_major</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a49ca7ac7edfbf506646a322706b3f862" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_rot_x</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1adafb52fdfaecfdfb3099fa01d15b49ab" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_rot_y</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a15a7c861a46d9e86038b49182ff8616f" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_rot_z</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a3b43de57ec842c4ae4b0f29e74f4cbf8" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_row_major</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1ab1475fc37edb26e0a43fb9a2a31c234f" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_scalar</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a6561d99fe4a440f99b2dc456f3fb233a" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_scale</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a2e7d4e7cd10eb2a6d66a24ca0c85b0e8" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>from_translation2d</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1af3aded0e98f9160767c535d452ea19e5" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1abfa79dfef3d5d0f6d925a8b3027b7fab" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_axis</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1aabe25882999ea02480dae9162f066ae3" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_column</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1ab892e5d6936f3be305061de5661bc47d" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_data_ptr</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1af54dc7b369f1e1db2228bdaa02162131" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_data_ptr</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1ac94d3ea4e3eb25ab7fe276f6a95fb3b5" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_major</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1af854b73af913278188baee5f2e310fc4" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_row</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a3227d2a5382d17dabddc55abf9f9079a" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_transposed</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a7a42ba6446fd940270be307134e6fc7a" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_x_axis</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a121a70408c0c9fa5ae95425959333be2" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_y_axis</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a53461c4957443557cb09fe10687a0a34" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>get_z_axis</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1ab37e5f321a74853ac02b06af64d1a875" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>identity</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1ab1432d5c4a1a1aa938f0616eb9267d07" prot="private" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>mat3</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a3064c48b23be572f207f22973cea94fb" prot="private" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>mat3</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a5e1cd3c4bc626de4e1878d8e6b3fb6f3" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>mat3</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a05571a9335c0bf4d3b1b0ff583324c1c" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>operator()</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a27789f33b7ee205e483a6c6546f81fb3" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>operator()</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1aa06af8b341223f4e8945698d54e88258" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>operator+=</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a5f83474d024842322502335ea2ef147f" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>operator-=</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a0ae1266d0fd9e41d403eab20e6693904" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>rotate</name></member>
      <member refid="structeuphoria_1_1core_1_1mat3_1a0e2c2f7947293625ab05a1a90515deec" prot="public" virt="non-virtual"><scope>euphoria::core::mat3</scope><name>scale</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structeuphoria_1_1core_1_1angle" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::angle</compoundname>
    <includes refid="angle_8h" local="no">angle.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1angle_1a7ae30bf44a226d60af69f5e5ac1d99ed" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float euphoria::core::angle::radians</definition>
        <argsstring></argsstring>
        <name>radians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="72" column="15" bodyfile="libs/core/src/core/angle.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a05322e37013ba210dfd3b3e280db3951" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr static angle euphoria::core::angle::from_degrees</definition>
        <argsstring>(float degrees)</argsstring>
        <name>from_degrees</name>
        <param>
          <type>float</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="16" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a1e5c3875e12142f09f3ab0c47a7cded0" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr static angle euphoria::core::angle::from_radians</definition>
        <argsstring>(float radians)</argsstring>
        <name>from_radians</name>
        <param>
          <type>float</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="22" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1ab0e95107162945725c40bf854e703462" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr static angle euphoria::core::angle::from_percent_of_360</definition>
        <argsstring>(float percent)</argsstring>
        <name>from_percent_of_360</name>
        <param>
          <type>float</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="28" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a49707acbcf7d2e7fe253347f2558e8ed" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr static angle euphoria::core::angle::from_percent_of_180</definition>
        <argsstring>(float percent)</argsstring>
        <name>from_percent_of_180</name>
        <param>
          <type>float</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="34" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a0c59b3bcd700b574086c931b01e6c375" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle euphoria::core::angle::random</definition>
        <argsstring>(::euphoria::core::Random *random)</argsstring>
        <name>random</name>
        <param>
          <type>::<ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">euphoria::core::Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="39" column="23" bodyfile="libs/core/src/core/angle.cc" bodystart="12" bodyend="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a32b39a4289c98dbf67b4c12f0aca404c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::angle::wrap</definition>
        <argsstring>()</argsstring>
        <name>wrap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="42" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a320ed519ad8016f0146ac1e29a6959c0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::angle::as_degrees</definition>
        <argsstring>() const</argsstring>
        <name>as_degrees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="46" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a39921f07764397bd3622b63340191985" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::angle::as_radians</definition>
        <argsstring>() const</argsstring>
        <name>as_radians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="52" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a24bb3e5a585a58562672616a049d8aa5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::angle::from_percent_of_360</definition>
        <argsstring>() const</argsstring>
        <name>from_percent_of_360</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="58" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a4febd5e5c75178fcecbf6aba89192a10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle euphoria::core::angle::get_wrapped</definition>
        <argsstring>() const</argsstring>
        <name>get_wrapped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="63" column="16" bodyfile="libs/core/src/core/angle.cc" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1ac0057dfd71da8ea6675d1762fc7bedc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::angle::operator+=</definition>
        <argsstring>(const angle &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="65" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1aaf74abb3ff4315b43c9f6d7fc0c97799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::angle::operator-=</definition>
        <argsstring>(const angle &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="66" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a29b0de40d4a1faadd16e9125108d12de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::angle::operator*=</definition>
        <argsstring>(float rhs)</argsstring>
        <name>operator*=</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="67" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a03ad1cae5ae456c5007f1a30483b6382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::angle::operator/=</definition>
        <argsstring>(float rhs)</argsstring>
        <name>operator/=</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="68" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a5de2b1676724575b45953dc10d45614f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle euphoria::core::angle::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="69" column="15" bodyfile="libs/core/src/core/angle.cc" bodystart="54" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1af11399cfbbf5f40e083019ba63c9cea6" prot="private" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr euphoria::core::angle::angle</definition>
        <argsstring>(float r)</argsstring>
        <name>angle</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="74" column="28" bodyfile="libs/core/src/core/angle.h" bodystart="74" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1a649d711704173c5ae72f8aedaa5a70a8" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>static constexpr float euphoria::core::angle::c_radian_to_degrees</definition>
        <argsstring>(float radians)</argsstring>
        <name>c_radian_to_degrees</name>
        <param>
          <type>float</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="77" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1angle_1aad9f7c7aea5c1a0f3f5e9152207b3afb" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>static constexpr float euphoria::core::angle::c_degrees_to_radian</definition>
        <argsstring>(float degrees)</argsstring>
        <name>c_degrees_to_radian</name>
        <param>
          <type>float</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="83" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="83" bodyend="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/angle.h" line="14" column="1" bodyfile="libs/core/src/core/angle.h" bodystart="13" bodyend="87"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1angle_1af11399cfbbf5f40e083019ba63c9cea6" prot="private" virt="non-virtual"><scope>euphoria::core::angle</scope><name>angle</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a320ed519ad8016f0146ac1e29a6959c0" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>as_degrees</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a39921f07764397bd3622b63340191985" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>as_radians</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1aad9f7c7aea5c1a0f3f5e9152207b3afb" prot="private" virt="non-virtual"><scope>euphoria::core::angle</scope><name>c_degrees_to_radian</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a649d711704173c5ae72f8aedaa5a70a8" prot="private" virt="non-virtual"><scope>euphoria::core::angle</scope><name>c_radian_to_degrees</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a05322e37013ba210dfd3b3e280db3951" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>from_degrees</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a49707acbcf7d2e7fe253347f2558e8ed" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>from_percent_of_180</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1ab0e95107162945725c40bf854e703462" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>from_percent_of_360</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a24bb3e5a585a58562672616a049d8aa5" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>from_percent_of_360</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a1e5c3875e12142f09f3ab0c47a7cded0" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>from_radians</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a4febd5e5c75178fcecbf6aba89192a10" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>get_wrapped</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a29b0de40d4a1faadd16e9125108d12de" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>operator*=</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1ac0057dfd71da8ea6675d1762fc7bedc5" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>operator+=</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a5de2b1676724575b45953dc10d45614f" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>operator-</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1aaf74abb3ff4315b43c9f6d7fc0c97799" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>operator-=</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a03ad1cae5ae456c5007f1a30483b6382" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>operator/=</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a7ae30bf44a226d60af69f5e5ac1d99ed" prot="private" virt="non-virtual"><scope>euphoria::core::angle</scope><name>radians</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a0c59b3bcd700b574086c931b01e6c375" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>random</name></member>
      <member refid="structeuphoria_1_1core_1_1angle_1a32b39a4289c98dbf67b4c12f0aca404c" prot="public" virt="non-virtual"><scope>euphoria::core::angle</scope><name>wrap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

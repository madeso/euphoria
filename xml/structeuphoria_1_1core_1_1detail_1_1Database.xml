<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structeuphoria_1_1core_1_1detail_1_1Database" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::detail::Database</compoundname>
    <includes refid="chatbot_8h" local="no">chatbot.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1detail_1_1Database_1ad4b58f6c3f7da1ac90dc0d2a47da4466" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::detail::Database::signon</definition>
        <argsstring></argsstring>
        <name>signon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="111" column="25" bodyfile="libs/core/src/core/chatbot.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1detail_1_1Database_1ab4e7a8e825b06c5b74aceb19d0434a43" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::detail::Database::empty</definition>
        <argsstring></argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="112" column="25" bodyfile="libs/core/src/core/chatbot.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1detail_1_1Database_1af69e6a900721f4508d599515673bca70" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::detail::Database::no_response</definition>
        <argsstring></argsstring>
        <name>no_response</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="113" column="25" bodyfile="libs/core/src/core/chatbot.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1detail_1_1Database_1a00f06f380bdaafb252e66b404bc212be" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::detail::Database::same_input</definition>
        <argsstring></argsstring>
        <name>same_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="114" column="25" bodyfile="libs/core/src/core/chatbot.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1detail_1_1Database_1ae808b7cbb79e842957a58c23917dc83a" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::detail::Database::similar_input</definition>
        <argsstring></argsstring>
        <name>similar_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="115" column="25" bodyfile="libs/core/src/core/chatbot.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1detail_1_1Database_1a4176417dcdeef456322763b4a88723df" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::detail::Database::empty_repetition</definition>
        <argsstring></argsstring>
        <name>empty_repetition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="116" column="25" bodyfile="libs/core/src/core/chatbot.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1detail_1_1Database_1a9fe6dd06f7580cba1f1f3d7e51dedcb6" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structeuphoria_1_1core_1_1detail_1_1Response" kindref="compound">Response</ref> &gt;</type>
        <definition>std::vector&lt;Response&gt; euphoria::core::detail::Database::responses</definition>
        <argsstring></argsstring>
        <name>responses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="118" column="25" bodyfile="libs/core/src/core/chatbot.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1detail_1_1Database_1a7184977a2a1b06d6b6cd1b42e336e3ae" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int euphoria::core::detail::Database::event_id</definition>
        <argsstring></argsstring>
        <name>event_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="120" column="17" bodyfile="libs/core/src/core/chatbot.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1detail_1_1Database_1aedb3bd5af9e7d252a7b86e881b2bd2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::detail::Database::Database</definition>
        <argsstring>()</argsstring>
        <name>Database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="122" column="13" bodyfile="libs/core/src/core/chatbot.cc" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1detail_1_1Database_1ac7986f4ca894e781fc413a7d4f6ebd89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1detail_1_1Response" kindref="compound">Response</ref> &amp;</type>
        <definition>Response &amp; euphoria::core::detail::Database::create_response</definition>
        <argsstring>()</argsstring>
        <name>create_response</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="124" column="22" bodyfile="libs/core/src/core/chatbot.cc" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1detail_1_1Database_1a2fc455c3ce19f447f95d3132e67c216a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1detail_1_1ResponseBuilder" kindref="compound">ResponseBuilder</ref></type>
        <definition>ResponseBuilder euphoria::core::detail::Database::add_response</definition>
        <argsstring>(const std::string &amp;input, Input::LocationType where=Input::at_start)</argsstring>
        <name>add_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1detail_1_1Input_1aeddf00a5e8ba5b4ca227953b4ea8cc14" kindref="member">Input::LocationType</ref></type>
          <declname>where</declname>
          <defval><ref refid="structeuphoria_1_1core_1_1detail_1_1Input_1aeddf00a5e8ba5b4ca227953b4ea8cc14a363f6a1b7a1399ff748dd15e800a5da2" kindref="member">Input::at_start</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="126" column="29" bodyfile="libs/core/src/core/chatbot.cc" bodystart="209" bodyend="214"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/chatbot.h" line="109" column="9" bodyfile="libs/core/src/core/chatbot.h" bodystart="110" bodyend="131"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1a2fc455c3ce19f447f95d3132e67c216a" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>add_response</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1ac7986f4ca894e781fc413a7d4f6ebd89" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>create_response</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1aedb3bd5af9e7d252a7b86e881b2bd2e1" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>Database</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1ab4e7a8e825b06c5b74aceb19d0434a43" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>empty</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1a4176417dcdeef456322763b4a88723df" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>empty_repetition</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1a7184977a2a1b06d6b6cd1b42e336e3ae" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>event_id</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1af69e6a900721f4508d599515673bca70" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>no_response</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1a9fe6dd06f7580cba1f1f3d7e51dedcb6" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>responses</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1a00f06f380bdaafb252e66b404bc212be" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>same_input</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1ad4b58f6c3f7da1ac90dc0d2a47da4466" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>signon</name></member>
      <member refid="structeuphoria_1_1core_1_1detail_1_1Database_1ae808b7cbb79e842957a58c23917dc83a" prot="public" virt="non-virtual"><scope>euphoria::core::detail::Database</scope><name>similar_input</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

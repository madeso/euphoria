<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceeuphoria_1_1assertlib" kind="namespace" language="C++">
    <compoundname>euphoria::assertlib</compoundname>
    <innerclass refid="structeuphoria_1_1assertlib_1_1AssertArgumentValue" prot="public">euphoria::assertlib::AssertArgumentValue</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeuphoria_1_1assertlib_1a1dd5f5b637d38ff7125a9ffe6fa9efb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::assertlib::start_throwing</definition>
        <argsstring>()</argsstring>
        <name>start_throwing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="106" column="5" declfile="libs/assert/src/assert/assert.h" declline="106" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1assertlib_1aadc50e6c320a759f0f79559b26dd4c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool euphoria::assertlib::is_throwing</definition>
        <argsstring>()</argsstring>
        <name>is_throwing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="109" column="5" declfile="libs/assert/src/assert/assert.h" declline="109" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1assertlib_1aca4984e08a6871d591be4b6c9a3d8c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::assertlib::on_assert</definition>
        <argsstring>(const char *expression, int line, const char *file, const char *argstr, const std::vector&lt; AssertArgumentValue &gt; &amp;arguments, const char *function)</argsstring>
        <name>on_assert</name>
        <param>
          <type>const char *</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argstr</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="structeuphoria_1_1assertlib_1_1AssertArgumentValue" kindref="compound">AssertArgumentValue</ref> &gt; &amp;</type>
          <declname>arguments</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="112" column="5" declfile="libs/assert/src/assert/assert.h" declline="112" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/assert/src/assert/assert.h" line="91" column="1"/>
  </compounddef>
</doxygen>

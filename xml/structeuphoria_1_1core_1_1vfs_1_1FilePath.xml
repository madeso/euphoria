<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structeuphoria_1_1core_1_1vfs_1_1FilePath" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::vfs::FilePath</compoundname>
    <includes refid="vfs__path_8h" local="no">vfs_path.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a2f4cddb9e28920f8a7a629304f981c8b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string euphoria::core::vfs::FilePath::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
<para>contains either . </para>
        </briefdescription>
        <detaileddescription>
<para>/ or ~/ at the start has a file name and possible extension </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="39" column="21" bodyfile="libs/core/src/core/vfs_path.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a81ab72ad4f6a037d02aba2c925950e56" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::vfs::FilePath::FilePath</definition>
        <argsstring>(const std::string &amp;p)</argsstring>
        <name>FilePath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="42" column="9" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="205" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a2d7738879b49aa19fbe233b86161ecd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">FilePath</ref></type>
        <definition>FilePath euphoria::core::vfs::FilePath::set_extension_copy</definition>
        <argsstring>(const std::string &amp;ext) const</argsstring>
        <name>set_extension_copy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="53" column="19" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="170" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a53f70d8776d1b72ce98934c0c3480c9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">FilePath</ref></type>
        <definition>FilePath euphoria::core::vfs::FilePath::extend_extension_copy</definition>
        <argsstring>(const std::string &amp;ext) const</argsstring>
        <name>extend_extension_copy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="54" column="19" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="189" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1ad3ebe654c0cb5bdc7ac15a41bd8e1f89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structeuphoria_1_1core_1_1vfs_1_1DirPath" kindref="compound">DirPath</ref>, std::string &gt;</type>
        <definition>std::tuple&lt; DirPath, std::string &gt; euphoria::core::vfs::FilePath::split_directories_and_file</definition>
        <argsstring>() const</argsstring>
        <name>split_directories_and_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="56" column="21" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="116" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1ab86a24fff9fa9df0e92c66814bee7b8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1DirPath" kindref="compound">DirPath</ref></type>
        <definition>DirPath euphoria::core::vfs::FilePath::get_directory</definition>
        <argsstring>() const</argsstring>
        <name>get_directory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="57" column="18" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1aca8ccb9934301df96d77245e7d0be0ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::vfs::FilePath::get_file_with_extension</definition>
        <argsstring>() const</argsstring>
        <name>get_file_with_extension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="58" column="22" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a9f37d845599f9392e0093aa7c4adbd89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::vfs::FilePath::get_filename_without_extension</definition>
        <argsstring>() const</argsstring>
        <name>get_filename_without_extension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="59" column="22" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="151" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a790d60ca5119ade2ef587a06842b5c98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::vfs::FilePath::get_extension</definition>
        <argsstring>() const</argsstring>
        <name>get_extension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="60" column="22" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="161" bodyend="167"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a461784f022a079dd319c74a218595283" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">FilePath</ref> &gt;</type>
        <definition>std::optional&lt; FilePath &gt; euphoria::core::vfs::FilePath::from_script</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>from_script</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>apply only minor changes, return null on invalid </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="45" column="30" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="46" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a3546cec3bc1b9c31d90b301e103f7a4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">FilePath</ref> &gt;</type>
        <definition>std::optional&lt; FilePath &gt; euphoria::core::vfs::FilePath::from_dirty_source</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>from_dirty_source</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>do everything possible to convert from dirty path to valid path </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="48" column="30" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="75" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a91e1b546e2949f727989227ff58e2f49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">FilePath</ref> &gt;</type>
        <definition>std::optional&lt; FilePath &gt; euphoria::core::vfs::FilePath::from_script_or_empty</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>from_script_or_empty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>optional or not, log if error </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/vfs_path.h" line="51" column="30" bodyfile="libs/core/src/core/vfs_path.cc" bodystart="102" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/vfs_path.h" line="35" column="5" bodyfile="libs/core/src/core/vfs_path.h" bodystart="36" bodyend="61"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a53f70d8776d1b72ce98934c0c3480c9a" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>extend_extension_copy</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a81ab72ad4f6a037d02aba2c925950e56" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>FilePath</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a3546cec3bc1b9c31d90b301e103f7a4e" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>from_dirty_source</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a461784f022a079dd319c74a218595283" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>from_script</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a91e1b546e2949f727989227ff58e2f49" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>from_script_or_empty</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1ab86a24fff9fa9df0e92c66814bee7b8b" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>get_directory</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a790d60ca5119ade2ef587a06842b5c98" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>get_extension</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1aca8ccb9934301df96d77245e7d0be0ba" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>get_file_with_extension</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a9f37d845599f9392e0093aa7c4adbd89" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>get_filename_without_extension</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a2f4cddb9e28920f8a7a629304f981c8b" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>path</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1a2d7738879b49aa19fbe233b86161ecd7" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>set_extension_copy</name></member>
      <member refid="structeuphoria_1_1core_1_1vfs_1_1FilePath_1ad3ebe654c0cb5bdc7ac15a41bd8e1f89" prot="public" virt="non-virtual"><scope>euphoria::core::vfs::FilePath</scope><name>split_directories_and_file</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

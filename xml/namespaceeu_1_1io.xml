<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceeu_1_1io" kind="namespace" language="C++">
    <compoundname>eu::io</compoundname>
    <innerclass refid="structeu_1_1io_1_1Json" prot="public">eu::io::Json</innerclass>
    <innerclass refid="structeu_1_1io_1_1JsonError" prot="public">eu::io::JsonError</innerclass>
    <innerclass refid="structeu_1_1io_1_1ObjectQuery" prot="public">eu::io::ObjectQuery</innerclass>
    <innerclass refid="structeu_1_1io_1_1ListedFile" prot="public">eu::io::ListedFile</innerclass>
    <innerclass refid="structeu_1_1io_1_1FileList" prot="public">eu::io::FileList</innerclass>
    <innerclass refid="structeu_1_1io_1_1ReadRoot" prot="public">eu::io::ReadRoot</innerclass>
    <innerclass refid="structeu_1_1io_1_1WriteRoot" prot="public">eu::io::WriteRoot</innerclass>
    <innerclass refid="structeu_1_1io_1_1FileSystem" prot="public">eu::io::FileSystem</innerclass>
    <innerclass refid="structeu_1_1io_1_1ReadRootCatalog" prot="public">eu::io::ReadRootCatalog</innerclass>
    <innerclass refid="structeu_1_1io_1_1ReadRootPhysicalFolder" prot="public">eu::io::ReadRootPhysicalFolder</innerclass>
    <innerclass refid="structeu_1_1io_1_1WriteRootPhysicalFolder" prot="public">eu::io::WriteRootPhysicalFolder</innerclass>
    <innerclass refid="structeu_1_1io_1_1FilePath" prot="public">eu::io::FilePath</innerclass>
    <innerclass refid="structeu_1_1io_1_1DirPath" prot="public">eu::io::DirPath</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceeu_1_1io_1ad85910fecaeff44683f62c2aefa5d876" prot="public" static="no" strong="yes">
        <type></type>
        <name>JsonErrorType</name>
        <enumvalue id="namespaceeu_1_1io_1ad85910fecaeff44683f62c2aefa5d876af91ec15ddab2e0c740d311f7c4a6613a" prot="public">
          <name>file_error</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceeu_1_1io_1ad85910fecaeff44683f62c2aefa5d876a456e19aeafa334241c7ff3f589547f9d" prot="public">
          <name>parse_error</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/json.h" line="21" column="5" bodyfile="libs/io/src/io/json.h" bodystart="21" bodyend="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceeu_1_1io_1ace93b7b6b7f4d32dd802462d06944b66" prot="public" static="no">
        <type><ref refid="structeu_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="structeu_1_1io_1_1Json" kindref="compound">Json</ref>, <ref refid="structeu_1_1io_1_1JsonError" kindref="compound">JsonError</ref> &gt;</type>
        <definition>using eu::io::JsonResult = typedef Result&lt;Json, JsonError&gt;</definition>
        <argsstring></argsstring>
        <name>JsonResult</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/json.h" line="24" column="5" bodyfile="libs/io/src/io/json.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeu_1_1io_1a95f917b0a5e92afe6c849bcfd806bdb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eu::io::write_chunk_to_file</definition>
        <argsstring>(std::shared_ptr&lt; MemoryChunk &gt; chunk, const std::string &amp;full_path)</argsstring>
        <name>write_chunk_to_file</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structeu_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> &gt;</type>
          <declname>chunk</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>full_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/io.cc" line="13" column="5" bodyfile="libs/io/src/io/io.cc" bodystart="14" bodyend="26" declfile="libs/io/src/io/io.h" declline="13" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a598b9cd342da9b4e9cea528cc6c1fc02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeu_1_1MemoryChunk" kindref="compound">MemoryChunk</ref> &gt;</type>
        <definition>std::shared_ptr&lt; MemoryChunk &gt; eu::io::read_file_to_chunk</definition>
        <argsstring>(const std::string &amp;full_path)</argsstring>
        <name>read_file_to_chunk</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>full_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/io.cc" line="37" column="5" bodyfile="libs/io/src/io/io.cc" bodystart="37" bodyend="65" declfile="libs/io/src/io/io.h" declline="20" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1ada10bf9235fa053e0dab2195aebdeca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt; std::string &gt; eu::io::read_file_to_string</definition>
        <argsstring>(const std::string &amp;full_path)</argsstring>
        <name>read_file_to_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>full_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/io.cc" line="68" column="5" bodyfile="libs/io/src/io/io.cc" bodystart="68" bodyend="81" declfile="libs/io/src/io/io.h" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a7c7dfcd919e5f13cf90f736ea02c686c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::io::get_string_from_path_for_debugging</definition>
        <argsstring>(FileSystem *fs, const FilePath &amp;p)</argsstring>
        <name>get_string_from_path_for_debugging</name>
        <param>
          <type><ref refid="structeu_1_1io_1_1FileSystem" kindref="compound">FileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/json.cc" line="21" column="5" bodyfile="libs/io/src/io/json.cc" bodystart="21" bodyend="54" declfile="libs/io/src/io/json.h" declline="26" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a2049b22d6354d5de730d40752ee68d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeu_1_1io_1ace93b7b6b7f4d32dd802462d06944b66" kindref="member">JsonResult</ref></type>
        <definition>JsonResult eu::io::read_json_file</definition>
        <argsstring>(FileSystem *fs, const FilePath &amp;file_name)</argsstring>
        <name>read_json_file</name>
        <param>
          <type><ref refid="structeu_1_1io_1_1FileSystem" kindref="compound">FileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/json.cc" line="57" column="5" bodyfile="libs/io/src/io/json.cc" bodystart="58" bodyend="86" declfile="libs/io/src/io/json.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a3e3f0d49ed392f6041e6f7016ee29665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::io::could_be</definition>
        <argsstring>(const std::string &amp;invalid_value, const std::vector&lt; std::string &gt; &amp;possible_values)</argsstring>
        <name>could_be</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invalid_value</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>possible_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/json.cc" line="89" column="5" bodyfile="libs/io/src/io/json.cc" bodystart="89" bodyend="108" declfile="libs/io/src/io/json.h" declline="35" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a545a8da2b905bf7468c9d34bc6d8f73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::io::combine_folder_and_path</definition>
        <argsstring>(const std::string &amp;folder, const FilePath &amp;path)</argsstring>
        <name>combine_folder_and_path</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>folder</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs.cc" line="268" column="5" bodyfile="libs/io/src/io/vfs.cc" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a6ca1770e2069b7f609b7286eb8fad9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::io::combine_folder_and_path</definition>
        <argsstring>(const std::string &amp;folder, const DirPath &amp;path)</argsstring>
        <name>combine_folder_and_path</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>folder</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs.cc" line="275" column="5" bodyfile="libs/io/src/io/vfs.cc" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a36c4d470688db6d082c79854562b3ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::io::make_sure_folder_ends_with_slash</definition>
        <argsstring>(const std::string &amp;folder)</argsstring>
        <name>make_sure_folder_ends_with_slash</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>folder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs.cc" line="282" column="5" bodyfile="libs/io/src/io/vfs.cc" bodystart="282" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a39a919e7a4fa3d468e1268fe1a75d0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::io::to_string</definition>
        <argsstring>(const FilePath &amp;p)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="321" column="17" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="321" bodyend="322" declfile="libs/io/src/io/vfs_path.h" declline="63" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1ab440db8eccb1798dac97a4e967aedc18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::io::to_string</definition>
        <argsstring>(const DirPath &amp;p)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="324" column="17" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="324" bodyend="325" declfile="libs/io/src/io/vfs_path.h" declline="87" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a6f0397de3a89728b8db504d8a7b25090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &gt;</type>
        <definition>std::optional&lt; DirPath &gt; eu::io::resolve_relative</definition>
        <argsstring>(const DirPath &amp;base)</argsstring>
        <name>resolve_relative</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="349" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="349" bodyend="384" declfile="libs/io/src/io/vfs_path.h" declline="91" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a351c56f18b37d69d45068cc2f2b33161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &gt;</type>
        <definition>std::optional&lt; DirPath &gt; eu::io::resolve_relative</definition>
        <argsstring>(const DirPath &amp;base, const DirPath &amp;root)</argsstring>
        <name>resolve_relative</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="388" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="388" bodyend="396" declfile="libs/io/src/io/vfs_path.h" declline="95" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1af0bb51e0cb83d872947e83bcbabe710b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &gt;</type>
        <definition>std::optional&lt; FilePath &gt; eu::io::resolve_relative</definition>
        <argsstring>(const FilePath &amp;base)</argsstring>
        <name>resolve_relative</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="400" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="400" bodyend="406" declfile="libs/io/src/io/vfs_path.h" declline="99" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a7f145a564b3e226c2b7487bddb059a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &gt;</type>
        <definition>std::optional&lt; FilePath &gt; eu::io::resolve_relative</definition>
        <argsstring>(const FilePath &amp;base, const DirPath &amp;root)</argsstring>
        <name>resolve_relative</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="409" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="409" bodyend="415" declfile="libs/io/src/io/vfs_path.h" declline="103" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a7f9bc34b1d46383d7f9ab2ac78564078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref></type>
        <definition>DirPath eu::io::join</definition>
        <argsstring>(const DirPath &amp;lhs, const DirPath &amp;rhs)</argsstring>
        <name>join</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="419" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="419" bodyend="431" declfile="libs/io/src/io/vfs_path.h" declline="107" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1af498a3a87359989629da0508387367de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref></type>
        <definition>FilePath eu::io::join</definition>
        <argsstring>(const DirPath &amp;lhs, const FilePath &amp;rhs)</argsstring>
        <name>join</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="435" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="435" bodyend="440" declfile="libs/io/src/io/vfs_path.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a95cc454f99d48fa6b31dff898a04e47e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::io::operator==</definition>
        <argsstring>(const DirPath &amp;lhs, const DirPath &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="444" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="444" bodyend="447" declfile="libs/io/src/io/vfs_path.h" declline="115" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a2fe657a266026872ea52250f3283ddc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::io::operator==</definition>
        <argsstring>(const FilePath &amp;lhs, const FilePath &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="451" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="451" bodyend="454" declfile="libs/io/src/io/vfs_path.h" declline="119" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a5dbb528c9b7df01c61d94f4d8b1e9689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::io::operator!=</definition>
        <argsstring>(const DirPath &amp;lhs, const DirPath &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="458" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="458" bodyend="461" declfile="libs/io/src/io/vfs_path.h" declline="123" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a6183c8d41da08b39743f604cf7f729f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::io::operator!=</definition>
        <argsstring>(const FilePath &amp;lhs, const FilePath &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="465" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="465" bodyend="468" declfile="libs/io/src/io/vfs_path.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1a75f261598405074cafcd85dce63fa45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::io::operator&lt;</definition>
        <argsstring>(const DirPath &amp;lhs, const DirPath &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1DirPath" kindref="compound">DirPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="471" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="472" bodyend="475" declfile="libs/io/src/io/vfs_path.h" declline="130" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeu_1_1io_1ac43db72cd46b67cc517abd5be10883cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::io::operator&lt;</definition>
        <argsstring>(const FilePath &amp;lhs, const FilePath &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeu_1_1io_1_1FilePath" kindref="compound">FilePath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/io/src/io/vfs_path.cc" line="478" column="5" bodyfile="libs/io/src/io/vfs_path.cc" bodystart="479" bodyend="482" declfile="libs/io/src/io/vfs_path.h" declline="134" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/enum.h" line="7" column="1"/>
  </compounddef>
</doxygen>

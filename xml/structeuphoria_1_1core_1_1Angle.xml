<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structeuphoria_1_1core_1_1Angle" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::Angle</compoundname>
    <includes refid="angle_8h" local="no">angle.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Angle_1af90116018426f8207b9ba2d70793fddd" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float euphoria::core::Angle::radians</definition>
        <argsstring></argsstring>
        <name>radians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="136" column="15" bodyfile="libs/core/src/core/angle.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a7754bbd880d7288fdc5cbdb86801f888" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::Angle::in_degrees</definition>
        <argsstring>() const</argsstring>
        <name>in_degrees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="14" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a81fde79cf257aca064efa745d638b768" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::Angle::in_radians</definition>
        <argsstring>() const</argsstring>
        <name>in_radians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="21" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1aa55c45768bbbbf4a5a0be2ea93ed0d4b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::Angle::in_percent_of_360</definition>
        <argsstring>() const</argsstring>
        <name>in_percent_of_360</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="77" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a0b9c30f304ec6851e032dfc15dab6d85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::Angle::get_wrapped</definition>
        <argsstring>() const</argsstring>
        <name>get_wrapped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="95" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a22341a721e8c459febd453c679315c2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::wrap</definition>
        <argsstring>()</argsstring>
        <name>wrap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="99" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a0e16d861fa57b7b1a0254a89ecc978d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::operator+=</definition>
        <argsstring>(const Angle &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="103" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1acecd897faba74308c57a9c1e2c6a664c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::operator-=</definition>
        <argsstring>(const Angle &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="107" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1aef3f8810c67f646d63e94c8d537d5c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::operator*=</definition>
        <argsstring>(float rhs)</argsstring>
        <name>operator*=</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="111" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a90cbde1b0dbc921e8a8a9544260aad3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::operator/=</definition>
        <argsstring>(float rhs)</argsstring>
        <name>operator/=</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="115" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a4d6f4ccc56e03010af9e0db459a7c798" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::Angle::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="119" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1adc6d783bca801f312f5bb3809b64936a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::from_degrees</definition>
        <argsstring>(float degrees)</argsstring>
        <name>from_degrees</name>
        <param>
          <type>float</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="28" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1ae47dbab360ee9809460e09793f86939b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::from_radians</definition>
        <argsstring>(float radians)</argsstring>
        <name>from_radians</name>
        <param>
          <type>float</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="35" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1abb1276047afbd4ea5af6cac6068bbde5" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::from_percent_of_360</definition>
        <argsstring>(float percent)</argsstring>
        <name>from_percent_of_360</name>
        <param>
          <type>float</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="42" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a234b4536e1fdc9ca99663fec9f2728bb" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::one_turn</definition>
        <argsstring>()</argsstring>
        <name>one_turn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="49" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1ac02fdd7c0ec964a09a213c06cc28b482" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::half</definition>
        <argsstring>()</argsstring>
        <name>half</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="56" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a062adf63700f2918328c448ac69402d4" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::quarter</definition>
        <argsstring>()</argsstring>
        <name>quarter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="63" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a356f4d3bdf1cd212a86bd450eb65e458" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::zero</definition>
        <argsstring>()</argsstring>
        <name>zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="70" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a1881539276ef5da515556e475b2574c5" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::from_percent_of_180</definition>
        <argsstring>(float percent)</argsstring>
        <name>from_percent_of_180</name>
        <param>
          <type>float</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="84" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1ad5be4462baf65179b69819ee68a8ed2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>static Angle euphoria::core::Angle::random</definition>
        <argsstring>(::euphoria::core::Random *random)</argsstring>
        <name>random</name>
        <param>
          <type>::<ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">euphoria::core::Random</ref> *</type>
          <declname>random</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="91" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a66925db935dadf0f12ab857488d7f7e9" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>static constexpr float euphoria::core::Angle::radian_to_degrees</definition>
        <argsstring>(float radians)</argsstring>
        <name>radian_to_degrees</name>
        <param>
          <type>float</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="123" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a33502272712ef4b2dc2217498fe333e3" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>static constexpr float euphoria::core::Angle::degrees_to_radian</definition>
        <argsstring>(float degrees)</argsstring>
        <name>degrees_to_radian</name>
        <param>
          <type>float</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="129" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="129" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a2defca381e5ff7a14d8d18ac4037c345" prot="private" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr euphoria::core::Angle::Angle</definition>
        <argsstring>(float r)</argsstring>
        <name>Angle</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="134" column="28" bodyfile="libs/core/src/core/angle.h" bodystart="134" bodyend="134"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/angle.h" line="12" column="1" bodyfile="libs/core/src/core/angle.h" bodystart="11" bodyend="137"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1Angle_1a2defca381e5ff7a14d8d18ac4037c345" prot="private" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>Angle</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a33502272712ef4b2dc2217498fe333e3" prot="private" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>degrees_to_radian</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1adc6d783bca801f312f5bb3809b64936a" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>from_degrees</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a1881539276ef5da515556e475b2574c5" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>from_percent_of_180</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1abb1276047afbd4ea5af6cac6068bbde5" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>from_percent_of_360</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1ae47dbab360ee9809460e09793f86939b" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>from_radians</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a0b9c30f304ec6851e032dfc15dab6d85" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>get_wrapped</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1ac02fdd7c0ec964a09a213c06cc28b482" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>half</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a7754bbd880d7288fdc5cbdb86801f888" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>in_degrees</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1aa55c45768bbbbf4a5a0be2ea93ed0d4b" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>in_percent_of_360</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a81fde79cf257aca064efa745d638b768" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>in_radians</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a234b4536e1fdc9ca99663fec9f2728bb" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>one_turn</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1aef3f8810c67f646d63e94c8d537d5c1d" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator*=</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a0e16d861fa57b7b1a0254a89ecc978d9" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator+=</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a4d6f4ccc56e03010af9e0db459a7c798" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator-</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1acecd897faba74308c57a9c1e2c6a664c" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator-=</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a90cbde1b0dbc921e8a8a9544260aad3c" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator/=</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a062adf63700f2918328c448ac69402d4" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>quarter</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a66925db935dadf0f12ab857488d7f7e9" prot="private" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>radian_to_degrees</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1af90116018426f8207b9ba2d70793fddd" prot="private" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>radians</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1ad5be4462baf65179b69819ee68a8ed2d" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>random</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a22341a721e8c459febd453c679315c2b" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>wrap</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a356f4d3bdf1cd212a86bd450eb65e458" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

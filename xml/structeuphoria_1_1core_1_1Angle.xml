<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structeuphoria_1_1core_1_1Angle" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::Angle</compoundname>
    <includes refid="angle_8h" local="no">angle.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Angle_1af90116018426f8207b9ba2d70793fddd" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float euphoria::core::Angle::radians</definition>
        <argsstring></argsstring>
        <name>radians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="70" column="15" bodyfile="libs/core/src/core/angle.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1adc6d783bca801f312f5bb3809b64936a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::from_degrees</definition>
        <argsstring>(float degrees)</argsstring>
        <name>from_degrees</name>
        <param>
          <type>float</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="16" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1ae47dbab360ee9809460e09793f86939b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::from_radians</definition>
        <argsstring>(float radians)</argsstring>
        <name>from_radians</name>
        <param>
          <type>float</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="22" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1abb1276047afbd4ea5af6cac6068bbde5" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::from_percent_of_360</definition>
        <argsstring>(float percent)</argsstring>
        <name>from_percent_of_360</name>
        <param>
          <type>float</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="28" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a1881539276ef5da515556e475b2574c5" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>constexpr static Angle euphoria::core::Angle::from_percent_of_180</definition>
        <argsstring>(float percent)</argsstring>
        <name>from_percent_of_180</name>
        <param>
          <type>float</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="34" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="34" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a22341a721e8c459febd453c679315c2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::wrap</definition>
        <argsstring>()</argsstring>
        <name>wrap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="40" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a6ffb648e87be9eb410e837dd7d901e78" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::Angle::as_degrees</definition>
        <argsstring>() const</argsstring>
        <name>as_degrees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="44" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a03de522064bb979d647d5adaec2b2180" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::Angle::as_radians</definition>
        <argsstring>() const</argsstring>
        <name>as_radians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="50" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a053168a91b60d2011ca67427f0bd3878" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float euphoria::core::Angle::from_percent_of_360</definition>
        <argsstring>() const</argsstring>
        <name>from_percent_of_360</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="56" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a0b9c30f304ec6851e032dfc15dab6d85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::Angle::get_wrapped</definition>
        <argsstring>() const</argsstring>
        <name>get_wrapped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="61" column="16" bodyfile="libs/core/src/core/angle.cc" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a0e16d861fa57b7b1a0254a89ecc978d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::operator+=</definition>
        <argsstring>(const Angle &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="63" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1acecd897faba74308c57a9c1e2c6a664c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::operator-=</definition>
        <argsstring>(const Angle &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="64" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1aef3f8810c67f646d63e94c8d537d5c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::operator*=</definition>
        <argsstring>(float rhs)</argsstring>
        <name>operator*=</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="65" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a90cbde1b0dbc921e8a8a9544260aad3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euphoria::core::Angle::operator/=</definition>
        <argsstring>(float rhs)</argsstring>
        <name>operator/=</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="66" column="14" bodyfile="libs/core/src/core/angle.cc" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a4d6f4ccc56e03010af9e0db459a7c798" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1Angle" kindref="compound">Angle</ref></type>
        <definition>Angle euphoria::core::Angle::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="67" column="15" bodyfile="libs/core/src/core/angle.cc" bodystart="54" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a2defca381e5ff7a14d8d18ac4037c345" prot="private" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr euphoria::core::Angle::Angle</definition>
        <argsstring>(float r)</argsstring>
        <name>Angle</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="72" column="28" bodyfile="libs/core/src/core/angle.h" bodystart="72" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1aaa2004b58645ec3bfae815937d541de5" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>static constexpr float euphoria::core::Angle::c_radian_to_degrees</definition>
        <argsstring>(float radians)</argsstring>
        <name>c_radian_to_degrees</name>
        <param>
          <type>float</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="75" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Angle_1a801e75ac1aaad563f369f8fc6dd85b22" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>static constexpr float euphoria::core::Angle::c_degrees_to_radian</definition>
        <argsstring>(float degrees)</argsstring>
        <name>c_degrees_to_radian</name>
        <param>
          <type>float</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/angle.h" line="81" column="9" bodyfile="libs/core/src/core/angle.h" bodystart="81" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/angle.h" line="13" column="5" bodyfile="libs/core/src/core/angle.h" bodystart="14" bodyend="85"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1Angle_1a2defca381e5ff7a14d8d18ac4037c345" prot="private" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>Angle</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a6ffb648e87be9eb410e837dd7d901e78" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>as_degrees</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a03de522064bb979d647d5adaec2b2180" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>as_radians</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a801e75ac1aaad563f369f8fc6dd85b22" prot="private" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>c_degrees_to_radian</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1aaa2004b58645ec3bfae815937d541de5" prot="private" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>c_radian_to_degrees</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1adc6d783bca801f312f5bb3809b64936a" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>from_degrees</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a1881539276ef5da515556e475b2574c5" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>from_percent_of_180</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1abb1276047afbd4ea5af6cac6068bbde5" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>from_percent_of_360</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a053168a91b60d2011ca67427f0bd3878" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>from_percent_of_360</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1ae47dbab360ee9809460e09793f86939b" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>from_radians</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a0b9c30f304ec6851e032dfc15dab6d85" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>get_wrapped</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1aef3f8810c67f646d63e94c8d537d5c1d" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator*=</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a0e16d861fa57b7b1a0254a89ecc978d9" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator+=</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a4d6f4ccc56e03010af9e0db459a7c798" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator-</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1acecd897faba74308c57a9c1e2c6a664c" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator-=</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a90cbde1b0dbc921e8a8a9544260aad3c" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>operator/=</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1af90116018426f8207b9ba2d70793fddd" prot="private" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>radians</name></member>
      <member refid="structeuphoria_1_1core_1_1Angle_1a22341a721e8c459febd453c679315c2b" prot="public" virt="non-virtual"><scope>euphoria::core::Angle</scope><name>wrap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structeuphoria_1_1core_1_1Chatbot" kind="struct" language="C++" prot="public">
    <compoundname>euphoria::core::Chatbot</compoundname>
    <includes refid="chatbot_8h" local="no">chatbot.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1adaf7b48f3c947febed3c309eee764955" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool euphoria::core::Chatbot::is_in_conversation</definition>
        <argsstring></argsstring>
        <name>is_in_conversation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="182" column="14" bodyfile="libs/core/src/core/chatbot.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1a9c8104f4c96e2b485adccb605a8b2309" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int euphoria::core::Chatbot::last_event</definition>
        <argsstring></argsstring>
        <name>last_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="183" column="13" bodyfile="libs/core/src/core/chatbot.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1ae95af0b848b279d3fa4e19589cf61861" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long euphoria::core::Chatbot::max_responses</definition>
        <argsstring></argsstring>
        <name>max_responses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="184" column="23" bodyfile="libs/core/src/core/chatbot.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1a02cfc0dfb1410adba9da2235bf8ba183" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::Chatbot::last_input</definition>
        <argsstring></argsstring>
        <name>last_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="185" column="21" bodyfile="libs/core/src/core/chatbot.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1aab8c0f0f67e28402a693d0e517e7de41" prot="public" static="no" mutable="no">
        <type><ref refid="structeuphoria_1_1core_1_1Random" kindref="compound">core::Random</ref></type>
        <definition>core::Random euphoria::core::Chatbot::random</definition>
        <argsstring></argsstring>
        <name>random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="186" column="22" bodyfile="libs/core/src/core/chatbot.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1a45274012692dac43e2ddcae6cc058a21" prot="public" static="no" mutable="no">
        <type><ref refid="structeuphoria_1_1core_1_1detail_1_1Transposer" kindref="compound">detail::Transposer</ref></type>
        <definition>detail::Transposer euphoria::core::Chatbot::transposer</definition>
        <argsstring></argsstring>
        <name>transposer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="187" column="28" bodyfile="libs/core/src/core/chatbot.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1a82ad632007c23eb0afbe3235348e8643" prot="public" static="no" mutable="no">
        <type><ref refid="structeuphoria_1_1core_1_1detail_1_1Database" kindref="compound">detail::Database</ref></type>
        <definition>detail::Database euphoria::core::Chatbot::database</definition>
        <argsstring></argsstring>
        <name>database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="188" column="26" bodyfile="libs/core/src/core/chatbot.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1a94c47373d8174e04948bc1147e57ab96" prot="public" static="no" mutable="no">
        <type><ref refid="structeuphoria_1_1core_1_1detail_1_1ConversationTopics" kindref="compound">detail::ConversationTopics</ref></type>
        <definition>detail::ConversationTopics euphoria::core::Chatbot::current_topics</definition>
        <argsstring></argsstring>
        <name>current_topics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="189" column="36" bodyfile="libs/core/src/core/chatbot.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1af8d728861117d1c5a3da22edcbbc0166" prot="public" static="no" mutable="no">
        <type>std::deque&lt; std::string &gt;</type>
        <definition>std::deque&lt;std::string&gt; euphoria::core::Chatbot::last_responses</definition>
        <argsstring></argsstring>
        <name>last_responses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="190" column="20" bodyfile="libs/core/src/core/chatbot.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1af5396aa56630c7438b2b071f5a701a27" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structeuphoria_1_1core_1_1detail_1_1ConversationStatus" kindref="compound">detail::ConversationStatus</ref> &gt;</type>
        <definition>std::vector&lt;detail::ConversationStatus&gt; euphoria::core::Chatbot::history</definition>
        <argsstring></argsstring>
        <name>history</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="191" column="21" bodyfile="libs/core/src/core/chatbot.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeuphoria_1_1core_1_1Chatbot_1a36a423a08ea041c857b79fc9964ae39b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; euphoria::core::Chatbot::missing_input</definition>
        <argsstring></argsstring>
        <name>missing_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="192" column="21" bodyfile="libs/core/src/core/chatbot.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Chatbot_1ac3c512be46b79221bad2de9136db4ca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>euphoria::core::Chatbot::Chatbot</definition>
        <argsstring>()</argsstring>
        <name>Chatbot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="194" column="9" bodyfile="libs/core/src/core/chatbot.cc" bodystart="403" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Chatbot_1ae455e0623a3b72b17b11834b4d43f87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::Chatbot::get_response</definition>
        <argsstring>(const std::string &amp;input)</argsstring>
        <name>get_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="201" column="22" bodyfile="libs/core/src/core/chatbot.cc" bodystart="413" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Chatbot_1a2cc6f7c1742b72c63c89e40b6f65b21a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1detail_1_1ConversationStatus" kindref="compound">detail::ConversationStatus</ref></type>
        <definition>detail::ConversationStatus euphoria::core::Chatbot::get_complex_response</definition>
        <argsstring>(const std::string &amp;input)</argsstring>
        <name>get_complex_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="203" column="37" bodyfile="libs/core/src/core/chatbot.cc" bodystart="585" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Chatbot_1a55290aa7f87a90e2ab4ba419c9be1948" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::Chatbot::get_sign_on_message</definition>
        <argsstring>()</argsstring>
        <name>get_sign_on_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="205" column="22" bodyfile="libs/core/src/core/chatbot.cc" bodystart="779" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Chatbot_1ac23f62d8a5cf8554dad4579623feb9c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::Chatbot::debug_last_response</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;search=std::vector&lt; std::string &gt;{}) const</argsstring>
        <name>debug_last_response</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>search</declname>
          <defval>std::vector&lt; std::string &gt;{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="207" column="22" bodyfile="libs/core/src/core/chatbot.cc" bodystart="785" bodyend="839"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeuphoria_1_1core_1_1Chatbot_1a7c1e044da4727938452c5cadadce6562" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeuphoria_1_1core_1_1Chatbot" kindref="compound">Chatbot</ref> &gt;</type>
        <definition>std::optional&lt; Chatbot &gt; euphoria::core::Chatbot::load_from_file</definition>
        <argsstring>(vfs::FileSystem *fs, const vfs::FilePath &amp;path)</argsstring>
        <name>load_from_file</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vfs_1_1FileSystem" kindref="compound">vfs::FileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1vfs_1_1FilePath" kindref="compound">vfs::FilePath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/chatbot.h" line="196" column="31" bodyfile="libs/core/src/core/chatbot.cc" bodystart="348" bodyend="400"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>euphoria::core::detail::Transposer</label>
        <link refid="structeuphoria_1_1core_1_1detail_1_1Transposer"/>
      </node>
      <node id="4">
        <label>euphoria::core::Random</label>
        <link refid="structeuphoria_1_1core_1_1Random"/>
      </node>
      <node id="1">
        <label>euphoria::core::Chatbot</label>
        <link refid="structeuphoria_1_1core_1_1Chatbot"/>
        <childnode refid="2" relation="usage">
          <edgelabel>transposer</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>database</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>random</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>current_topics</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>euphoria::core::detail::Database</label>
        <link refid="structeuphoria_1_1core_1_1detail_1_1Database"/>
      </node>
      <node id="5">
        <label>euphoria::core::detail::ConversationTopics</label>
        <link refid="structeuphoria_1_1core_1_1detail_1_1ConversationTopics"/>
      </node>
    </collaborationgraph>
    <location file="libs/core/src/core/chatbot.h" line="181" column="1" bodyfile="libs/core/src/core/chatbot.h" bodystart="180" bodyend="211"/>
    <listofallmembers>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1ac3c512be46b79221bad2de9136db4ca6" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>Chatbot</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1a94c47373d8174e04948bc1147e57ab96" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>current_topics</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1a82ad632007c23eb0afbe3235348e8643" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>database</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1ac23f62d8a5cf8554dad4579623feb9c8" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>debug_last_response</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1a2cc6f7c1742b72c63c89e40b6f65b21a" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>get_complex_response</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1ae455e0623a3b72b17b11834b4d43f87e" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>get_response</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1a55290aa7f87a90e2ab4ba419c9be1948" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>get_sign_on_message</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1af5396aa56630c7438b2b071f5a701a27" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>history</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1adaf7b48f3c947febed3c309eee764955" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>is_in_conversation</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1a9c8104f4c96e2b485adccb605a8b2309" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>last_event</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1a02cfc0dfb1410adba9da2235bf8ba183" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>last_input</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1af8d728861117d1c5a3da22edcbbc0166" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>last_responses</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1a7c1e044da4727938452c5cadadce6562" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>load_from_file</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1ae95af0b848b279d3fa4e19589cf61861" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>max_responses</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1a36a423a08ea041c857b79fc9964ae39b" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>missing_input</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1aab8c0f0f67e28402a693d0e517e7de41" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>random</name></member>
      <member refid="structeuphoria_1_1core_1_1Chatbot_1a45274012692dac43e2ddcae6cc058a21" prot="public" virt="non-virtual"><scope>euphoria::core::Chatbot</scope><name>transposer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceeuphoria_1_1tests" kind="namespace" language="C++">
    <compoundname>euphoria::tests</compoundname>
    <innerclass refid="structeuphoria_1_1tests_1_1ApproxData" prot="public">euphoria::tests::ApproxData</innerclass>
    <innerclass refid="structeuphoria_1_1tests_1_1FalseString" prot="public">euphoria::tests::FalseString</innerclass>
    <innernamespace refid="namespaceeuphoria_1_1tests_1_1custom">euphoria::tests::custom</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1aa31ebced6618577bd4d1927130165e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(float const &amp;lhs, float const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type>float const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.cc" line="19" column="5" bodyfile="libs/tests/src/tests/approx.cc" bodystart="20" bodyend="46" declfile="libs/tests/src/tests/approx.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1ab6407498a1619ecf3cc42a77976fcbd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(const T &amp;lhs, const T &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="23" column="5" declfile="libs/tests/src/tests/approx.h" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1a64e527ea93e42dcabdfe4a618e639641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; euphoria::tests::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const custom::Approx&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1custom_1_1Approx" kindref="compound">custom::Approx</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="118" column="5" bodyfile="libs/tests/src/tests/approx.h" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1ae02370b2c32736a5062e894d62fd0a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1tests_1_1custom_1_1Approx" kindref="compound">custom::Approx</ref>&lt; T &gt;</type>
        <definition>custom::Approx&lt;T&gt; euphoria::tests::approx</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>approx</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx.h" line="129" column="5" bodyfile="libs/tests/src/tests/approx.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1a45cb83820ba85f469e31445ab0b39fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::vec3_approximately_equal</definition>
        <argsstring>(T const &amp;lhs, T const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>vec3_approximately_equal</name>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="7" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="7" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1ad2449d090dda79bcab54d64c6469ccb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(core::vec3f const &amp;lhs, core::vec3f const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vec3f" kindref="compound">core::vec3f</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vec3f" kindref="compound">core::vec3f</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="16" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="16" bodyend="22" declfile="libs/tests/src/tests/approx_equal.h" declline="15" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1afb51a7ffdd89f91732b30152c39ec9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(core::vec4f const &amp;lhs, core::vec4f const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vec4f" kindref="compound">core::vec4f</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1vec4f" kindref="compound">core::vec4f</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="26" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="26" bodyend="36" declfile="libs/tests/src/tests/approx_equal.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1af89fa7893836f092389d02ee23f92894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(core::rgb const &amp;lhs, core::rgb const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1rgb" kindref="compound">core::rgb</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1rgb" kindref="compound">core::rgb</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="40" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="40" bodyend="48" declfile="libs/tests/src/tests/approx_equal.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1a8442d5cb188fac1def19b1fe80e9a80a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(core::Hsl const &amp;lhs, core::Hsl const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">core::Hsl</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1Hsl" kindref="compound">core::Hsl</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="52" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="52" bodyend="60" declfile="libs/tests/src/tests/approx_equal.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1ac5a241fcd9a5beddb0770582e2c31df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(core::unit3f const &amp;lhs, core::unit3f const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1unit3f" kindref="compound">core::unit3f</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1unit3f" kindref="compound">core::unit3f</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="64" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="64" bodyend="70" declfile="libs/tests/src/tests/approx_equal.h" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1acfe8efcdbb5116fdb8940e9ac6091c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(core::rgba const &amp;lhs, core::rgba const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1rgba" kindref="compound">core::rgba</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1rgba" kindref="compound">core::rgba</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="74" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="74" bodyend="83" declfile="libs/tests/src/tests/approx_equal.h" declline="36" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1ad532f0a39976620d5b180fc4274c6610" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(core::quatf const &amp;lhs, core::quatf const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1quatf" kindref="compound">core::quatf</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1quatf" kindref="compound">core::quatf</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="88" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="88" bodyend="94" declfile="libs/tests/src/tests/approx_equal.h" declline="57" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1ae19383bce0b2b34f683ac816460b0f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(core::AxisAngle const &amp;lhs, core::AxisAngle const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1AxisAngle" kindref="compound">core::AxisAngle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1AxisAngle" kindref="compound">core::AxisAngle</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="98" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="98" bodyend="121" declfile="libs/tests/src/tests/approx_equal.h" declline="64" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1a73973367fe15ce7276d25a35884bec62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool euphoria::tests::approximately_equal</definition>
        <argsstring>(core::mat4f const &amp;lhs, core::mat4f const &amp;rhs, const ApproxData &amp;data)</argsstring>
        <name>approximately_equal</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1mat4f" kindref="compound">core::mat4f</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1mat4f" kindref="compound">core::mat4f</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1ApproxData" kindref="compound">ApproxData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/approx_equal.cc" line="126" column="5" bodyfile="libs/tests/src/tests/approx_equal.cc" bodystart="126" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1a6b0818f8fa34097174bbc3b922849796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; euphoria::tests::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;s, const FalseString &amp;f)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structeuphoria_1_1tests_1_1FalseString" kindref="compound">FalseString</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/falsestring.cc" line="25" column="5" bodyfile="libs/tests/src/tests/falsestring.cc" bodystart="26" bodyend="37" declfile="libs/tests/src/tests/falsestring.h" declline="19" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1a7a3d00547a57de48ea4c1529e7bf841d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1tests_1_1FalseString" kindref="compound">FalseString</ref></type>
        <definition>FalseString euphoria::tests::string_is_equal</definition>
        <argsstring>(const std::string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>string_is_equal</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/stringeq.cc" line="24" column="5" bodyfile="libs/tests/src/tests/stringeq.cc" bodystart="24" bodyend="46" declfile="libs/tests/src/tests/stringeq.h" declline="25" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1ac485f57be882b0ded9d838efffc37c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1tests_1_1FalseString" kindref="compound">FalseString</ref></type>
        <definition>FalseString euphoria::tests::string_is_equal</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;lhs, const std::vector&lt; std::string &gt; &amp;rhs)</argsstring>
        <name>string_is_equal</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/stringeq.cc" line="50" column="5" bodyfile="libs/tests/src/tests/stringeq.cc" bodystart="50" bodyend="99" declfile="libs/tests/src/tests/stringeq.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1a1984913d1783cb5ac3e3782ee1b1a0b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TToString</type>
          </param>
          <param>
            <type>typename TCompare</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeuphoria_1_1tests_1_1FalseString" kindref="compound">FalseString</ref></type>
        <definition>FalseString euphoria::tests::vector_is_equal</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;lhs, const std::vector&lt; T &gt; &amp;rhs, TToString to_string_functor, TCompare compare_functor)</argsstring>
        <name>vector_is_equal</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>TToString</type>
          <declname>to_string_functor</declname>
        </param>
        <param>
          <type>TCompare</type>
          <declname>compare_functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/vectorequals.h" line="23" column="5" bodyfile="libs/tests/src/tests/vectorequals.h" bodystart="24" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1a1a8ab251abd8122e0ec6133bb9f946f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TConverter</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string euphoria::tests::vector_to_string_impl</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v, bool one_line, TConverter converter)</argsstring>
        <name>vector_to_string_impl</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>one_line</declname>
        </param>
        <param>
          <type>TConverter</type>
          <declname>converter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/vectortostring.h" line="14" column="5" bodyfile="libs/tests/src/tests/vectortostring.h" bodystart="15" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1a6d887d1b17e0683f939e273080cd8daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TConverter</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::string, bool &gt;</type>
        <definition>std::pair&lt;std::string, bool&gt; euphoria::tests::vector_to_string_ex</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v, TConverter converter)</argsstring>
        <name>vector_to_string_ex</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>TConverter</type>
          <declname>converter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/vectortostring.h" line="49" column="5" bodyfile="libs/tests/src/tests/vectortostring.h" bodystart="49" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1tests_1aea430be31175cac1a8ed712253dd19ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TConverter</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string euphoria::tests::vector_to_string</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v, TConverter converter)</argsstring>
        <name>vector_to_string</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>TConverter</type>
          <declname>converter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/tests/src/tests/vectortostring.h" line="72" column="5" bodyfile="libs/tests/src/tests/vectortostring.h" bodystart="72" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/tests/src/tests/approx.cc" line="16" column="1"/>
  </compounddef>
</doxygen>

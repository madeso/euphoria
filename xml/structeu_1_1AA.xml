<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structeu_1_1AA" kind="struct" language="C++" prot="public">
    <compoundname>eu::AA</compoundname>
    <includes refid="axisangle_8h" local="no">axisangle.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structeu_1_1AA_1a517bd92c9485430787c833f68eb42379" prot="public" static="no" mutable="no">
        <type><ref refid="structeu_1_1n3" kindref="compound">n3</ref></type>
        <definition>n3 eu::AA::axis</definition>
        <argsstring></argsstring>
        <name>axis</name>
        <qualifiedname>eu::AA::axis</qualifiedname>
        <briefdescription>
<para>a unit-vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/axisangle.h" line="21" column="12" bodyfile="libs/base/src/base/axisangle.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeu_1_1AA_1a0ef36e1500a96f32d75602e9a53596da" prot="public" static="no" mutable="no">
        <type><ref refid="structeu_1_1An" kindref="compound">An</ref></type>
        <definition>An eu::AA::angle</definition>
        <argsstring></argsstring>
        <name>angle</name>
        <qualifiedname>eu::AA::angle</qualifiedname>
        <briefdescription>
<para>rotation according to right-hand rule </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/axisangle.h" line="24" column="12" bodyfile="libs/base/src/base/axisangle.h" bodystart="24" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structeu_1_1AA_1af1690aab94c15e9db117c61ea3265e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eu::AA::AA</definition>
        <argsstring>(const n3 &amp;ax, const An &amp;ang)</argsstring>
        <name>AA</name>
        <qualifiedname>eu::AA::AA</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1n3" kindref="compound">n3</ref> &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1An" kindref="compound">An</ref> &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/axisangle.h" line="26" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeu_1_1AA_1aa12744e9510b1a6de37d85d0c326eafc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structeu_1_1AA" kindref="compound">AA</ref> &gt;</type>
        <definition>static std::optional&lt; AA &gt; eu::AA::from</definition>
        <argsstring>(const Q &amp;q)</argsstring>
        <name>from</name>
        <qualifiedname>eu::AA::from</qualifiedname>
        <param>
          <type><ref refid="structeu_1_1R" kindref="compound">const</ref> <ref refid="structeu_1_1Q" kindref="compound">Q</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/axisangle.h" line="28" column="31"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Axis + Angle. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>eu::AA</label>
        <link refid="structeu_1_1AA"/>
        <childnode refid="2" relation="usage">
          <edgelabel>axis</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>angle</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>eu::An</label>
        <link refid="structeu_1_1An"/>
      </node>
      <node id="2">
        <label>eu::n3</label>
        <link refid="structeu_1_1n3"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>eu::v3</label>
        <link refid="structeu_1_1v3"/>
      </node>
    </collaborationgraph>
    <location file="libs/base/src/base/axisangle.h" line="18" column="5" bodyfile="libs/base/src/base/axisangle.h" bodystart="19" bodyend="29"/>
    <listofallmembers>
      <member refid="structeu_1_1AA_1af1690aab94c15e9db117c61ea3265e8a" prot="public" virt="non-virtual"><scope>eu::AA</scope><name>AA</name></member>
      <member refid="structeu_1_1AA_1a0ef36e1500a96f32d75602e9a53596da" prot="public" virt="non-virtual"><scope>eu::AA</scope><name>angle</name></member>
      <member refid="structeu_1_1AA_1a517bd92c9485430787c833f68eb42379" prot="public" virt="non-virtual"><scope>eu::AA</scope><name>axis</name></member>
      <member refid="structeu_1_1AA_1aa12744e9510b1a6de37d85d0c326eafc" prot="public" virt="non-virtual"><scope>eu::AA</scope><name>from</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

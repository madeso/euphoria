<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceeuphoria_1_1core_1_1tracery" kind="namespace" language="C++">
    <compoundname>euphoria::core::tracery</compoundname>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1GeneratorArgument" prot="public">euphoria::core::tracery::GeneratorArgument</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1LiteralStringNode" prot="public">euphoria::core::tracery::LiteralStringNode</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1ActionRule" prot="public">euphoria::core::tracery::ActionRule</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1CallSymbolNode" prot="public">euphoria::core::tracery::CallSymbolNode</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1Result" prot="public">euphoria::core::tracery::Result</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1Node" prot="public">euphoria::core::tracery::Node</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1Modifier" prot="public">euphoria::core::tracery::Modifier</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1Rule" prot="public">euphoria::core::tracery::Rule</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1Symbol" prot="public">euphoria::core::tracery::Symbol</innerclass>
    <innerclass refid="structeuphoria_1_1core_1_1tracery_1_1Grammar" prot="public">euphoria::core::tracery::Grammar</innerclass>
    <innernamespace refid="namespaceeuphoria_1_1core_1_1tracery_1_1english">euphoria::core::tracery::english</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1tracery_1af8362da8a31439c7aeb3051b2f4a8ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1tracery_1_1Result" kindref="compound">Result</ref></type>
        <definition>Result euphoria::core::tracery::parse_json</definition>
        <argsstring>(Symbol *rule, const ::tracery::Rule &amp;value)</argsstring>
        <name>parse_json</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1tracery_1_1Symbol" kindref="compound">Symbol</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>const ::<ref refid="structeuphoria_1_1core_1_1tracery_1_1Rule" kindref="compound">tracery::Rule</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/tracery.cc" line="31" column="5" bodyfile="libs/core/src/core/tracery.cc" bodystart="31" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1tracery_1a5424fc4534bfea1e87ab2fb24f53e4ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1tracery_1_1Result" kindref="compound">Result</ref></type>
        <definition>Result euphoria::core::tracery::from_json</definition>
        <argsstring>(Symbol *rule, const ::tracery::Rule &amp;value)</argsstring>
        <name>from_json</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1tracery_1_1Symbol" kindref="compound">Symbol</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>const ::<ref refid="structeuphoria_1_1core_1_1tracery_1_1Rule" kindref="compound">tracery::Rule</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/tracery.cc" line="47" column="5" bodyfile="libs/core/src/core/tracery.cc" bodystart="47" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1tracery_1abc4a53a6bb962ebbb029c19d96560b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1tracery_1_1Result" kindref="compound">Result</ref></type>
        <definition>Result euphoria::core::tracery::parse_json</definition>
        <argsstring>(Symbol *rule, const rapidjson::Value &amp;value)</argsstring>
        <name>parse_json</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1tracery_1_1Symbol" kindref="compound">Symbol</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>const rapidjson::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/tracery.cc" line="63" column="5" bodyfile="libs/core/src/core/tracery.cc" bodystart="63" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1tracery_1ab309cb9774b6c2b8be22671cb3b86ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1tracery_1_1Result" kindref="compound">Result</ref></type>
        <definition>Result euphoria::core::tracery::from_json</definition>
        <argsstring>(Symbol *rule, const rapidjson::Value &amp;value)</argsstring>
        <name>from_json</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1tracery_1_1Symbol" kindref="compound">Symbol</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>const rapidjson::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/tracery.cc" line="97" column="5" bodyfile="libs/core/src/core/tracery.cc" bodystart="97" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1tracery_1ae326cbf2e9ac1542cf168bb17c245efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::tracery::to_string</definition>
        <argsstring>(const Result &amp;r)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="structeuphoria_1_1core_1_1tracery_1_1Result" kindref="compound">Result</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/tracery.cc" line="226" column="17" bodyfile="libs/core/src/core/tracery.cc" bodystart="226" bodyend="249" declfile="libs/core/src/core/tracery.h" declline="43" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1tracery_1abbcbfd903e49286189a2b8d1c79afa59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuphoria_1_1core_1_1tracery_1_1Result" kindref="compound">Result</ref></type>
        <definition>Result euphoria::core::tracery::parse_error</definition>
        <argsstring>(TextfileParser *parser)</argsstring>
        <name>parse_error</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1TextfileParser" kindref="compound">TextfileParser</ref> *</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/tracery.cc" line="258" column="12" bodyfile="libs/core/src/core/tracery.cc" bodystart="258" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeuphoria_1_1core_1_1tracery_1a33d808a7a77009d69143bbbebad7b155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string euphoria::core::tracery::read_tracery_ident</definition>
        <argsstring>(TextfileParser *parser)</argsstring>
        <name>read_tracery_ident</name>
        <param>
          <type><ref refid="structeuphoria_1_1core_1_1TextfileParser" kindref="compound">TextfileParser</ref> *</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/tracery.cc" line="265" column="17" bodyfile="libs/core/src/core/tracery.cc" bodystart="265" bodyend="279"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/tracery.cc" line="18" column="1"/>
  </compounddef>
</doxygen>

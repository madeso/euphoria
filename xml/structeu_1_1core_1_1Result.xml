<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structeu_1_1core_1_1Result" kind="struct" language="C++" prot="public">
    <compoundname>eu::core::Result</compoundname>
    <includes refid="result_8h" local="no">result.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structeu_1_1core_1_1Result_1a902f68f90a16ee8f9fe891b749e8c12a" prot="private" static="no" mutable="no">
        <type>std::optional&lt; T &gt;</type>
        <definition>std::optional&lt;T&gt; eu::core::Result&lt; T &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/result.h" line="51" column="23" bodyfile="libs/core/src/core/result.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structeu_1_1core_1_1Result_1a7abf248f7a4d2739b8553a4952449d8b" prot="private" static="no" mutable="no">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; eu::core::Result&lt; T &gt;::error</definition>
        <argsstring></argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/result.h" line="52" column="23" bodyfile="libs/core/src/core/result.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structeu_1_1core_1_1Result_1a55933664f2108cba2f4a3aa6cbb107c1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeu_1_1core_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>static Result&lt;T&gt; eu::core::Result&lt; T &gt;::create_value</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>create_value</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/result.h" line="13" column="23" bodyfile="libs/core/src/core/result.h" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="structeu_1_1core_1_1Result_1ad195c2cd4e046d8fe59d26ad823d2604" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeu_1_1core_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>static Result&lt;T&gt; eu::core::Result&lt; T &gt;::create_error</definition>
        <argsstring>(const std::string &amp;error=&quot;&quot;)</argsstring>
        <name>create_error</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>error</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/result.h" line="19" column="23" bodyfile="libs/core/src/core/result.h" bodystart="19" bodyend="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeu_1_1core_1_1Result_1a2325f0ede55e381e6184cf2b5f4c0f2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; eu::core::Result&lt; T &gt;::get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/result.h" line="28" column="17" bodyfile="libs/core/src/core/result.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structeu_1_1core_1_1Result_1a5dc002dae8175ad3589d333b3fa4e844" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; eu::core::Result&lt; T &gt;::get_error</definition>
        <argsstring>() const</argsstring>
        <name>get_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/result.h" line="34" column="27" bodyfile="libs/core/src/core/result.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="structeu_1_1core_1_1Result_1a63d377bb5bc1f62e4fd7a6df476ba353" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>eu::core::Result&lt; T &gt;::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/result.h" line="39" column="9" bodyfile="libs/core/src/core/result.h" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="structeu_1_1core_1_1Result_1a9d87c02634083b1a46baefa98d571d39" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; eu::core::Result&lt; T &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/result.h" line="46" column="17" bodyfile="libs/core/src/core/result.h" bodystart="46" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structeu_1_1core_1_1Result_1a8f871095a39677ec9829897c17bd73a2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>eu::core::Result&lt; T &gt;::Result</definition>
        <argsstring>(const std::optional&lt; T &gt; &amp;v, const std::optional&lt; std::string &gt; &amp;e)</argsstring>
        <name>Result</name>
        <param>
          <type>const std::optional&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::optional&lt; std::string &gt; &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/core/src/core/result.h" line="54" column="9" bodyfile="libs/core/src/core/result.h" bodystart="55" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/core/src/core/result.h" line="10" column="5" bodyfile="libs/core/src/core/result.h" bodystart="11" bodyend="63"/>
    <listofallmembers>
      <member refid="structeu_1_1core_1_1Result_1ad195c2cd4e046d8fe59d26ad823d2604" prot="public" virt="non-virtual"><scope>eu::core::Result</scope><name>create_error</name></member>
      <member refid="structeu_1_1core_1_1Result_1a55933664f2108cba2f4a3aa6cbb107c1" prot="public" virt="non-virtual"><scope>eu::core::Result</scope><name>create_value</name></member>
      <member refid="structeu_1_1core_1_1Result_1a7abf248f7a4d2739b8553a4952449d8b" prot="private" virt="non-virtual"><scope>eu::core::Result</scope><name>error</name></member>
      <member refid="structeu_1_1core_1_1Result_1a5dc002dae8175ad3589d333b3fa4e844" prot="public" virt="non-virtual"><scope>eu::core::Result</scope><name>get_error</name></member>
      <member refid="structeu_1_1core_1_1Result_1a2325f0ede55e381e6184cf2b5f4c0f2f" prot="public" virt="non-virtual"><scope>eu::core::Result</scope><name>get_value</name></member>
      <member refid="structeu_1_1core_1_1Result_1a63d377bb5bc1f62e4fd7a6df476ba353" prot="public" virt="non-virtual"><scope>eu::core::Result</scope><name>operator bool</name></member>
      <member refid="structeu_1_1core_1_1Result_1a9d87c02634083b1a46baefa98d571d39" prot="public" virt="non-virtual"><scope>eu::core::Result</scope><name>operator*</name></member>
      <member refid="structeu_1_1core_1_1Result_1a8f871095a39677ec9829897c17bd73a2" prot="private" virt="non-virtual"><scope>eu::core::Result</scope><name>Result</name></member>
      <member refid="structeu_1_1core_1_1Result_1a902f68f90a16ee8f9fe891b749e8c12a" prot="private" virt="non-virtual"><scope>eu::core::Result</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="group__math" kind="group">
    <compoundname>math</compoundname>
    <title>Math</title>
    <innerclass refid="structeu_1_1An" prot="public">eu::An</innerclass>
    <innerclass refid="structeu_1_1AA" prot="public">eu::AA</innerclass>
    <innerclass refid="structeu_1_1Ypr" prot="public">eu::Ypr</innerclass>
    <innerclass refid="structeu_1_1m4" prot="public">eu::m4</innerclass>
    <innerclass refid="structeu_1_1Q" prot="public">eu::Q</innerclass>
    <innerclass refid="structeu_1_1R" prot="public">eu::R</innerclass>
    <innerclass refid="structeu_1_1v2" prot="public">eu::v2</innerclass>
    <innerclass refid="structeu_1_1n2" prot="public">eu::n2</innerclass>
    <innerclass refid="structeu_1_1v3" prot="public">eu::v3</innerclass>
    <innerclass refid="structeu_1_1n3" prot="public">eu::n3</innerclass>
    <innerclass refid="structeu_1_1v4" prot="public">eu::v4</innerclass>
    <innernamespace refid="namespaceeu_1_1common">eu::common</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="group__math_1gaad753d4f4d3024b2f9b0366738751511" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr An</type>
        <definition>constexpr An eu::one_turn</definition>
        <argsstring></argsstring>
        <name>one_turn</name>
        <qualifiedname>eu::one_turn</qualifiedname>
        <initializer>= An::from_radians(pi * 2.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="86" column="18" bodyfile="libs/base/src/base/angle.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1ga03d368230871c29cd8d4464edd37081d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr An</type>
        <definition>constexpr An eu::half_turn</definition>
        <argsstring></argsstring>
        <name>half_turn</name>
        <qualifiedname>eu::half_turn</qualifiedname>
        <initializer>= An::from_radians(pi)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="87" column="18" bodyfile="libs/base/src/base/angle.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1ga795093272e2f8a2748665fd8a37e5d91" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr An</type>
        <definition>constexpr An eu::quarter_turn</definition>
        <argsstring></argsstring>
        <name>quarter_turn</name>
        <qualifiedname>eu::quarter_turn</qualifiedname>
        <initializer>= An::from_radians(pi / 2.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="88" column="18" bodyfile="libs/base/src/base/angle.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1ga22905decd86a4bf45c79c109119f2b6f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr An</type>
        <definition>constexpr An eu::no_rotation</definition>
        <argsstring></argsstring>
        <name>no_rotation</name>
        <qualifiedname>eu::no_rotation</qualifiedname>
        <initializer>= An::from_radians(0.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="89" column="18" bodyfile="libs/base/src/base/angle.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1ga5957f0b19a66d6e1123f22d681e726e0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr m4</type>
        <definition>constexpr m4 eu::m4_identity</definition>
        <argsstring></argsstring>
        <name>m4_identity</name>
        <qualifiedname>eu::m4_identity</qualifiedname>
        <initializer>= m4::from_scalar(1)</initializer>
        <briefdescription>
<para>The identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.h" line="175" column="18" bodyfile="libs/base/src/base/mat4.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1ga25eb222abfe7c9e7f34d6f19ed40c1a0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float eu::pi</definition>
        <argsstring></argsstring>
        <name>pi</name>
        <qualifiedname>eu::pi</qualifiedname>
        <initializer>= 3.1415926535897932384626433832795f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="89" column="21" bodyfile="libs/base/src/base/numeric.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1ga074a5f400069f641ce3857da18d65d93" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr Q</type>
        <definition>constexpr Q eu::q_identity</definition>
        <argsstring></argsstring>
        <name>q_identity</name>
        <qualifiedname>eu::q_identity</qualifiedname>
        <initializer>= Q(1, v3(0, 0, 0))</initializer>
        <briefdescription>
<para>The identity quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="123" column="17" bodyfile="libs/base/src/base/quat.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1ga1762260135f2b7b538f1b8be43146481" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr R&lt; float &gt;</type>
        <definition>constexpr R&lt;float&gt; eu::r01</definition>
        <argsstring></argsstring>
        <name>r01</name>
        <qualifiedname>eu::r01</qualifiedname>
        <initializer>= { 0.0f, 1.0f}</initializer>
        <briefdescription>
<para>A range going from 0 to 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="52" column="17" bodyfile="libs/base/src/base/range.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1gab44633bc6b6ae7cbf3e473fe917d1e70" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr R&lt; float &gt;</type>
        <definition>constexpr R&lt;float&gt; eu::r11</definition>
        <argsstring></argsstring>
        <name>r11</name>
        <qualifiedname>eu::r11</qualifiedname>
        <initializer>= { -1.0f, 1.0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="55" column="17" bodyfile="libs/base/src/base/range.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1ga5fac55b859c3ed3d22eac1245737524f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr v2</type>
        <definition>constexpr v2 eu::zero2f</definition>
        <argsstring></argsstring>
        <name>zero2f</name>
        <qualifiedname>eu::zero2f</qualifiedname>
        <initializer>= v2{ 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="70" column="18" bodyfile="libs/base/src/base/vec2.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="variable" id="group__math_1gaf1a49fc9a55b790e9d31a82a0aa3c6db" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr v3</type>
        <definition>constexpr v3 eu::zero3f</definition>
        <argsstring></argsstring>
        <name>zero3f</name>
        <qualifiedname>eu::zero3f</qualifiedname>
        <initializer>= v3{0.0f, 0.0f, 0.0f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="86" column="18" bodyfile="libs/base/src/base/vec3.h" bodystart="86" bodyend="86"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__math_1ga3cbb6d297bb58186cf62a6faccaecc9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::sin</definition>
        <argsstring>(const An &amp;ang)</argsstring>
        <name>sin</name>
        <qualifiedname>eu::sin</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="92" column="11" declfile="libs/base/src/base/angle.h" declline="92" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gae6beaf44514cc6ed0e0868cde5ff1ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::cos</definition>
        <argsstring>(const An &amp;ang)</argsstring>
        <name>cos</name>
        <qualifiedname>eu::cos</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="93" column="11" declfile="libs/base/src/base/angle.h" declline="93" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga516772ab56ddbef8fdfb9b155219fe89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::tan</definition>
        <argsstring>(const An &amp;ang)</argsstring>
        <name>tan</name>
        <qualifiedname>eu::tan</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="94" column="11" declfile="libs/base/src/base/angle.h" declline="94" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gacc962f319f4b97d3a3b72cf4ecd0fd17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::asin</definition>
        <argsstring>(float v)</argsstring>
        <name>asin</name>
        <qualifiedname>eu::asin</qualifiedname>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="95" column="8" declfile="libs/base/src/base/angle.h" declline="95" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga541d45e26c450d76a511c7e3c753b0ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::acos</definition>
        <argsstring>(float v)</argsstring>
        <name>acos</name>
        <qualifiedname>eu::acos</qualifiedname>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="96" column="8" declfile="libs/base/src/base/angle.h" declline="96" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gae46ea0693c249adaf3485667bce0d9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::atan</definition>
        <argsstring>(float v)</argsstring>
        <name>atan</name>
        <qualifiedname>eu::atan</qualifiedname>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="97" column="8" declfile="libs/base/src/base/angle.h" declline="97" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga8de0a9fb14b3fcf5466c96ba6a503c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::atan2</definition>
        <argsstring>(float y, float x)</argsstring>
        <name>atan2</name>
        <qualifiedname>eu::atan2</qualifiedname>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="98" column="8" declfile="libs/base/src/base/angle.h" declline="98" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaddb270c0f4a5cc2ddd647b52208e2192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::operator+</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const An &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="100" column="8" declfile="libs/base/src/base/angle.h" declline="100" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaa5ac4cace5f29e16ecaf5065f56a3b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::operator-</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const An &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="101" column="8" declfile="libs/base/src/base/angle.h" declline="101" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gae19fc15fd3b494668d1040e9125aa1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::operator*</definition>
        <argsstring>(const An &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="102" column="8" declfile="libs/base/src/base/angle.h" declline="102" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga70234da8d6bce29f0ce528b1f1c04dad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::operator/</definition>
        <argsstring>(const An &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>eu::operator/</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="103" column="8" declfile="libs/base/src/base/angle.h" declline="103" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga513f443e6cc11c48dd05de3e5dfb5ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::operator*</definition>
        <argsstring>(float rhs, const An &amp;lhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const An &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="104" column="8" declfile="libs/base/src/base/angle.h" declline="104" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gafa7f170a2c4415e5c9f4d517b138a489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const An &amp;a)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="106" column="17" declfile="libs/base/src/base/angle.h" declline="106" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga37aec4a04518d899030ef13b9bfdb231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator&lt;</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>eu::operator&lt;</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const An &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="108" column="5" declfile="libs/base/src/base/angle.h" declline="108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gadbbd7ab52e37fdc56cd66e0920a813e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator&lt;=</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>eu::operator&lt;=</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const An &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="109" column="5" declfile="libs/base/src/base/angle.h" declline="109" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaa3e88f63b802a9db740a821f312e6556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator&gt;</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>eu::operator&gt;</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const An &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="110" column="10" declfile="libs/base/src/base/angle.h" declline="110" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaf8448b714bf16cc794b4a29bfac33e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eu::operator&gt;=</definition>
        <argsstring>(const An &amp;lhs, const An &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>eu::operator&gt;=</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const An &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="111" column="10" declfile="libs/base/src/base/angle.h" declline="111" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga0bade92aadaac348c9d69c311012401c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>An</type>
        <definition>An eu::lerp_angle</definition>
        <argsstring>(const An &amp;from, float v, const An &amp;to)</argsstring>
        <name>lerp_angle</name>
        <qualifiedname>eu::lerp_angle</qualifiedname>
        <param>
          <type>const An &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const An &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/angle.h" line="113" column="8" declfile="libs/base/src/base/angle.h" declline="113" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gae9cc9ff4ed32a327a7e883617b9b7de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AA</type>
        <definition>AA eu::right_hand_around</definition>
        <argsstring>(const n3 &amp;axis, const An &amp;angle)</argsstring>
        <name>right_hand_around</name>
        <qualifiedname>eu::right_hand_around</qualifiedname>
        <param>
          <type>const n3 &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const An &amp;</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/axisangle.h" line="40" column="5" declfile="libs/base/src/base/axisangle.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaa507848ead7e3929ac34a5631d051638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const AA &amp;aa)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const AA &amp;</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/axisangle.h" line="42" column="17" declfile="libs/base/src/base/axisangle.h" declline="42" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gad902ccc075018be926b6d34aa5eb7d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const Ypr &amp;ypr)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const Ypr &amp;</type>
          <declname>ypr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/axisangle.h" line="43" column="17" declfile="libs/base/src/base/axisangle.h" declline="43" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga66e1820c967a20b5f47444560e472077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const m4 &amp;m)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const m4 &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Convert a matrix to a string representation, prefer fmt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.h" line="178" column="17" declfile="libs/base/src/base/mat4.h" declline="178" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gac6df9508643c5fd4c3492e047e9a932c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>m4</type>
        <definition>m4 eu::operator+</definition>
        <argsstring>(const m4 &amp;lhs, const m4 &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type>const m4 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const m4 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.h" line="180" column="8" declfile="libs/base/src/base/mat4.h" declline="180" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaf28a2e40d555474d81f7d62a6f02c726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>m4</type>
        <definition>m4 eu::operator-</definition>
        <argsstring>(const m4 &amp;lhs, const m4 &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type>const m4 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const m4 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.h" line="181" column="8" declfile="libs/base/src/base/mat4.h" declline="181" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gad0d155e66eaba7b173f177f04434b446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>m4</type>
        <definition>m4 eu::operator*</definition>
        <argsstring>(const m4 &amp;lhs, const m4 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>const m4 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const m4 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.h" line="182" column="8" declfile="libs/base/src/base/mat4.h" declline="182" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga71c65bf3f1b8eec74b96ffb0ea0103fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v4</type>
        <definition>v4 eu::operator*</definition>
        <argsstring>(const m4 &amp;lhs, const v4 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>const m4 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v4 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/mat4.h" line="183" column="8" declfile="libs/base/src/base/mat4.h" declline="183" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga6124e8a8479a4359c8aec7feee2651de" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float eu::abs</definition>
        <argsstring>(float r)</argsstring>
        <name>abs</name>
        <qualifiedname>eu::abs</qualifiedname>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="12" column="21" bodyfile="libs/base/src/base/numeric.h" bodystart="12" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga63cd526bac84ee9b0d7550d6c73657d5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool eu::is_zero</definition>
        <argsstring>(float r)</argsstring>
        <name>is_zero</name>
        <qualifiedname>eu::is_zero</qualifiedname>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="21" column="20" bodyfile="libs/base/src/base/numeric.h" bodystart="21" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga8e2e7f88b7732924df89619f76286878" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool eu::is_equal</definition>
        <argsstring>(float lhs, float rhs)</argsstring>
        <name>is_equal</name>
        <qualifiedname>eu::is_equal</qualifiedname>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="28" column="5" bodyfile="libs/base/src/base/numeric.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga18b5929af6c64c2b319d0f5709430afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::clamp_zero</definition>
        <argsstring>(float r)</argsstring>
        <name>clamp_zero</name>
        <qualifiedname>eu::clamp_zero</qualifiedname>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="34" column="5" declfile="libs/base/src/base/numeric.h" declline="34" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gac953ee0edbaff0e5063d4d697c66f627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::floor</definition>
        <argsstring>(float v)</argsstring>
        <name>floor</name>
        <qualifiedname>eu::floor</qualifiedname>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="37" column="5" declfile="libs/base/src/base/numeric.h" declline="37" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga82a16bae768ee6881fb591fddd27c507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::ceil</definition>
        <argsstring>(float v)</argsstring>
        <name>ceil</name>
        <qualifiedname>eu::ceil</qualifiedname>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="40" column="5" declfile="libs/base/src/base/numeric.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaf2fbc53ac0f3d3a135f913bf0e55abde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::floor_to_int</definition>
        <argsstring>(float v)</argsstring>
        <name>floor_to_int</name>
        <qualifiedname>eu::floor_to_int</qualifiedname>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="43" column="5" declfile="libs/base/src/base/numeric.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gae3fafe9e7e4edf309c645464e089d0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::ceil_to_int</definition>
        <argsstring>(float v)</argsstring>
        <name>ceil_to_int</name>
        <qualifiedname>eu::ceil_to_int</qualifiedname>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="46" column="5" declfile="libs/base/src/base/numeric.h" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga8f52df7e071a1911e8ccdfe482a4558f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eu::get_sign</definition>
        <argsstring>(float r)</argsstring>
        <name>get_sign</name>
        <qualifiedname>eu::get_sign</qualifiedname>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Calculates the sign as a positive or a negative int. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if r is greater than 0, -1 if not. </para>
</simplesect>
<simplesect kind="see"><para>Abs() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="54" column="5" declfile="libs/base/src/base/numeric.h" declline="54" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga1df61f8b3dbd8de93e41fb60b93db4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::get_sign</definition>
        <argsstring>(bool b)</argsstring>
        <name>get_sign</name>
        <qualifiedname>eu::get_sign</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>1</computeroutput> if <computeroutput>true</computeroutput> or -1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="59" column="5" declfile="libs/base/src/base/numeric.h" declline="59" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga3bd12ab44428ae8a36fd69bd74afef85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::lerp_float</definition>
        <argsstring>(float f, float scale, float t)</argsstring>
        <name>lerp_float</name>
        <qualifiedname>eu::lerp_float</qualifiedname>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="63" column="5" declfile="libs/base/src/base/numeric.h" declline="63" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga692b7283c3a58ab27de56366b3fadbd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::square</definition>
        <argsstring>(float r)</argsstring>
        <name>square</name>
        <qualifiedname>eu::square</qualifiedname>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Return <computeroutput>r * r</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="67" column="5" declfile="libs/base/src/base/numeric.h" declline="67" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga066452fba287c9fcb6a0188ea8424760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::sqrt</definition>
        <argsstring>(float r)</argsstring>
        <name>sqrt</name>
        <qualifiedname>eu::sqrt</qualifiedname>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="70" column="5" declfile="libs/base/src/base/numeric.h" declline="70" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaa4f3a1d68eda3b72dc542eca112fc1e3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float eu::min</definition>
        <argsstring>(float lhs, float rhs)</argsstring>
        <name>min</name>
        <qualifiedname>eu::min</qualifiedname>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="73" column="21" bodyfile="libs/base/src/base/numeric.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gafdb18ee646a157c1e7d64082029202bb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float eu::max</definition>
        <argsstring>(float lhs, float rhs)</argsstring>
        <name>max</name>
        <qualifiedname>eu::max</qualifiedname>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="74" column="21" bodyfile="libs/base/src/base/numeric.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga7d43cf27d1afca3da4e04b3b8451c9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::mod</definition>
        <argsstring>(float numer, float denumer)</argsstring>
        <name>mod</name>
        <qualifiedname>eu::mod</qualifiedname>
        <param>
          <type>float</type>
          <declname>numer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>denumer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="78" column="5" declfile="libs/base/src/base/numeric.h" declline="78" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga7ef41a3ef0020cdf027febcf7cb38db3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::round</definition>
        <argsstring>(float num, float gran)</argsstring>
        <name>round</name>
        <qualifiedname>eu::round</qualifiedname>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gran</declname>
        </param>
        <briefdescription>
<para>Rounds a value to the nearest nice value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the granularity is 1 the function rounds to the closest integer, at .5 the closest half integer, at 2 even integers etc... <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>the number to round </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gran</parametername>
</parameternamelist>
<parameterdescription>
<para>the granularity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="87" column="5" declfile="libs/base/src/base/numeric.h" declline="87" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaa74119d780a49aabca833a465dd27d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::get_default_if_close_to_zero</definition>
        <argsstring>(T value, T def, T epsilon)</argsstring>
        <name>get_default_if_close_to_zero</name>
        <qualifiedname>eu::get_default_if_close_to_zero</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T</type>
          <declname>def</declname>
        </param>
        <param>
          <type>T</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>If the <computeroutput>value</computeroutput> is close to zero, <computeroutput>def</computeroutput> is returned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="95" column="5" bodyfile="libs/base/src/base/numeric.h" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga5d5dc7f4ea7cac8493e9006180e9a657" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool eu::is_each_nth</definition>
        <argsstring>(I i, I each)</argsstring>
        <name>is_each_nth</name>
        <qualifiedname>eu::is_each_nth</qualifiedname>
        <param>
          <type>I</type>
          <declname>i</declname>
        </param>
        <param>
          <type>I</type>
          <declname>each</declname>
        </param>
        <briefdescription>
<para>returns true for a index each Nth loop. </para>
        </briefdescription>
        <detaileddescription>
<para>pass zero to always return false useful for example adding a newline each 10th or 15th line </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/numeric.h" line="105" column="5" bodyfile="libs/base/src/base/numeric.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gad4b8d21db1b1a25c346296eec35b330b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::dot</definition>
        <argsstring>(const Q &amp;lhs, const Q &amp;rhs)</argsstring>
        <name>dot</name>
        <qualifiedname>eu::dot</qualifiedname>
        <param>
          <type>const Q &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Q &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="125" column="11" declfile="libs/base/src/base/quat.h" declline="125" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga6214f288996499f35cf95e039b52e1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const Q &amp;v)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const Q &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Converts a quaternion to string, prefer fmt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="128" column="17" declfile="libs/base/src/base/quat.h" declline="128" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gae99fc2a026a0a7ac61fbc6281d530996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q</type>
        <definition>Q eu::operator*</definition>
        <argsstring>(const Q &amp;lhs, const Q &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>const Q &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Q &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="130" column="7" declfile="libs/base/src/base/quat.h" declline="130" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga74899d4681ffa6fdccd09f9588ba7661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q</type>
        <definition>Q eu::operator*</definition>
        <argsstring>(float scale, const Q &amp;q)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const Q &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="131" column="7" declfile="libs/base/src/base/quat.h" declline="131" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga4dde67115df3f842c8371817f87587d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q</type>
        <definition>Q eu::operator*</definition>
        <argsstring>(const Q &amp;q, float scale)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>const Q &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="132" column="7" declfile="libs/base/src/base/quat.h" declline="132" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga94c89d4216e30fc6ad3711eb540a25fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q</type>
        <definition>Q eu::operator+</definition>
        <argsstring>(const Q &amp;lhs, const Q &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type>const Q &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Q &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="133" column="7" declfile="libs/base/src/base/quat.h" declline="133" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gae807f257d9b667c1c45602b2d67ceafa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q</type>
        <definition>Q eu::operator-</definition>
        <argsstring>(const Q &amp;lhs, const Q &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type>const Q &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Q &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/quat.h" line="134" column="7" declfile="libs/base/src/base/quat.h" declline="134" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga53e78e428a56c4436a3a11a8c747cb4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>R&lt; T &gt;</type>
        <definition>R&lt; T &gt; eu::make_range</definition>
        <argsstring>(T min, T max)</argsstring>
        <name>make_range</name>
        <qualifiedname>eu::make_range</qualifiedname>
        <param>
          <type>T</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Create a range from <computeroutput>min</computeroutput> to <computeroutput>max</computeroutput> (inclusive) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="39" column="7" bodyfile="libs/base/src/base/range.h" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga572ae747813ec1771667ebd29d4c8144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>R&lt; T &gt;</type>
        <definition>R&lt; T &gt; eu::make_range</definition>
        <argsstring>(T max)</argsstring>
        <name>make_range</name>
        <qualifiedname>eu::make_range</qualifiedname>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Create a range from zero (0) to <computeroutput>max</computeroutput> (inclusive) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="46" column="7" bodyfile="libs/base/src/base/range.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga1d52a91adaa565513eb90b8d2dce2df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::from_01f</definition>
        <argsstring>(float lower_bound, float upper_bound, float value)</argsstring>
        <name>from_01f</name>
        <qualifiedname>eu::from_01f</qualifiedname>
        <param>
          <type>float</type>
          <declname>lower_bound</declname>
        </param>
        <param>
          <type>float</type>
          <declname>upper_bound</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="57" column="11" declfile="libs/base/src/base/range.h" declline="57" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaa18213902220185ad70feda7d212e55a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::from_01</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, float value)</argsstring>
        <name>from_01</name>
        <qualifiedname>eu::from_01</qualifiedname>
        <param>
          <type>const R&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a value in 0-1 range to a custom range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="61" column="7" bodyfile="libs/base/src/base/range.h" bodystart="61" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga71a5abeae01c3597f3e9d7371a7e9df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float eu::from_01</definition>
        <argsstring>(const R&lt; float &gt; &amp;range, float value)</argsstring>
        <name>from_01</name>
        <qualifiedname>eu::from_01</qualifiedname>
        <param>
          <type>const R&lt; float &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="79" column="11" declfile="libs/base/src/base/range.h" declline="79" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga4b358bd01ddb038d5d8d1dc62920e0ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float eu::to01</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, T value)</argsstring>
        <name>to01</name>
        <qualifiedname>eu::to01</qualifiedname>
        <param>
          <type>const R&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a value in a range to the 0-1 range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="83" column="11" bodyfile="libs/base/src/base/range.h" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga20dfd6271d0dde18b4cc12e2ddf8709f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::get360_angular</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, float value)</argsstring>
        <name>get360_angular</name>
        <qualifiedname>eu::get360_angular</qualifiedname>
        <param>
          <type>const R&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="91" column="7" bodyfile="libs/base/src/base/range.h" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga3081f17d05e200b8d7baddf4034c5c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::remap_to</definition>
        <argsstring>(const R&lt; F &gt; &amp;from, const R&lt; T &gt; &amp;to, F value)</argsstring>
        <name>remap_to</name>
        <qualifiedname>eu::remap_to</qualifiedname>
        <param>
          <type>const R&lt; F &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const R&lt; T &gt; &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>F</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Remaps a value from one range to another. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="101" column="7" bodyfile="libs/base/src/base/range.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga2c34413b1d29ccceb8d31b6b275c14bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eu::is_within</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, T value)</argsstring>
        <name>is_within</name>
        <qualifiedname>eu::is_within</qualifiedname>
        <param>
          <type>const R&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns true if a value is withing a range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="108" column="10" bodyfile="libs/base/src/base/range.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga2bcfebef199f602f177fe3da4b940d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::keep_within</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, T value)</argsstring>
        <name>keep_within</name>
        <qualifiedname>eu::keep_within</qualifiedname>
        <param>
          <type>const R&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns a value that is kept within the range. </para>
        </briefdescription>
        <detaileddescription>
<para>i.e the value can&apos;t go lower than the lower bound or higher than the higher bound <simplesect kind="see"><para>wrap </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="117" column="7" bodyfile="libs/base/src/base/range.h" bodystart="117" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga9624527e97e0cec9990cf1500a14d57e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eu::wrap</definition>
        <argsstring>(const R&lt; T &gt; &amp;range, T value)</argsstring>
        <name>wrap</name>
        <qualifiedname>eu::wrap</qualifiedname>
        <param>
          <type>const R&lt; T &gt; &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns a value that wraps around the range. </para>
        </briefdescription>
        <detaileddescription>
<para>When the value go outside the range, the value is wrapped back to either the start if exited at the end or vice versa. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/range.h" line="134" column="7" bodyfile="libs/base/src/base/range.h" bodystart="134" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga4800a7b85e537456b232d20a822b9cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v2</type>
        <definition>v2 eu::operator+</definition>
        <argsstring>(const v2 &amp;lhs, const v2 &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type>const v2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="100" column="8" declfile="libs/base/src/base/vec2.h" declline="100" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga8b04e3baf0731fe2189eedcc198802ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v2</type>
        <definition>v2 eu::operator-</definition>
        <argsstring>(const v2 &amp;lhs, const v2 &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type>const v2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="101" column="8" declfile="libs/base/src/base/vec2.h" declline="101" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gacb026ebe78d1da4dc0644d1910db7637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v2</type>
        <definition>v2 eu::operator*</definition>
        <argsstring>(const v2 &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>const v2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="102" column="8" declfile="libs/base/src/base/vec2.h" declline="102" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga1e39be8c6248cb595c1352d7461d00e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v2</type>
        <definition>v2 eu::operator*</definition>
        <argsstring>(float lhs, const v2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="103" column="8" declfile="libs/base/src/base/vec2.h" declline="103" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga57f4cd9af77a018eab90cbae9f5a1695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v2</type>
        <definition>v2 eu::operator*</definition>
        <argsstring>(const n2 &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>const n2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="104" column="8" declfile="libs/base/src/base/vec2.h" declline="104" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaadf6165530c925eecfb176b285482e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v2</type>
        <definition>v2 eu::operator*</definition>
        <argsstring>(float lhs, const n2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const n2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="105" column="8" declfile="libs/base/src/base/vec2.h" declline="105" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga15097e3a98c6a6729aaacc53539dd5a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v2</type>
        <definition>v2 eu::operator/</definition>
        <argsstring>(const v2 &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>eu::operator/</qualifiedname>
        <param>
          <type>const v2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="106" column="8" declfile="libs/base/src/base/vec2.h" declline="106" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gacb6acea8076942dd1562a76886089c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float eu::dot</definition>
        <argsstring>(const v2 &amp;lhs, const v2 &amp;rhs)</argsstring>
        <name>dot</name>
        <qualifiedname>eu::dot</qualifiedname>
        <param>
          <type>const v2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="109" column="11" declfile="libs/base/src/base/vec2.h" declline="109" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gacabbf07d3508dd327a89b476b39f8eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v2</type>
        <definition>v2 eu::lerp_vec2f</definition>
        <argsstring>(const v2 &amp;from, float v, const v2 &amp;to)</argsstring>
        <name>lerp_vec2f</name>
        <qualifiedname>eu::lerp_vec2f</qualifiedname>
        <param>
          <type>const v2 &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const v2 &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="111" column="8" declfile="libs/base/src/base/vec2.h" declline="111" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gad48308b54abb481dece4ab464048202d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const v2 &amp;v)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const v2 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>converts a 2d vector to a string, prefer fmt </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="114" column="17" declfile="libs/base/src/base/vec2.h" declline="114" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga92a0e2f8c9ecc8ceaee41a90680eba8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const n2 &amp;v)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const n2 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>converts a 2d unit vector to a string, prefer fmt </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec2.h" line="117" column="17" declfile="libs/base/src/base/vec2.h" declline="117" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga810d947671583fc421a8b6561708583e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v3</type>
        <definition>v3 eu::operator+</definition>
        <argsstring>(const v3 &amp;lhs, const v3 &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>eu::operator+</qualifiedname>
        <param>
          <type>const v3 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v3 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="135" column="8" declfile="libs/base/src/base/vec3.h" declline="135" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga806e92c1f7113df43c3b6bb128684ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v3</type>
        <definition>v3 eu::operator-</definition>
        <argsstring>(const v3 &amp;lhs, const v3 &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>eu::operator-</qualifiedname>
        <param>
          <type>const v3 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v3 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="136" column="8" declfile="libs/base/src/base/vec3.h" declline="136" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga1d1620b0b7a6b4dc28c476ca51eeed6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v3</type>
        <definition>v3 eu::operator*</definition>
        <argsstring>(float lhs, const v3 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v3 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="137" column="8" declfile="libs/base/src/base/vec3.h" declline="137" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga45487cdd319ddcfabd12e90b47b9d210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v3</type>
        <definition>v3 eu::operator*</definition>
        <argsstring>(const v3 &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>eu::operator*</qualifiedname>
        <param>
          <type>const v3 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="138" column="8" declfile="libs/base/src/base/vec3.h" declline="138" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga52398dba8d527f1516636902c49730bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v3</type>
        <definition>v3 eu::operator/</definition>
        <argsstring>(const v3 &amp;lhs, float rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>eu::operator/</qualifiedname>
        <param>
          <type>const v3 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="139" column="8" declfile="libs/base/src/base/vec3.h" declline="139" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga6287a63682804e3c425e10e34261d129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v3</type>
        <definition>v3 eu::operator/</definition>
        <argsstring>(float lhs, const v3 &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>eu::operator/</qualifiedname>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v3 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="140" column="8" declfile="libs/base/src/base/vec3.h" declline="140" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gac91ed2ee0f9cfe6e689fc0dc4cdd29f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v3</type>
        <definition>v3 eu::lerp_v3</definition>
        <argsstring>(const v3 &amp;f, float v, const v3 &amp;t)</argsstring>
        <name>lerp_v3</name>
        <qualifiedname>eu::lerp_v3</qualifiedname>
        <param>
          <type>const v3 &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const v3 &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="143" column="8" declfile="libs/base/src/base/vec3.h" declline="143" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga0720620adf5255e9d5928ac94de86d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const v3 &amp;v)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const v3 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>convert a 3d vector to string, prefer fmt </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="146" column="17" declfile="libs/base/src/base/vec3.h" declline="146" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1gaa1dd49dd72a82624ced10255790833b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const n3 &amp;v)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const n3 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>converts a 3d unit vector to string, prefer fmt </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="149" column="17" declfile="libs/base/src/base/vec3.h" declline="149" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga20517b7416d5479476f6372742c5f9b9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr v3</type>
        <definition>constexpr v3 eu::min</definition>
        <argsstring>(const v3 &amp;lhs, const v3 &amp;rhs)</argsstring>
        <name>min</name>
        <qualifiedname>eu::min</qualifiedname>
        <param>
          <type>const v3 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v3 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>component wise min value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="153" column="5" bodyfile="libs/base/src/base/vec3.h" bodystart="153" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga6acd10ee86510432805a6f2e2cefa8e5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr v3</type>
        <definition>constexpr v3 eu::max</definition>
        <argsstring>(const v3 &amp;lhs, const v3 &amp;rhs)</argsstring>
        <name>max</name>
        <qualifiedname>eu::max</qualifiedname>
        <param>
          <type>const v3 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const v3 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>component wise max value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec3.h" line="164" column="5" bodyfile="libs/base/src/base/vec3.h" bodystart="164" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="group__math_1ga865e0eb4a624211381ce34daf5aad69d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eu::string_from</definition>
        <argsstring>(const v4 &amp;v)</argsstring>
        <name>string_from</name>
        <qualifiedname>eu::string_from</qualifiedname>
        <param>
          <type>const v4 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>converts a 4d vector to a string, prefer fmt </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/base/src/base/vec4.h" line="47" column="17" declfile="libs/base/src/base/vec4.h" declline="47" declcolumn="17"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>

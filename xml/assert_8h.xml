<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="assert_8h" kind="file" language="C++">
    <compoundname>assert.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includedby refid="range_8h" local="yes">libs/base/src/base/range.h</includedby>
    <includedby refid="vec3_8h" local="yes">libs/base/src/base/vec3.h</includedby>
    <includedby refid="vec4_8h" local="yes">libs/base/src/base/vec4.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>libs/assert/src/assert/assert.h</label>
        <link refid="assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>libs/assert/src/assert/assert.h</label>
        <link refid="assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>libs/base/src/base/axisangle.h</label>
        <link refid="axisangle_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>libs/base/src/base/colors.h</label>
        <link refid="colors_8h"/>
      </node>
      <node id="5">
        <label>libs/base/src/base/mat4.h</label>
        <link refid="mat4_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>libs/base/src/base/quat.h</label>
        <link refid="quat_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>libs/base/src/base/range.h</label>
        <link refid="range_8h"/>
      </node>
      <node id="3">
        <label>libs/base/src/base/vec3.h</label>
        <link refid="vec3_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>libs/base/src/base/vec4.h</label>
        <link refid="vec4_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>libs/tests/src/tests/approx_equal.h</label>
        <link refid="approx__equal_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structeu_1_1assertlib_1_1AssertArgumentValue" prot="public">eu::assertlib::AssertArgumentValue</innerclass>
    <innernamespace refid="namespaceeu">eu</innernamespace>
    <innernamespace refid="namespaceeu_1_1assertlib">eu::assertlib</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="assert_8h_1a3950e5c477d263585dc2704da469ae98" prot="public" static="no">
        <name>BREAK_IN_DEBUG</name>
        <param></param>
        <initializer>    do \
    { \
    } while(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="10" column="10" bodyfile="libs/assert/src/assert/assert.h" bodystart="10" bodyend="13"/>
      </memberdef>
      <memberdef kind="define" id="assert_8h_1aa904224faf8979f062517894af990c6a" prot="public" static="no">
        <name>IMPLEMENT_ASSERT_LIB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="26" column="9" bodyfile="libs/assert/src/assert/assert.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="assert_8h_1aca68c0d4ac8df0838e209fb5300f7be3" prot="public" static="no">
        <name>ASSERT</name>
        <param><defname>x</defname></param>
        <initializer>    do \
    { \
        if(x) \
        { \
        } \
        else \
        { \
            if(<ref refid="namespaceeu_1_1assertlib_1a0edb7b21ba4d86e980bd40b0f63a0c2e" kindref="member">::eu::assertlib::is_throwing</ref>() == false) { <ref refid="assert_8h_1a3950e5c477d263585dc2704da469ae98" kindref="member">BREAK_IN_DEBUG</ref>(); } \
            <ref refid="namespaceeu_1_1assertlib_1adc0b8ea0bf3e97d51c38156ad5484a67" kindref="member">::eu::assertlib::on_assert</ref>( \
                    #x, \
                    __LINE__, \
                    __FILE__, \
                    &quot;&quot;, \
                    {}, \
                    __PRETTY_FUNCTION__); \
        } \
    } while(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="29" column="9" bodyfile="libs/assert/src/assert/assert.h" bodystart="29" bodyend="46"/>
      </memberdef>
      <memberdef kind="define" id="assert_8h_1a20d93230446fc0009184336e984ab6b2" prot="public" static="no">
        <name>ASSERTX</name>
        <param><defname>x</defname></param>
        <param><defname>...</defname></param>
        <initializer>    do \
    { \
        if(x) \
        { \
        } \
        else \
        { \
            if(<ref refid="namespaceeu_1_1assertlib_1a0edb7b21ba4d86e980bd40b0f63a0c2e" kindref="member">::eu::assertlib::is_throwing</ref>() == false) { <ref refid="assert_8h_1a3950e5c477d263585dc2704da469ae98" kindref="member">BREAK_IN_DEBUG</ref>(); } \
            <ref refid="namespaceeu_1_1assertlib_1adc0b8ea0bf3e97d51c38156ad5484a67" kindref="member">::eu::assertlib::on_assert</ref>( \
                    #x, \
                    __LINE__, \
                    __FILE__, \
                    #__VA_ARGS__, \
                    {__VA_ARGS__}, \
                    __PRETTY_FUNCTION__); \
        } \
    } while(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="48" column="9" bodyfile="libs/assert/src/assert/assert.h" bodystart="48" bodyend="65"/>
      </memberdef>
      <memberdef kind="define" id="assert_8h_1ae9328389a3cf2705a8a3f35a4a9ceca2" prot="public" static="no">
        <name>DIE</name>
        <param><defname>message</defname></param>
        <initializer>    <ref refid="namespaceeu_1_1assertlib_1adc0b8ea0bf3e97d51c38156ad5484a67" kindref="member">::eu::assertlib::on_assert</ref>( \
            message, \
            __LINE__, \
            __FILE__, \
            &quot;&quot;, \
            {}, \
            __PRETTY_FUNCTION__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="67" column="9" bodyfile="libs/assert/src/assert/assert.h" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="define" id="assert_8h_1ab2792c0e49bcb5df802ae03ffbf859cf" prot="public" static="no">
        <name>DIEX</name>
        <param><defname>message</defname></param>
        <param><defname>...</defname></param>
        <initializer>    <ref refid="namespaceeu_1_1assertlib_1adc0b8ea0bf3e97d51c38156ad5484a67" kindref="member">::eu::assertlib::on_assert</ref>( \
            message, \
            __LINE__, \
            __FILE__, \
            #__VA_ARGS__, \
            {__VA_ARGS__}, \
            __PRETTY_FUNCTION__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/assert/src/assert/assert.h" line="76" column="9" bodyfile="libs/assert/src/assert/assert.h" bodystart="76" bodyend="83"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/assert/src/assert/assert.h"/>
  </compounddef>
</doxygen>

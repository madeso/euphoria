name: run-coverage

on: [push, pull_request]

jobs:
    build:
        strategy:
            matrix:
                cxx: [g++-10]
                build_type: [Debug]

        runs-on: ubuntu-20.04

        steps:
        - uses: actions/checkout@v2
          with:
            submodules: recursive

        - name: Install Dependencies
          run: |
                sudo apt update
                sudo apt install -y libsdl2-dev libassimp-dev curl


        - name: List all installed GCC
          run: |
                which gcc
                echo "*** gcc ***"
                ls -l /usr/bin/gcc*
                echo "*** gcov ***"
                ls -l /usr/bin/gcov*


        - name: Switch to latest GCC
          run: |
                sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
                sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-10 10

        - name: Check version
          run: |
                gcc --version
                gcov --version


        - name: Install python dependencies
          run: |
                pip3 install wheel setuptools gcovr


        - name: Create Build Environment
          run: cmake -E make_directory ${{github.workspace}}/build


        - name: Configure
          shell: bash
          working-directory: ${{github.workspace}}/build
          env:
                CC: gcc-10
                CXX: ${{matrix.cxx}}
          run: cmake -DGENERATE_COVERAGE=ON -DCMAKE_BUILD_TYPE=${{matrix.build_type}} $GITHUB_WORKSPACE


        - name: Build
          shell: bash
          working-directory: ${{github.workspace}}/build
          env:
                CXX: ${{matrix.cxx}}
          run: time cmake --build . --config ${{matrix.build_type}}


        - name: Generate coverage files by running test
          shell: bash
          working-directory: ${{github.workspace}}/build
          run: |
                ctest -C ${{matrix.build_type}}


        - name: Debug file structure
          shell: bash
          working-directory: ${{github.workspace}}/build
          run: |
                echo "*** ls ***"
                ls
                echo "*** find ***"
                find .
                echo "*** tree ***"
                tree


        - name: Generate cobertura.xml and coveralls.json
          shell: bash
          env:
                COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_PROJECT_TOKEN }}
          working-directory: ${{github.workspace}}/build
          run: |
                echo "*** gcovr version ***"
                gcovr --version
                echo "*** run gcovr to cobertura***"
                gcovr -v --root .. --exclude '.*/build/.*' --exclude 'apps/editor/.*' --exclude 'libs/file_types/.*' --exclude '.*/external/.*' --exclude '.*/apps/.*' --exclude '.*/libs/tests/.*' --exclude '.*/libs/gui/.*' --exclude '.*/libs/log/.*' --exclude '.*/libs/render/.*' --exclude '.*/libs/window/.*' --exclude '.*/libs/assert/.*'  --exclude '.*/libs/file_types/.*' --exclude '.*/libs/core/examples/.*' --exclude '.*/libs/core/test/.*' --exclude '.*/libs/minsynth/test/.*' --cobertura cobertura.xml .
                echo "*** run gcovr ***"
                gcovr -v --root .. --exclude '.*/build/.*' --exclude 'apps/editor/.*' --exclude 'libs/file_types/.*' --exclude '.*/external/.*' --exclude '.*/apps/.*' --exclude '.*/libs/tests/.*' --exclude '.*/libs/gui/.*' --exclude '.*/libs/log/.*' --exclude '.*/libs/render/.*' --exclude '.*/libs/window/.*' --exclude '.*/libs/assert/.*'  --exclude '.*/libs/file_types/.*' --exclude '.*/libs/core/examples/.*' --exclude '.*/libs/core/test/.*' --exclude '.*/libs/minsynth/test/.*' --coveralls coveralls.json


        - name: Display cobertura.xml
          shell: bash
          working-directory: ${{github.workspace}}/build
          run: |
                cat cobertura.xml


        - name: Debug file structure (again)
          shell: bash
          working-directory: ${{github.workspace}}/build
          run: |
                echo "*** ls ***"
                ls
                echo "*** find ***"
                find .
                echo "*** tree ***"
                tree


        - name: Upload coverage to Codecov
          uses: codecov/codecov-action@v2
          with:
            flags: ${{ runner.os }}
            name: ${{ runner.os }}-coverage
            files: ${{github.workspace}}/build/cobertura.xml


        - name: Upload coverage to codacy
          uses: codacy/codacy-coverage-reporter-action@v1.3.0
          with:
            project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
            coverage-reports: ${{github.workspace}}/build/cobertura.xml

        - name: Upload coverage to coveralls via curl
          working-directory: ${{github.workspace}}/build
          shell: bash
          run: |
                curl --form json_file=@coveralls.json https://coveralls.io/api/v1/jobs

